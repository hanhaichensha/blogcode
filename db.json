{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/js/jquery2.0.3.min.js","path":"js/jquery2.0.3.min.js","modified":0},{"_id":"themes/landscape/source/js/jquery.min.map","path":"js/jquery.min.map","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/favicon.jpg","path":"css/images/favicon.jpg","modified":0},{"_id":"themes/landscape/source/css/images/banner_bak.jpg","path":"css/images/banner_bak.jpg","modified":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0},{"_id":"themes/landscape/source/css/font.css","path":"css/font.css","modified":0}],"Cache":[{"_id":"source/_drafts/Linux服务器安全.md","shasum":"5578c68507bcca448e88c8b2fe81191b31d52a1a","modified":1458818435770},{"_id":"source/_drafts/Web服务器安全策略.md","shasum":"fba6c16eb53759e79d3f39b093972ce99968c25e","modified":1458818435771},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter与iptabales关系.png","shasum":"f07b793296e3a9f13dbef4e65d63576e2eee07b6","modified":1465008189087},{"_id":"source/_posts/初识Netfilter-iptables/iptables数据包流程.png","shasum":"0f1d291a330ce1abd680a98e3322e11f8877c7de","modified":1465008189109},{"_id":"source/_posts/初识Netfilter-iptables/iptables策略组成.png","shasum":"41dd95105f2e09ef801d3e8dc1a76efa3ab25598","modified":1465008189112},{"_id":"source/_posts/Github个人静态博客的搭建.md","shasum":"19903dc9cb176d932daf3367af7c40099ff28d1f","modified":1458818436502},{"_id":"source/_posts/初识Netfilter-iptables/模拟网络.png","shasum":"c3946cc30033e971acfb3313778775b0df8f4e76","modified":1465008189128},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置1.png","shasum":"a385762c42f4a30f350841e2e8259ec88c905e95","modified":1465008189130},{"_id":"source/_posts/初识Netfilter-iptables/设置默认网关.png","shasum":"5dcbdddc7dba1175e69daa03e124aa8317ba91fd","modified":1465008189135},{"_id":"source/_posts/初识Netfilter-iptables/访问LM服务1.png","shasum":"22971485ee334d7de37727f4acb19101955ea9a1","modified":1465008189138},{"_id":"source/_posts/初识Netfilter-iptables/访问LM服务2.png","shasum":"428e539065338f67ebe089eb66de058ce9a14ec9","modified":1465008189139},{"_id":"source/_posts/别样的整数表示和运算.md","shasum":"29896bbc7de7add44181b1bf23cb36c02dee376b","modified":1465055556657},{"_id":"source/_posts/初识Netfilter-iptables.md","shasum":"e7ded4ac662da8e24bfd6b3c8954998390962e3f","modified":1465008189024},{"_id":"source/_posts/单击微信文章进入原文的方法/fengmian.jpg","shasum":"36161bbb799c3bc08067d14c758602b8f6b7ac8b","modified":1458818436689},{"_id":"source/_posts/单击微信文章进入原文的方法/图六.png","shasum":"d6df76b9deaa263ff7028157dab5371ec3dc2ace","modified":1458818436907},{"_id":"source/_posts/单击微信文章进入原文的方法.md","shasum":"218ffed71c3fc5ff67b3e52d48a13f1922a90c48","modified":1458818436503},{"_id":"source/_posts/博客名字的由来.md","shasum":"404d98aa45921b149a35140261fd60e8edbda26b","modified":1458818436912},{"_id":"source/_posts/计算机网络概述/图三.png","shasum":"c078fb552b5f969d3156d5365177d26ceae74fd7","modified":1458818436963},{"_id":"source/_posts/计算机网络概述/图二.png","shasum":"1a56f33a1fa563de33744b2ac4814bbb8bde1e26","modified":1458818436964},{"_id":"source/_posts/计算机网络概述.md","shasum":"a170460d77327ba2e9538874fd368c4b5c658e69","modified":1458818436913},{"_id":"source/_posts/计算机网络概述/图四.png","shasum":"80a6ff3d993cb7f5aba1c3a3223cc4a57f69ac0d","modified":1458818436971},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter-packet-flow.svg","shasum":"b93652bb519e2f632b0a459461d2779a588e92b4","modified":1465008189084},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置2.png","shasum":"f583ddd58d1730c961bd6051a5d8f681a8fe6864","modified":1465008189132},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置3.png","shasum":"ff911d09c4bd2c3574f62bff5a7ac738901bd6fe","modified":1465008189134},{"_id":"source/_posts/初识Netfilter-iptables/隐含匹配.jpg","shasum":"c1c7fdeecdb754d0cb6d5cab759add00d8bea3e4","modified":1465008189141},{"_id":"source/_posts/单击微信文章进入原文的方法/图一.png","shasum":"ec4bc73ec7abfd302e24988929dc0eba297e2af6","modified":1458818436808},{"_id":"source/_posts/单击微信文章进入原文的方法/图四.png","shasum":"c2af20e2c69405284ed6cf92a703332cba06670e","modified":1458818436911},{"_id":"source/_posts/单击微信文章进入原文的方法/图三.png","shasum":"ada815093d7bd9c95778dd75500ed6627aa1becf","modified":1458818436895},{"_id":"source/_posts/单击微信文章进入原文的方法/图二.png","shasum":"df77cfd2e9f7546cdd1b15b05e65ad7b8432906d","modified":1458818436899},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter-packet-flow.png","shasum":"62e35afd4e37c919b903dfb5cea619a84e9a1ba8","modified":1465008189082},{"_id":"source/_posts/计算机网络概述/图五.png","shasum":"667b20c74023428436cdaa7b26f6d26a65cad7f1","modified":1458818436969},{"_id":"source/_posts/初识Netfilter-iptables/显式匹配.jpg","shasum":"ab728363b3fb1277620df778aa34d89e52a21a2c","modified":1465008189125},{"_id":"source/_posts/计算机网络概述/图一.jpg","shasum":"6fe0234cfaaea8b8665cb48b5cf36e61e60410cb","modified":1458818436962},{"_id":"source/_posts/单击微信文章进入原文的方法/图五.png","shasum":"77c13f3006a540178052e120289bdc749294c916","modified":1458818436904},{"_id":"themes/landscape/_config.yml","shasum":"53815d355e65b7dd75673ee9cc18b8e960b75281","modified":1458818436975},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1458818436972},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1458818436973},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1458818436979},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1458818436980},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1458818436982},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"266452fb36626bb0a0ca3e0e8b2978c43c23866b","modified":1458818436981},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1458818436974},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1458818436983},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1458818436984},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"b55897edcd53dc54a4f0e288c457224523604824","modified":1458818436978},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1458818436985},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1458818436985},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1458818436985},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1458818436986},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1458818436986},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1458818436987},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1458818436988},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1458818436988},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1458818436987},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1458818436988},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1458818436989},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"81d33e9e9dd86bc0a2073a78cd4f50724acd4de1","modified":1458818436983},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"2c9654a7beab5dbbb028eeb156807ae9179624b5","modified":1458818436984},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1458818436989},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1458818436990},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1458818436991},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1458818436990},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1458818436993},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1458818436993},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1458818436994},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1458818436995},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1458818436994},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1458818436990},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1458818436997},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1458818436998},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1458818436996},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1458818436996},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1458818437000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1458818437000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1458818437000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1458818437001},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"0af69dcc1affaf8aeed33402a5f10b6af5b48418","modified":1458818436999},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1458818436997},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1458818436999},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1458818437001},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1458818437002},{"_id":"themes/landscape/source/css/font.css","shasum":"d2c3b48df4256b730b9dcb4b932550544cd83243","modified":1458818437004},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1458818437002},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1458818437010},{"_id":"themes/landscape/source/css/images/favicon.jpg","shasum":"1ed9999d5f43b9d5873ce9fe72263eb271fae9d3","modified":1458818437071},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1458818437072},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458818437073},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458818437074},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458818437076},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1458818437077},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458818437075},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458818437078},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458818437079},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1458818437080},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1458818437084},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1458818437085},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1458818437085},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1458818437086},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1458818437005},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1458818437006},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1458818437087},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1458818437107},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1458818437108},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1458818437009},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1458818437116},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"813f6072ce732ad698e9979bfb3a3dcd1e4b0d0a","modified":1458818437063},{"_id":"themes/landscape/source/js/jquery2.0.3.min.js","shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1458818437115},{"_id":"themes/landscape/source/js/jquery.min.map","shasum":"83c9ec8ebb61ee9916f624a1e75ba47b0f1b0ec4","modified":1458818437113},{"_id":"themes/landscape/source/css/images/banner_bak.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1458818437069},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1458818437008},{"_id":"source/_posts/单击微信文章进入原文的方法/六一儿童节.png","shasum":"de9f1d926ac19e6c8b4c0076e7a1fb212d65cc92","modified":1465008249301},{"_id":"public/js/script.js","modified":1465055261161,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/js/jquery2.0.3.min.js","modified":1465055261170,"shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d"},{"_id":"public/js/jquery.min.map","modified":1465055261196,"shasum":"83c9ec8ebb61ee9916f624a1e75ba47b0f1b0ec4"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1465055261202,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1465055261206,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1465055261211,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1465055261215,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1465055261218,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1465055261221,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1465055261228,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1465055261234,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1465055261248,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1465055261265,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1465055261274,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1465055261282,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1465055261289,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1465055261293,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1465055261298,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1465055262241,"shasum":"67182948fec42b5b89a68a17bea4ada6fcef79a0"},{"_id":"public/css/images/favicon.jpg","modified":1465055262574,"shasum":"1ed9999d5f43b9d5873ce9fe72263eb271fae9d3"},{"_id":"public/css/images/banner_bak.jpg","modified":1465055262579,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/images/banner.jpg","modified":1465055262587,"shasum":"813f6072ce732ad698e9979bfb3a3dcd1e4b0d0a"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1465055262592,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1465055262596,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1465055262602,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1465055262606,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1465055262612,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/css/font.css","modified":1465055262617,"shasum":"d2c3b48df4256b730b9dcb4b932550544cd83243"},{"_id":"public/2015/11/26/计算机网络概述/图一.jpg","modified":1465055262622,"shasum":"6fe0234cfaaea8b8665cb48b5cf36e61e60410cb"},{"_id":"public/2015/11/26/计算机网络概述/图三.png","modified":1465055262629,"shasum":"c078fb552b5f969d3156d5365177d26ceae74fd7"},{"_id":"public/2015/11/26/计算机网络概述/图二.png","modified":1465055262633,"shasum":"1a56f33a1fa563de33744b2ac4814bbb8bde1e26"},{"_id":"public/2015/11/26/计算机网络概述/图五.png","modified":1465055262638,"shasum":"667b20c74023428436cdaa7b26f6d26a65cad7f1"},{"_id":"public/2015/11/26/计算机网络概述/图四.png","modified":1465055262642,"shasum":"80a6ff3d993cb7f5aba1c3a3223cc4a57f69ac0d"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/fengmian.jpg","modified":1465055262651,"shasum":"36161bbb799c3bc08067d14c758602b8f6b7ac8b"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/六一儿童节.png","modified":1465055262661,"shasum":"de9f1d926ac19e6c8b4c0076e7a1fb212d65cc92"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图一.png","modified":1465055262667,"shasum":"ec4bc73ec7abfd302e24988929dc0eba297e2af6"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图三.png","modified":1465055262670,"shasum":"ada815093d7bd9c95778dd75500ed6627aa1becf"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图二.png","modified":1465055262688,"shasum":"df77cfd2e9f7546cdd1b15b05e65ad7b8432906d"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图五.png","modified":1465055262691,"shasum":"77c13f3006a540178052e120289bdc749294c916"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图六.png","modified":1465055262694,"shasum":"d6df76b9deaa263ff7028157dab5371ec3dc2ace"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图四.png","modified":1465055262698,"shasum":"c2af20e2c69405284ed6cf92a703332cba06670e"},{"_id":"public/2016/03/25/初识Netfilter-iptables/Netfilter-packet-flow.png","modified":1465055262701,"shasum":"62e35afd4e37c919b903dfb5cea619a84e9a1ba8"},{"_id":"public/2016/03/25/初识Netfilter-iptables/Netfilter-packet-flow.svg","modified":1465055262709,"shasum":"b93652bb519e2f632b0a459461d2779a588e92b4"},{"_id":"public/2016/03/25/初识Netfilter-iptables/Netfilter与iptabales关系.png","modified":1465055262713,"shasum":"f07b793296e3a9f13dbef4e65d63576e2eee07b6"},{"_id":"public/2016/03/25/初识Netfilter-iptables/iptables数据包流程.png","modified":1465055262715,"shasum":"0f1d291a330ce1abd680a98e3322e11f8877c7de"},{"_id":"public/2016/03/25/初识Netfilter-iptables/iptables策略组成.png","modified":1465055262725,"shasum":"41dd95105f2e09ef801d3e8dc1a76efa3ab25598"},{"_id":"public/2016/03/25/初识Netfilter-iptables/显式匹配.jpg","modified":1465055262729,"shasum":"ab728363b3fb1277620df778aa34d89e52a21a2c"},{"_id":"public/2016/03/25/初识Netfilter-iptables/模拟网络.png","modified":1465055262734,"shasum":"c3946cc30033e971acfb3313778775b0df8f4e76"},{"_id":"public/2016/03/25/初识Netfilter-iptables/虚拟机网络配置1.png","modified":1465055262739,"shasum":"a385762c42f4a30f350841e2e8259ec88c905e95"},{"_id":"public/2016/03/25/初识Netfilter-iptables/虚拟机网络配置2.png","modified":1465055262743,"shasum":"f583ddd58d1730c961bd6051a5d8f681a8fe6864"},{"_id":"public/2016/03/25/初识Netfilter-iptables/虚拟机网络配置3.png","modified":1465055262748,"shasum":"ff911d09c4bd2c3574f62bff5a7ac738901bd6fe"},{"_id":"public/2016/03/25/初识Netfilter-iptables/设置默认网关.png","modified":1465055262752,"shasum":"5dcbdddc7dba1175e69daa03e124aa8317ba91fd"},{"_id":"public/2016/03/25/初识Netfilter-iptables/访问LM服务1.png","modified":1465055262754,"shasum":"22971485ee334d7de37727f4acb19101955ea9a1"},{"_id":"public/2016/03/25/初识Netfilter-iptables/访问LM服务2.png","modified":1465055262757,"shasum":"428e539065338f67ebe089eb66de058ce9a14ec9"},{"_id":"public/2016/03/25/初识Netfilter-iptables/隐含匹配.jpg","modified":1465055262759,"shasum":"c1c7fdeecdb754d0cb6d5cab759add00d8bea3e4"},{"_id":"public/2016/06/04/别样的整数表示和运算/index.html","modified":1465055565562,"shasum":"97406a0b587482016a28f0542e519848f5a16d28"},{"_id":"public/2016/03/25/初识Netfilter-iptables/index.html","modified":1465055263022,"shasum":"2d94b5201b98e0730bb4451ac34a9344141eedfd"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/index.html","modified":1465055263054,"shasum":"cae6ae9c9ff416e989ed76a6010f10c11822c27c"},{"_id":"public/2015/11/26/计算机网络概述/index.html","modified":1465055263068,"shasum":"f48fd1c9f866a93701d196988010b32266ffaa00"},{"_id":"public/2015/11/21/Github个人静态博客的搭建/index.html","modified":1465055263094,"shasum":"4f62f530b9a15a62d6333003dff83246367a2a09"},{"_id":"public/2015/11/21/博客名字的由来/index.html","modified":1465055263105,"shasum":"46539641f348249926e7b662abeef8f803589986"},{"_id":"public/archives/index.html","modified":1465055263136,"shasum":"bf616a0131f7b9e6e3c265c24e0574603a4c39fa"},{"_id":"public/archives/2015/index.html","modified":1465055263146,"shasum":"9e3738f0b7c8c445532d121108b2d02ee25eaeb6"},{"_id":"public/archives/2015/11/index.html","modified":1465055263157,"shasum":"0b95c9da4f3fdc53f9571d48c2be038a0413e15d"},{"_id":"public/archives/2016/index.html","modified":1465055263170,"shasum":"40ef0d19a5ef4c39c97a0b2c1a899250071dc4ec"},{"_id":"public/archives/2016/03/index.html","modified":1465055263179,"shasum":"abec421c8e6d24431cded83fdd7a673855b00f58"},{"_id":"public/archives/2016/06/index.html","modified":1465055263189,"shasum":"2c28b1d4a80b30b39cd9e94adafc631a2f756fa4"},{"_id":"public/baidusitemap.xml","modified":1465055565788,"shasum":"e46f7a40814b19393474c6d8c8930f36ab83a91e"},{"_id":"public/categories/计算机网络/index.html","modified":1465055263209,"shasum":"59ba4212a8fe34c15fc08f4f8e881eb8d3fccfdc"},{"_id":"public/categories/杂谈/index.html","modified":1465055263216,"shasum":"6ba7a6284cb7872b7dc9a80356f8ba9d898b339e"},{"_id":"public/categories/微信开发/index.html","modified":1465055263222,"shasum":"2fbfcb4926cf06d881be7251f553244d479df089"},{"_id":"public/categories/计算机基础/index.html","modified":1465055263230,"shasum":"cfa275313b5eccb8d142ed8fa58615ab5d1d9654"},{"_id":"public/categories/Linux防火墙/index.html","modified":1465055263237,"shasum":"7690f8db478bfa984bb0250dcac6afad4dc198be"},{"_id":"public/categories/Hexo/index.html","modified":1465055263244,"shasum":"63c2eb6df2680bf808789fbc9f297544a598ca5f"},{"_id":"public/atom.xml","modified":1465055565820,"shasum":"09e19a270600c666d3a15ac8bf819d8f1e332cb9"},{"_id":"public/index.html","modified":1465055565812,"shasum":"05a1265b45d805b41c7a8ebc0a3f06671fb99438"},{"_id":"public/sitemap.xml","modified":1465055565826,"shasum":"a18f7509ccdadd5b7cd458d643011785031d6929"},{"_id":"public/tags/计算机网络/index.html","modified":1465055263312,"shasum":"b0b380fb16f090ecdae947671dca550d943a9f99"},{"_id":"public/tags/杂谈/index.html","modified":1465055263319,"shasum":"fdbe40b31c413dabad44222a7f6d7b3d586a9d8e"},{"_id":"public/tags/关于博客/index.html","modified":1465055263323,"shasum":"010be0860ae54b09b13552eb51a6362caa1d5949"},{"_id":"public/tags/微信开发/index.html","modified":1465055263329,"shasum":"626c5186ce2bd61f691ca522d78376fd5a213cfa"},{"_id":"public/tags/计算机基础/index.html","modified":1465055263334,"shasum":"29eefa9d9aa0db944f47b2873d2e36b42c5ed45a"},{"_id":"public/tags/数学/index.html","modified":1465055263340,"shasum":"6d31b0ef002d53c00d3b1dbbf4a78a959e48768e"},{"_id":"public/tags/iptables/index.html","modified":1465055263346,"shasum":"8fcc9c155faafe84f4011341f8ed542f1c423350"},{"_id":"public/tags/Netfilter/index.html","modified":1465055263352,"shasum":"74ee70170f55337f947d02db2ac7fa3a2af470e3"},{"_id":"public/tags/防火墙/index.html","modified":1465055263356,"shasum":"9e997bb388db733e637f2fdd9dead6f5fd001e85"},{"_id":"public/tags/网络/index.html","modified":1465055263361,"shasum":"d13ef5867533d5591d847e09e9e2394bf9a9a6ec"},{"_id":"public/tags/教程/index.html","modified":1465055263369,"shasum":"88bec0f68a3982550304a303765e74a3bff421be"},{"_id":"public/tags/总结/index.html","modified":1465055263375,"shasum":"a48eca4fad18fa7ffb2a2e1883f2c3bb22d7ea2b"},{"_id":"public/tags/Hexo/index.html","modified":1465055263379,"shasum":"995d9e0b51e1fac2be86cae3cde781c864dea37d"}],"Category":[{"name":"计算机网络","_id":"cip1c2oww000290optt8w1n3n"},{"name":"杂谈","_id":"cip1c2oyf000790opwhrx075y"},{"name":"微信开发","_id":"cip1c2oyk000e90op3wlju4bn"},{"name":"计算机基础","_id":"cip1c2ozl000j90op46iv4rru"},{"name":"Linux防火墙","_id":"cip1c2ozr000q90opy1xthp24"},{"name":"Hexo","_id":"cip1c2p1k001190op3xkca9xo"}],"Data":[],"Page":[],"Post":[{"title":"Linux服务器安全","_content":"","source":"_drafts/Linux服务器安全.md","raw":"title: Linux服务器安全\ntags:\n---\n","slug":"Linux服务器安全","published":0,"date":"2016-03-24T11:20:35.770Z","updated":"2016-03-24T11:20:35.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip1c2owc000090oprklbwbk2"},{"title":"计算机网络概述","date":"2015-11-26T12:51:27.000Z","_content":"\n\n### 基本原理\n\n在《也说“当你输入一个网址，实际会发生什么?”》中介绍到，一台电脑要跟另一台电脑进行通信（所谓通信就是进行数据交换，比如：从其他电脑上下载一个文件到自己电脑等等，如果没有网络，我们一般的做法是使用U盘、光盘等存储设备将文件从某电脑上拷贝到U盘或者刻录到光盘，然后再把U盘或者光盘的文件拷贝到自己电脑上），说道一个重要的步骤就是找到想进行通信的计算机的IP地址（使用DNS协议实现），只是这样就能通信了吗？我只能说小伙子你真是“too young too simple”。这只是万里长征的一小步，为了后面知识点介绍的方便和对网络通信有大局观，现在先简单的概括性的对网络进行介绍。  \n\n上篇日记中说到，在浏览器地址栏中输入www.baidu.com时，我们的计算机会把这个域名转换成IP地址，这个宏观过程就是之前讲过的DNS协议查询的那样，但是现在的问题是，本机也就是192.168.1.100去询问DNS服务器223.5.5.5 www.baidu.com的IP是多少时，本机和DNS服务器并不是用一根线直接相连的，而是通过网关和路由器间接相连，要把这个询问消息发送个DNS服务器，就必须要这些网关和路由器进行转发，使用ipconfig /all命令可以查看网关，如图：\n\n<!--more-->\n\n{% asset_img 图一.jpg 图一 %}  \n\n也就是说我先把信息发给网关或者路由器，如果只能使用IP来表示目标的话，那就只能先将目标设置为网关IP：192.168.1.100，但是当网关收到了这条消息后，网关不知道该怎么办，它该把这条消息发给谁呢？这显然是行不通的，当然这里可以使用广播，向与网关相连的所有的网关或这路由器都发送这条消息，其它机器使用同样的方法一直把消息传递给DNS服务器，然后DNS服务器使用同样的方法把响应回传。这种实现有一个很恐怖的地方，就拿网关A以及和网关A相连的另一个路由B来说，当网关把消息广播出去后，路由B会收到一条消息，然后路由B又将消息广播，此时网关A又会收到这条消息，然后A和B就传这条消息传到白头到老，地老天荒。如图：\n\n{% asset_img 图二.png 图二 %}  \n\n有人说这个比较容易解决，A传给B后，B传给除A外的其他机器，这样就不会出现这种传过来传回去的无限循环。传给出了除信息来源的其他机器，也就是说每传到一个机器后，要把信息里的源IP地址改变成机器自己的IP地址，这会出现当DNS服务器收到信息后不知道把信息回给谁？接着广播吗？就算这样行的通，这样真的能解决无限循环的问题吗？现在假设A将信息传给B，B传给除A外的其他机器，比如C，C收到信息，C将信息传给除B外的其他机器，比如A，又是一个天长地久，之前是两人的缠缠绵绵到天涯，现在是三人的纠葛漩涡。除此之外，这种方法带来的将是整个网络的瘫痪，进入流言满天飞，而且是永无停歇的境况。如图：\n\n{% asset_img 图三.png 图三 %}  \n\n这么看来这种方法是行不通的，那用什么办法可以解决呢？\n既然是因为目标IP和源IP在传递的过程中一直在变化，那可以再添加一个地址，套一层壳，每次只换壳，目标IP永远不变，有句歌词怎么唱来着：“洋装虽然穿在身 我心依然是中国心”。正所谓初心不改，奋勇向前，总有一天会达成目标的。看一看具体的流程，本机将DNS消息和目标IP和自己IP以及网关的一个地址（目标地址）和自己的一个地址（源地址）,根据网关的这个地址，把信息发个网关，网关收到消息，根据目标IP选择一个目标路由器或主机，将消息中的目标地址改成路由或者主机的地址，将源地址改为网关自己的地址，根据目标地址，将消息发给路由或主机，以此类推一直到目标IP主机收到这个消息。消息回复，使用同样的方法。这样就完成了两台电脑之间的通信。\n\n用什么地址可以唯一标识一台计算机呢？答案是MAC地址，每台计算机在生产的时候都会为其分配一个唯一的一个MAC地址。计算机之间的通信原理大致就是这样，具体细节，会在后面的文章中介绍。接下来，我们来大致理一理这个过程的稍微具体点的实现。\n\n我们分别看看各个计算机的职责：\n\n1. 发起通信的主机，主要职责：\n   * 准备好要发送的用户信息；\n   * 找到目标主机IP地址和本机的IP地址；\n   * 将目标主机的的IP地址添加为信息的目标IP，将自己的IP地址添加为源IP，将其作为一整体，当作一条新的信息；\n   * 找到网关的MAC地址和本机的MAC地址；\n   * 在新的信息上添加网关MAC地址作为目标MAC地址，添加本机MAC地址作为源MAC地址；\n   * 根据目标MAC地址，将消息发送出去。\n2. 网关或者路由，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是，则取出目标IP地址，看看离这个IP最近且与自己直接相连的路由或者主机，找出它的MAC地址，并且和它相连的网络接口，将目标MAC地址修改为最近的路由或者主机的MAC地址，将源MAC地址修改为网关或者路由自己的MAC地址，将消息从找到的网络接口发送出去。\n   * 如果不是，将消息丢弃。\n3. 接收端的主机，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是本机MAC地址，取出目标IP，检查是不是本机IP；\n   * 如果不是本机MAC地址，丢弃此信息，不作后面的解析；\n   * 如果是本机IP地址，则取出信息，进行相应处理；\n   * 如果不是本机IP地址，则丢弃此消息；\n\n从上面的职责，我们可以看出它们的主要职责有，用户信息处理，IP地址处理和MAC地址处理。源主机和目标主机这三个职责都有，只不过是过程向逆，三者都有的职责是IP地址处理和MAC地址处理。所以我们可以将这三个职责抽象出三个独立的处理模块，分别处理各自职责内的事情。将这三个模块组合起来就可以处理整个通信过程。而且从上面的过程可以明显的看出，这些处理过程有着层级关系，为了降低复杂性，我们对网络进行分层，将用户数据处理模块对应为应用层，IP地址处理模块对应为IP层，MAC地址处理模块对应为数据链路层。这就是计算机网络中的分层思想。\n\n小伙伴们看到这，是不是要着急了。计算机网络的书本上明明白白说了OSI参考模型是七层，TCP/IP参考模型是四层，这里只有三层，明显是博主学艺不精。至于OSI参考模型这里就不说了，这个只是参考模型，在实现中并没有采用。TCP/IP参考模型的四层，再加上一层物理层（就是各类物理硬件），我们说的就是这个模型，下面将另外两层补上。\n\n前面只是说到两台主机间的通信，我们忽略了物理设备这层（即各类硬件），把这层加上就足够两台主机通信了（当然这里可靠性之类的细节），也就是说，如果每台计算机只有一个使用网络的程序，那么理论上有这四层就能进行网络通信了，但是我们都知道，每台电脑上都有很多程序在使用网络，这就带了一个问题，计算机收到了来之网络上的信息，这条信息是要交给哪个应用程序的呢？我们可已使用上面的原理再加一层处理，网络分层也加一层，这一层处理的职责是在信息中添加一个ID标记（也就是端口）来标记这条消息是给哪个应用程序的，在接收端，根据这个ID（即端口）将信息交给对应的应用程序。加上这两层，就可以真真正正的实现通信了。\n\n---\n\n### 分层\n\n下面来看看分层：网络协议通常分不同层次进行开发，每一层分别\n负责不同的通信功能。这里不介绍物理层，这一层并非协议分层。\n\n1. 链路层：通常包括操作系统中的设备驱动程序及接口卡。\n2. 网络层：处理分组在网络中的活动，包括协议有：IP、ICMP和IGMP。\n3. 运输层：或者叫做传输层，主要是为两台主机的应用程序提供端到端的通信，包括协议有：TCP和UDP。\n4. 应用层：负责处理特定应用程序的细节，包括协议有：Telnet、FTP、HTTP和e-mail等。\n\n\n用一张图来表示一下TCP/IP协议族中不同层次的协议，协议详情，以后在详陈：\n\n{% asset_img 图四.png 图四 %}\n\n---\n\n### 封装\n\n借助图四中的协议之间的箭头，我们来看看数据的组装（即箭头方向是从上向下的过程）和解析（即箭头方向是从下向上的过程）过程，这里的组装就是现在要将的封装，下一小节要说的分用就是解析过程。\n\n封装过程如下：\n\n1. 用户输入数据给应用程序，比如使用FTP的PWD命令显示当前目录，此时的数据就是：PWD。\n2. FTP应用程序将此命令按FTP协议的规定将用户数据封装成FTP数据：PWD\\r\\r。\n3. FTP将FTP数据交给TCP层，TCP层按照TCP协议加上TCP头，形成新的数据：TCP头+FTP数据。\n4. TCP层将数据传给IP层，IP层按照IP协议加上IP头，形成新的数据：IP头+TCP头+FTP数据。\n5. IP层将数据交给链路层，链路层按照链路层上的协议（一般是以太网协议）加上链路层协议头和链路层尾部，形成新的数据：以太网协议头+IP头+TCP头+FTP数据+以太网尾部。\n\n如下图所示：\n\n{% asset_img 图五.png 图五 %}\n\n---\n\n### 分用\n\n分用正好是封装的逆过程，此过程就不赘述了，这里说一个题外话，由以太网尾部联想到身份证最后一位的含义，它们的作用是一样的，都是一个校验作用。现在就让我们来看看身份证末尾出现X是怎么一回事：\n\n公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。\n\n前面的17位是可以根据地区、出生年月和顺序码确定下来，最有一位的计算方法如下：\n\n1. 将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这17位数字和系数相乘的结果相加。\n3. 用加出来和除以11，看余数是多少？\n4. 余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字。其分别对应的最后一位身份证的号码为1－0－X －9－8－7－6－5－4－3－2。\n\n从上面可以看出由于是对11取余数，所以有11个余数，而一位数只有10个，所以就出现了X。现在你可以用自己的身份证验证一下是不是这样的,如果你计算出来的结果与你身份证最后一位不一样，你的身份证就有问题了。还有一点：倒数第二数字，如果是奇数，则说明这个身份证号码是男性的，偶数则是女性的。\n\n---\n\n参考资料：\n\n1. 《TCP/IP详解：卷一》\n2. [居民身份证号码](http://baike.baidu.com/view/188003.htm)","source":"_posts/计算机网络概述.md","raw":"title: 计算机网络概述\ntags:\n  - 计算机网络\ncategories:\n  - 计算机网络\ndate: 2015-11-26 20:51:27\n---\n\n\n### 基本原理\n\n在《也说“当你输入一个网址，实际会发生什么?”》中介绍到，一台电脑要跟另一台电脑进行通信（所谓通信就是进行数据交换，比如：从其他电脑上下载一个文件到自己电脑等等，如果没有网络，我们一般的做法是使用U盘、光盘等存储设备将文件从某电脑上拷贝到U盘或者刻录到光盘，然后再把U盘或者光盘的文件拷贝到自己电脑上），说道一个重要的步骤就是找到想进行通信的计算机的IP地址（使用DNS协议实现），只是这样就能通信了吗？我只能说小伙子你真是“too young too simple”。这只是万里长征的一小步，为了后面知识点介绍的方便和对网络通信有大局观，现在先简单的概括性的对网络进行介绍。  \n\n上篇日记中说到，在浏览器地址栏中输入www.baidu.com时，我们的计算机会把这个域名转换成IP地址，这个宏观过程就是之前讲过的DNS协议查询的那样，但是现在的问题是，本机也就是192.168.1.100去询问DNS服务器223.5.5.5 www.baidu.com的IP是多少时，本机和DNS服务器并不是用一根线直接相连的，而是通过网关和路由器间接相连，要把这个询问消息发送个DNS服务器，就必须要这些网关和路由器进行转发，使用ipconfig /all命令可以查看网关，如图：\n\n<!--more-->\n\n{% asset_img 图一.jpg 图一 %}  \n\n也就是说我先把信息发给网关或者路由器，如果只能使用IP来表示目标的话，那就只能先将目标设置为网关IP：192.168.1.100，但是当网关收到了这条消息后，网关不知道该怎么办，它该把这条消息发给谁呢？这显然是行不通的，当然这里可以使用广播，向与网关相连的所有的网关或这路由器都发送这条消息，其它机器使用同样的方法一直把消息传递给DNS服务器，然后DNS服务器使用同样的方法把响应回传。这种实现有一个很恐怖的地方，就拿网关A以及和网关A相连的另一个路由B来说，当网关把消息广播出去后，路由B会收到一条消息，然后路由B又将消息广播，此时网关A又会收到这条消息，然后A和B就传这条消息传到白头到老，地老天荒。如图：\n\n{% asset_img 图二.png 图二 %}  \n\n有人说这个比较容易解决，A传给B后，B传给除A外的其他机器，这样就不会出现这种传过来传回去的无限循环。传给出了除信息来源的其他机器，也就是说每传到一个机器后，要把信息里的源IP地址改变成机器自己的IP地址，这会出现当DNS服务器收到信息后不知道把信息回给谁？接着广播吗？就算这样行的通，这样真的能解决无限循环的问题吗？现在假设A将信息传给B，B传给除A外的其他机器，比如C，C收到信息，C将信息传给除B外的其他机器，比如A，又是一个天长地久，之前是两人的缠缠绵绵到天涯，现在是三人的纠葛漩涡。除此之外，这种方法带来的将是整个网络的瘫痪，进入流言满天飞，而且是永无停歇的境况。如图：\n\n{% asset_img 图三.png 图三 %}  \n\n这么看来这种方法是行不通的，那用什么办法可以解决呢？\n既然是因为目标IP和源IP在传递的过程中一直在变化，那可以再添加一个地址，套一层壳，每次只换壳，目标IP永远不变，有句歌词怎么唱来着：“洋装虽然穿在身 我心依然是中国心”。正所谓初心不改，奋勇向前，总有一天会达成目标的。看一看具体的流程，本机将DNS消息和目标IP和自己IP以及网关的一个地址（目标地址）和自己的一个地址（源地址）,根据网关的这个地址，把信息发个网关，网关收到消息，根据目标IP选择一个目标路由器或主机，将消息中的目标地址改成路由或者主机的地址，将源地址改为网关自己的地址，根据目标地址，将消息发给路由或主机，以此类推一直到目标IP主机收到这个消息。消息回复，使用同样的方法。这样就完成了两台电脑之间的通信。\n\n用什么地址可以唯一标识一台计算机呢？答案是MAC地址，每台计算机在生产的时候都会为其分配一个唯一的一个MAC地址。计算机之间的通信原理大致就是这样，具体细节，会在后面的文章中介绍。接下来，我们来大致理一理这个过程的稍微具体点的实现。\n\n我们分别看看各个计算机的职责：\n\n1. 发起通信的主机，主要职责：\n   * 准备好要发送的用户信息；\n   * 找到目标主机IP地址和本机的IP地址；\n   * 将目标主机的的IP地址添加为信息的目标IP，将自己的IP地址添加为源IP，将其作为一整体，当作一条新的信息；\n   * 找到网关的MAC地址和本机的MAC地址；\n   * 在新的信息上添加网关MAC地址作为目标MAC地址，添加本机MAC地址作为源MAC地址；\n   * 根据目标MAC地址，将消息发送出去。\n2. 网关或者路由，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是，则取出目标IP地址，看看离这个IP最近且与自己直接相连的路由或者主机，找出它的MAC地址，并且和它相连的网络接口，将目标MAC地址修改为最近的路由或者主机的MAC地址，将源MAC地址修改为网关或者路由自己的MAC地址，将消息从找到的网络接口发送出去。\n   * 如果不是，将消息丢弃。\n3. 接收端的主机，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是本机MAC地址，取出目标IP，检查是不是本机IP；\n   * 如果不是本机MAC地址，丢弃此信息，不作后面的解析；\n   * 如果是本机IP地址，则取出信息，进行相应处理；\n   * 如果不是本机IP地址，则丢弃此消息；\n\n从上面的职责，我们可以看出它们的主要职责有，用户信息处理，IP地址处理和MAC地址处理。源主机和目标主机这三个职责都有，只不过是过程向逆，三者都有的职责是IP地址处理和MAC地址处理。所以我们可以将这三个职责抽象出三个独立的处理模块，分别处理各自职责内的事情。将这三个模块组合起来就可以处理整个通信过程。而且从上面的过程可以明显的看出，这些处理过程有着层级关系，为了降低复杂性，我们对网络进行分层，将用户数据处理模块对应为应用层，IP地址处理模块对应为IP层，MAC地址处理模块对应为数据链路层。这就是计算机网络中的分层思想。\n\n小伙伴们看到这，是不是要着急了。计算机网络的书本上明明白白说了OSI参考模型是七层，TCP/IP参考模型是四层，这里只有三层，明显是博主学艺不精。至于OSI参考模型这里就不说了，这个只是参考模型，在实现中并没有采用。TCP/IP参考模型的四层，再加上一层物理层（就是各类物理硬件），我们说的就是这个模型，下面将另外两层补上。\n\n前面只是说到两台主机间的通信，我们忽略了物理设备这层（即各类硬件），把这层加上就足够两台主机通信了（当然这里可靠性之类的细节），也就是说，如果每台计算机只有一个使用网络的程序，那么理论上有这四层就能进行网络通信了，但是我们都知道，每台电脑上都有很多程序在使用网络，这就带了一个问题，计算机收到了来之网络上的信息，这条信息是要交给哪个应用程序的呢？我们可已使用上面的原理再加一层处理，网络分层也加一层，这一层处理的职责是在信息中添加一个ID标记（也就是端口）来标记这条消息是给哪个应用程序的，在接收端，根据这个ID（即端口）将信息交给对应的应用程序。加上这两层，就可以真真正正的实现通信了。\n\n---\n\n### 分层\n\n下面来看看分层：网络协议通常分不同层次进行开发，每一层分别\n负责不同的通信功能。这里不介绍物理层，这一层并非协议分层。\n\n1. 链路层：通常包括操作系统中的设备驱动程序及接口卡。\n2. 网络层：处理分组在网络中的活动，包括协议有：IP、ICMP和IGMP。\n3. 运输层：或者叫做传输层，主要是为两台主机的应用程序提供端到端的通信，包括协议有：TCP和UDP。\n4. 应用层：负责处理特定应用程序的细节，包括协议有：Telnet、FTP、HTTP和e-mail等。\n\n\n用一张图来表示一下TCP/IP协议族中不同层次的协议，协议详情，以后在详陈：\n\n{% asset_img 图四.png 图四 %}\n\n---\n\n### 封装\n\n借助图四中的协议之间的箭头，我们来看看数据的组装（即箭头方向是从上向下的过程）和解析（即箭头方向是从下向上的过程）过程，这里的组装就是现在要将的封装，下一小节要说的分用就是解析过程。\n\n封装过程如下：\n\n1. 用户输入数据给应用程序，比如使用FTP的PWD命令显示当前目录，此时的数据就是：PWD。\n2. FTP应用程序将此命令按FTP协议的规定将用户数据封装成FTP数据：PWD\\r\\r。\n3. FTP将FTP数据交给TCP层，TCP层按照TCP协议加上TCP头，形成新的数据：TCP头+FTP数据。\n4. TCP层将数据传给IP层，IP层按照IP协议加上IP头，形成新的数据：IP头+TCP头+FTP数据。\n5. IP层将数据交给链路层，链路层按照链路层上的协议（一般是以太网协议）加上链路层协议头和链路层尾部，形成新的数据：以太网协议头+IP头+TCP头+FTP数据+以太网尾部。\n\n如下图所示：\n\n{% asset_img 图五.png 图五 %}\n\n---\n\n### 分用\n\n分用正好是封装的逆过程，此过程就不赘述了，这里说一个题外话，由以太网尾部联想到身份证最后一位的含义，它们的作用是一样的，都是一个校验作用。现在就让我们来看看身份证末尾出现X是怎么一回事：\n\n公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。\n\n前面的17位是可以根据地区、出生年月和顺序码确定下来，最有一位的计算方法如下：\n\n1. 将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这17位数字和系数相乘的结果相加。\n3. 用加出来和除以11，看余数是多少？\n4. 余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字。其分别对应的最后一位身份证的号码为1－0－X －9－8－7－6－5－4－3－2。\n\n从上面可以看出由于是对11取余数，所以有11个余数，而一位数只有10个，所以就出现了X。现在你可以用自己的身份证验证一下是不是这样的,如果你计算出来的结果与你身份证最后一位不一样，你的身份证就有问题了。还有一点：倒数第二数字，如果是奇数，则说明这个身份证号码是男性的，偶数则是女性的。\n\n---\n\n参考资料：\n\n1. 《TCP/IP详解：卷一》\n2. [居民身份证号码](http://baike.baidu.com/view/188003.htm)","slug":"计算机网络概述","published":1,"updated":"2016-03-24T11:20:36.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip1c2ows000190ophf7ptp7a"},{"title":"博客名字的来由","date":"2015-11-21T05:41:50.000Z","_content":"\n\n近来脑袋发热，想经营一下博客，看看自己能写出点啥鬼东西。同时，我也想知道自己对一件事情能坚持多久。在此写下开博声明，一来用来告诫自己：“自己吹过的牛，就算糗死，也要吹下去”；二来激励身边更多的小伙伴加入进来。\n\n<!--more-->\n\n---\n\n正事已经说完，现在来聊一聊名字的问题，这么怪异的名字来源与简书中**凤红邪**的一篇短诗：[《史上最中二爆表的四首诗！·郁》](http://www.jianshu.com/p/cc326f492bff)。全诗如下：\n>谁人手中诛心剑，\n>\n>借我斩此纷绪乱。\n>\n>凝悲噎泪为佳人，\n>\n>颦笑盈盈牵肠断。\n>\n>苟活碌碌计得失，\n>\n>诟我赞我如何辨。\n>\n>但恨吾生之已入凡人道，\n>\n>美色声名萦怀抱。\n>\n>困此牢笼不得脱，\n>\n>安共猪狗无为老。\n>\n>撕胸剖腹问此心，\n>\n>生我何用难欢笑。\n>\n>君不见世人多为尘关锁，\n>\n>随欲绝忧能几个。\n>\n>吾独叛世逆众人，\n>\n>礼法陈规皆斩破。\n>\n>命数非天当由我，\n>\n>但求逍遥宁执错。\n>\n>狂歌痛饮日西斜，\n>\n>携酒一壶走天涯。\n>\n>散发赤脚从人谩，\n>\n>醉来眠处即为家。\n>\n>待得沧桑都历尽，\n>\n>心若止水看浮华。\n>\n>却问谁人能自在，\n>\n>皆是<font color=#0099ff size=5 face=\"黑体\">翰海一尘沙。</font>\n\n---\n博客名字就是取自最后一句“却问谁人能自在，皆是翰海一尘沙”。各位看官，以后请不要问我为什么要取这个名字，不为什么，就是恰巧看到了这首诗而已，没有特别的意义。如果非得说有什么意义的话，那就是写这篇博客来练一练Markdown语法。","source":"_posts/博客名字的由来.md","raw":"title: 博客名字的来由\ndate: 2015-11-21 13:41:50\ntags:\n- 杂谈\n- 关于博客\ncategories:\n- 杂谈\n---\n\n\n近来脑袋发热，想经营一下博客，看看自己能写出点啥鬼东西。同时，我也想知道自己对一件事情能坚持多久。在此写下开博声明，一来用来告诫自己：“自己吹过的牛，就算糗死，也要吹下去”；二来激励身边更多的小伙伴加入进来。\n\n<!--more-->\n\n---\n\n正事已经说完，现在来聊一聊名字的问题，这么怪异的名字来源与简书中**凤红邪**的一篇短诗：[《史上最中二爆表的四首诗！·郁》](http://www.jianshu.com/p/cc326f492bff)。全诗如下：\n>谁人手中诛心剑，\n>\n>借我斩此纷绪乱。\n>\n>凝悲噎泪为佳人，\n>\n>颦笑盈盈牵肠断。\n>\n>苟活碌碌计得失，\n>\n>诟我赞我如何辨。\n>\n>但恨吾生之已入凡人道，\n>\n>美色声名萦怀抱。\n>\n>困此牢笼不得脱，\n>\n>安共猪狗无为老。\n>\n>撕胸剖腹问此心，\n>\n>生我何用难欢笑。\n>\n>君不见世人多为尘关锁，\n>\n>随欲绝忧能几个。\n>\n>吾独叛世逆众人，\n>\n>礼法陈规皆斩破。\n>\n>命数非天当由我，\n>\n>但求逍遥宁执错。\n>\n>狂歌痛饮日西斜，\n>\n>携酒一壶走天涯。\n>\n>散发赤脚从人谩，\n>\n>醉来眠处即为家。\n>\n>待得沧桑都历尽，\n>\n>心若止水看浮华。\n>\n>却问谁人能自在，\n>\n>皆是<font color=#0099ff size=5 face=\"黑体\">翰海一尘沙。</font>\n\n---\n博客名字就是取自最后一句“却问谁人能自在，皆是翰海一尘沙”。各位看官，以后请不要问我为什么要取这个名字，不为什么，就是恰巧看到了这首诗而已，没有特别的意义。如果非得说有什么意义的话，那就是写这篇博客来练一练Markdown语法。","slug":"博客名字的由来","published":1,"updated":"2016-03-24T11:20:36.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip1c2oyd000690opcu5299aq"},{"title":"单击微信文章进入原文的方法","date":"2016-03-06T06:05:55.000Z","_content":"昨天，一朋友因为我去年帮了她一点小忙而请吃了一顿豪华早茶，表示受之有愧，想想还是将这个方法分享一下。\n\n需求：当公众号向订阅用户推送一篇文章后，用户单击文章直接进入文章的原文，而不是进入微信的一个页面，然后再单击阅读原文才能进入到原文的页面，（这样对于一个有动画效果的H5页面，直接进入原文，可以直接看到动画效果，否则，有些用户点开后进入到微信的一个页面，没有单击阅读原文，从而不会看到动画效果，而且大部分用户都不会点击阅读原文）。如图：\n\n---\n#### 正常的流程：\n第一步：点击阅读原文\n\n{% asset_img 图一.png 图一 %} \n\n<!--more-->\n\n第二步：点击阅读原文\n\n{% asset_img 图二.png 图二 %}  \n\n第三步：到达原网页\n\n{% asset_img 图三.png 图三 %}\n  \n---\n#### 期望流程\n\n第一步：点击阅读原文\n\n{% asset_img 图四.png 图四 %}  \n\n第二步：到达原网页\n\n{% asset_img 图五.png 图五 %}  \n\n---\n\n期望的流程其实在2014年之前注册的公众号是有这个功能的，不过后来腾讯把公众号的好多功能都给限制了，至于其中缘由，我不清楚，也不想知道。那现在的公众号要怎样实现这个功能呢？通过分析有这种效果的公众号文章，发现这是一种“news”类型的消息，但是在微信开发文档的群发接口中：[http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html](http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html)，并没有真正的这种类型的消息，虽然有一种返回结果叫作“news”的东西，但是它并不是我们所期望的东西，还有一种叫作“mpnews”的消息，也不是我们期望的。后来在客服接口[http://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html](http://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html)中发现了这种类型的消息，抱着试一试的心态，居然成功了，当然了现在说起来很简单，但是在探索的阶段，它可是一个磨人的小妖精。\n\n---\n\n下面是用php实现此功能的代码：\n\n```php\n<?php\t\n\tset_time_limit(0);\n\n\tfunction encode2json($str) {\n\t\treturn urldecode(json_encode(url_encode($str)));\t\n\t}\n\n\tfunction url_encode($str) {\n\t\tif(is_array($str)) {\n\t\t\tforeach($str as $key=>$value) {\n\t\t\t\t$str[urlencode($key)] = url_encode($value);\n\t\t\t}\n\t\t} else {\n\t\t\t$str = urlencode($str);\n\t\t}\n\t\t\n\t\treturn $str;\n\t}\n\t\n\tfunction get_curl($url)\n\t{\n\t\tif (!extension_loaded('curl')) {\n            throw new Exception('cURL library is not loaded');\n        }\n\t\t$curl = curl_init();       \n\t\tcurl_setopt($curl, CURLOPT_URL, $url);       \n\t\tcurl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n\t\tcurl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);\n\t\tcurl_setopt($curl, CURLOPT_TIMEOUT, 30); \n\t\tcurl_setopt($curl, CURLOPT_RETURNTRANSFER, true); \n\t\t\n\t\treturn $curl;\n\t}\n\tfunction https_get($url)\n\t{       \n\t\ttry{\n\t\t\t$curl = get_curl($url);\n\t\t}catch(Exception $e){\n\t\t\tdie($e->getMessage());\n\t\t}\n\t\t$data = curl_exec($curl);       \n\t\tif (curl_errno($curl)) {\n\t\t\t$data = encode2json(array('error' => curl_error($curl)));\n\t\t}       \n\t\tcurl_close($curl);       \n\t\treturn $data;\n\t}\n\tfunction https_post($url, $data) {\n\t\ttry{\n\t\t\t$curl = get_curl($url);\n\t\t}catch(Exception $e){\n\t\t\tdie($e->getMessage());\n\t\t}\n\t\t$data_string = encode2json($data);\n\t\tcurl_setopt($curl, CURLOPT_POST, 1);\n\t\tcurl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);\n\t\tcurl_setopt($curl, CURLOPT_HTTPHEADER, array(\n\t\t\t'Content-Type: application/json; charset=utf-8',\n\t\t\t'Content-Length: ' . strlen($data_string))\n\t\t);\n\t\t$data = curl_exec($curl);       \n\t\tif (curl_errno($curl)) {\n\t\t\t$data = encode2json(array('error' => curl_error($curl)));\n\t\t}       \n\t\tcurl_close($curl);       \n\t\treturn $data;\n\t}\n\t\n\t//参考文档：http://mp.weixin.qq.com/wiki/14/9f9c82c1af308e3b14ba9b973f99a8ba.html\n\tfunction get_wechat_token()\n\t{\n\t\t$appid = \"xxxxxxxxxxxxxxxxxx\";\n\t\t$appsecret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n\t\t\n\t\t$url = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=$appid&secret=$appsecret\";\n\t\t\n\t\t$result = json_decode(https_get($url));\n\t\tif(property_exists($result,'error')){\n\t\t\tdie($result->error);\n\t\t}\n\t\t\n\t\tif(!property_exists($result,'access_token')){\n\t\t\tdie('Get wechat token failed!');\n\t\t}\n\t\t\n\t\tprint_r($result);\n\t\techo \"<br />\";\n\t\treturn $result->access_token;\n\t}\n\t\n\t//参考文档：http://mp.weixin.qq.com/wiki/12/54773ff6da7b8bdc95b7d2667d84b1d4.html\n\tfunction get_brocast_user($token)\n\t{\n\t\t$url = \"https://api.weixin.qq.com/cgi-bin/user/get?access_token=$token&next_openid=\";\n\t\t$result = json_decode(https_get($url));\n\t\tif(property_exists($result,'error')){\n\t\t\tdie($result->error);\n\t\t}\n\t\tif(!property_exists($result,'data')){\n\t\t\tdie('Get wechat user failed!');\n\t\t}\n\t\t\t \n\t\treturn $result->data->openid;\t\t// 获得所有用户的Openid\n\t}\n\t\n\t//参考文档：\n\t//\t\t1、接口文档：http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html\n\t//\t\t2、news类型的消息（即：'msgtype'=>'news'）参考文档：\t\n\t//\t\t\t\thttp://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html\n\tfunction send_news($access_token,$arr)\n\t{\n\t\t$url  = \"https://api.weixin.qq.com/cgi-bin/message/mass/send?access_token=$access_token\";\n\t\t$data = array(\n\t\t\t\t\t'touser'=>$arr,\n\t\t\t\t\t'msgtype'=>'news',\n\t\t\t\t\t'news'=>array(\n\t\t\t\t\t\t'articles'=>array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'title'=>'单击微信文章进入原文的方法',\n\t\t\t\t\t\t\t\t'description'=>'微信公众号文章无需单击阅读原文直接进入到原文的方法',\n\t\t\t\t\t\t\t\t'url'=>'http://t.cn/RGQwXwp',\n\t\t\t\t\t\t\t\t'picurl'=>'http://t.cn/RGQwaVW'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t); \n\n\t\t$return_content = https_post($url, $data);\n\t\tprint_r($return_content);\n\t\techo \"<br />\";\n\t}\n\t\n\t$access_token = get_wechat_token();\n\t$users = get_brocast_user($access_token);\n\tsend_news($access_token,$users);\n?>\n\n```\n\n代码中的$appid = \"xxxxxxxxxxxxxxxxxx\";$appsecret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";可以从微信公众平台的后台的“开发”菜单下的“基本配置”中得到，如图：\n\n{% asset_img 图六.png 图六 %}  \n\n","source":"_posts/单击微信文章进入原文的方法.md","raw":"title: 单击微信文章进入原文的方法\ntags:\n  - 微信开发\ncategories:\n  - 微信开发\ndate: 2016-03-06 14:05:55\n---\n昨天，一朋友因为我去年帮了她一点小忙而请吃了一顿豪华早茶，表示受之有愧，想想还是将这个方法分享一下。\n\n需求：当公众号向订阅用户推送一篇文章后，用户单击文章直接进入文章的原文，而不是进入微信的一个页面，然后再单击阅读原文才能进入到原文的页面，（这样对于一个有动画效果的H5页面，直接进入原文，可以直接看到动画效果，否则，有些用户点开后进入到微信的一个页面，没有单击阅读原文，从而不会看到动画效果，而且大部分用户都不会点击阅读原文）。如图：\n\n---\n#### 正常的流程：\n第一步：点击阅读原文\n\n{% asset_img 图一.png 图一 %} \n\n<!--more-->\n\n第二步：点击阅读原文\n\n{% asset_img 图二.png 图二 %}  \n\n第三步：到达原网页\n\n{% asset_img 图三.png 图三 %}\n  \n---\n#### 期望流程\n\n第一步：点击阅读原文\n\n{% asset_img 图四.png 图四 %}  \n\n第二步：到达原网页\n\n{% asset_img 图五.png 图五 %}  \n\n---\n\n期望的流程其实在2014年之前注册的公众号是有这个功能的，不过后来腾讯把公众号的好多功能都给限制了，至于其中缘由，我不清楚，也不想知道。那现在的公众号要怎样实现这个功能呢？通过分析有这种效果的公众号文章，发现这是一种“news”类型的消息，但是在微信开发文档的群发接口中：[http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html](http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html)，并没有真正的这种类型的消息，虽然有一种返回结果叫作“news”的东西，但是它并不是我们所期望的东西，还有一种叫作“mpnews”的消息，也不是我们期望的。后来在客服接口[http://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html](http://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html)中发现了这种类型的消息，抱着试一试的心态，居然成功了，当然了现在说起来很简单，但是在探索的阶段，它可是一个磨人的小妖精。\n\n---\n\n下面是用php实现此功能的代码：\n\n```php\n<?php\t\n\tset_time_limit(0);\n\n\tfunction encode2json($str) {\n\t\treturn urldecode(json_encode(url_encode($str)));\t\n\t}\n\n\tfunction url_encode($str) {\n\t\tif(is_array($str)) {\n\t\t\tforeach($str as $key=>$value) {\n\t\t\t\t$str[urlencode($key)] = url_encode($value);\n\t\t\t}\n\t\t} else {\n\t\t\t$str = urlencode($str);\n\t\t}\n\t\t\n\t\treturn $str;\n\t}\n\t\n\tfunction get_curl($url)\n\t{\n\t\tif (!extension_loaded('curl')) {\n            throw new Exception('cURL library is not loaded');\n        }\n\t\t$curl = curl_init();       \n\t\tcurl_setopt($curl, CURLOPT_URL, $url);       \n\t\tcurl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n\t\tcurl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);\n\t\tcurl_setopt($curl, CURLOPT_TIMEOUT, 30); \n\t\tcurl_setopt($curl, CURLOPT_RETURNTRANSFER, true); \n\t\t\n\t\treturn $curl;\n\t}\n\tfunction https_get($url)\n\t{       \n\t\ttry{\n\t\t\t$curl = get_curl($url);\n\t\t}catch(Exception $e){\n\t\t\tdie($e->getMessage());\n\t\t}\n\t\t$data = curl_exec($curl);       \n\t\tif (curl_errno($curl)) {\n\t\t\t$data = encode2json(array('error' => curl_error($curl)));\n\t\t}       \n\t\tcurl_close($curl);       \n\t\treturn $data;\n\t}\n\tfunction https_post($url, $data) {\n\t\ttry{\n\t\t\t$curl = get_curl($url);\n\t\t}catch(Exception $e){\n\t\t\tdie($e->getMessage());\n\t\t}\n\t\t$data_string = encode2json($data);\n\t\tcurl_setopt($curl, CURLOPT_POST, 1);\n\t\tcurl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);\n\t\tcurl_setopt($curl, CURLOPT_HTTPHEADER, array(\n\t\t\t'Content-Type: application/json; charset=utf-8',\n\t\t\t'Content-Length: ' . strlen($data_string))\n\t\t);\n\t\t$data = curl_exec($curl);       \n\t\tif (curl_errno($curl)) {\n\t\t\t$data = encode2json(array('error' => curl_error($curl)));\n\t\t}       \n\t\tcurl_close($curl);       \n\t\treturn $data;\n\t}\n\t\n\t//参考文档：http://mp.weixin.qq.com/wiki/14/9f9c82c1af308e3b14ba9b973f99a8ba.html\n\tfunction get_wechat_token()\n\t{\n\t\t$appid = \"xxxxxxxxxxxxxxxxxx\";\n\t\t$appsecret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n\t\t\n\t\t$url = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=$appid&secret=$appsecret\";\n\t\t\n\t\t$result = json_decode(https_get($url));\n\t\tif(property_exists($result,'error')){\n\t\t\tdie($result->error);\n\t\t}\n\t\t\n\t\tif(!property_exists($result,'access_token')){\n\t\t\tdie('Get wechat token failed!');\n\t\t}\n\t\t\n\t\tprint_r($result);\n\t\techo \"<br />\";\n\t\treturn $result->access_token;\n\t}\n\t\n\t//参考文档：http://mp.weixin.qq.com/wiki/12/54773ff6da7b8bdc95b7d2667d84b1d4.html\n\tfunction get_brocast_user($token)\n\t{\n\t\t$url = \"https://api.weixin.qq.com/cgi-bin/user/get?access_token=$token&next_openid=\";\n\t\t$result = json_decode(https_get($url));\n\t\tif(property_exists($result,'error')){\n\t\t\tdie($result->error);\n\t\t}\n\t\tif(!property_exists($result,'data')){\n\t\t\tdie('Get wechat user failed!');\n\t\t}\n\t\t\t \n\t\treturn $result->data->openid;\t\t// 获得所有用户的Openid\n\t}\n\t\n\t//参考文档：\n\t//\t\t1、接口文档：http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html\n\t//\t\t2、news类型的消息（即：'msgtype'=>'news'）参考文档：\t\n\t//\t\t\t\thttp://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html\n\tfunction send_news($access_token,$arr)\n\t{\n\t\t$url  = \"https://api.weixin.qq.com/cgi-bin/message/mass/send?access_token=$access_token\";\n\t\t$data = array(\n\t\t\t\t\t'touser'=>$arr,\n\t\t\t\t\t'msgtype'=>'news',\n\t\t\t\t\t'news'=>array(\n\t\t\t\t\t\t'articles'=>array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'title'=>'单击微信文章进入原文的方法',\n\t\t\t\t\t\t\t\t'description'=>'微信公众号文章无需单击阅读原文直接进入到原文的方法',\n\t\t\t\t\t\t\t\t'url'=>'http://t.cn/RGQwXwp',\n\t\t\t\t\t\t\t\t'picurl'=>'http://t.cn/RGQwaVW'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t); \n\n\t\t$return_content = https_post($url, $data);\n\t\tprint_r($return_content);\n\t\techo \"<br />\";\n\t}\n\t\n\t$access_token = get_wechat_token();\n\t$users = get_brocast_user($access_token);\n\tsend_news($access_token,$users);\n?>\n\n```\n\n代码中的$appid = \"xxxxxxxxxxxxxxxxxx\";$appsecret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";可以从微信公众平台的后台的“开发”菜单下的“基本配置”中得到，如图：\n\n{% asset_img 图六.png 图六 %}  \n\n","slug":"单击微信文章进入原文的方法","published":1,"updated":"2016-03-24T11:20:36.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip1c2oyj000d90op0l7e4vh7"},{"title":"别样的整数表示和运算","date":"2016-06-04T15:47:02.000Z","_content":"\n\n最近进入懒癌晚期，拖延症重症期，总惦记着让自己写点东西，然而回头一看，已经将近两个月没写东西，看书也开始打瞌睡，彻底进入老年人模式。细思极恐，鼓起勇气，把最近吹着电扇，抠着脚丫看的些东西记录一下。这文涉及的知识非常简单，主要是涉及小学整数加减运算。\n\n本文主要是温习一下计算机基础知识，计算机的信息表示和处理基础二进制整数的表示和运算。不过，我不打算照着书本介绍一下二进制，今天我们使用我们熟知的十进制（也就是我们平时使用的数）来介绍其中的原理。这样做的好处有很多：1、对于不熟悉二进制的或者说不熟悉进制的读者也可以理解一二，而不用多费口舌去介绍进制的概念；2、使用十进制，可以让自己对书本上的原理有更好的理解；3、使用十进制，可以让自己增进对知识的迁移能力，已达到触类旁通等等。\n\n### 1、小学一年级加法（十以内加法）\n\n请注意了，各位童鞋，请用掰手指的方法告诉下面这道题加法题的答案\n\n**题目1：3+5=？**\n\n\n有八根手指对吧。再来\n\n**题目2：6+7=？**\n\n\n多少？13？你确定你是13吗？请问你真的有13根手指吗？反正我是只看到了3根手指，我的答案是3。这不禁让人感叹人生苦短，在有限的时间范围之内，你想得到的越多，反而拥有的会越少。一不小心又变成了鸡汤小短文，寓言小故事。\n<!--more-->\n### 小学二年级加减法（一百以内加减法）\n\n一年级的太简单了，我们快速进入二年级，请听题：\n\n\n**题目3：28+57=？**\n\n\n答案是……，我还没算出来，容我开个挂，用计算机算一下，答案是85，各位小盘友，使用一百根火柴棒就能算出来哦(*^__^*)。接着看题：\n\n**题目4：68+57=？**\n\n请注意了，你只有一百根火柴棒，这次你应该能给出正确答案，答案是：25。到目前为止，你已经学会了加法了，下面来学习减法：\n\n**题目5：68-43=？**\n\n不啰嗦了，直接给答案：25。来一道有难度的减法：\n\n**题目6：28-57=？**\n\n以我小学二年级的智商，表示不知道答案。那让我们进入到高年级阶段。\n\n### 高年级阶段（部分涉及超越了小学知识）\n\n所谓高年级就是知道了负数这么一个概念，所以题目6的答案就是-29。既然进入了高年级，那我们来做另外一件有意思的事，把减法变成加法，省的记两种运算规则。我没来仔细看一下题目4和题目5，\n**题目4：68+57=？**\n**题目5：68-43=？**\n\n这两道题根据**有限范围内**的加减法得出的结果是一样的，都是25，那我们是不是可以将题目5的减法变成题目4的加法呢？进一步，在**有限范围内**的加减法，是不是所有的减法都可以转变成加法，使用加法规则做减法运算呢？答案是肯定的，下面我们就来实现这一猜想。\n\n我们都知道，一个数减去一个数等于一个数加上一个负数，现在的问题是怎么把这个负数表示成一个正数。你有没有发现，题目4和题目5中的第二运算数57和43的关系，这两个数加起来57+43=100，正好是我们所规定的范围（一百以内的加减法），当然，如果按照一百以内不含一百的加法计算，这个结果应该是0。找到这个规律，我们来看是不是真的是这样呢？再来验证一下，73-27=73+73=46（请注意这都是都是100以内的计算）。好像是对的，为什么了？因为100以内的加法，超过100（包括100）的数都要减去100，也就是：73-27=73+(73-100)=73+73-100，此时73+73-100正好是表达100以内的加法运算。好像有什么不对，谁能保证所有的运算都能像73+73-100这样，前两个数的和大于100呢，有没可能小于100呢？那肯定是有可能的，就拿这个例子来说，假设第一个数为x，要x+73<100，也就是x<100-73=27，也就是说x-27是一个负数，同时x+73-100也正好是一个负数，也说明这个两个数是相等的，但它还是用负数表示。综上，当y>0，x-y可以表示成x-y+100，也就是说-y用正数表示是100-y。\n\n### 正规化阶段\n\n经过前面一些简单的介绍，让我们来总结和归纳一下这个**在一定范围内**的加减法运算。\n\n#### 1、让数的表示更正规化\n\n上面提到过正数和负数的表示，以及如何将一个减法变成一个加法，然和将负数变成一个正数进行相加，且等到与加法相等的结果。现在我们将其进行更进一步的整理。\n\n表示一个一百以内的十进制数（不包括100，当然这里所说的数是指|x|<100的数），我们只需要两个数字进行组合即可得到，考虑到有正与负数，我们多加一位表示正负，这一位可以是+、-，比如+20、-60等。我也说过了，我现在是懒癌晚期，我只想学习正数加法，我天真的把所有数都变成正数，而且只是数，连正负号都是用数字，还能表示这个数是正数还是负数，所以绝对值在100以内的数，只需要三位数表示，而且我们只用三个数表示。明确了目标，那开始吧：\n\n100以内的正数表示：最高位用0和1表示这是一个正数，后两位表示数的大小。比如：+20表示成020。\n绝对值100以内的负数的表示：最高位用8或9表示是负数，一般使用9，后两位表示数的大小，当然了为了能让负数变成正数加法，数的大小部分还是用100-数的大小部分。比如：-60表示成940（9是符号位，40=100-60）。\n\n\n#### 2、让计算方法更正规化\n\n将数的表示正规化后，我们用正规化后的数带入之前的题目中进行计算，注意符号位也当作数值进行运算，且只能保留最低三位数，看看能不能得到正确答案：\n\n**题目3：28+57=028+057=085**\n**题目4：68+57=068+057=125=025     (前面说过，0或1都表示正数，通常我们会把1变成0来表示)**\n**题目5：68-43=068+957=1025（超过了3个位，把最高为丢掉）=025**\n**题目6：28-57=028+943=971**\n**题目7：-66-88=934+912=1846（超过了3位，把最高位丢掉）=846=946(前面说过，8或9都表示负数，通常我们会把8变成9来表示)**\n\n题目3、4、5的结果都是正数，且结果和我们之前得到是一样的，题目6、7的结果是负数，题6值为100-71=29，所以结果是-29，也与我之前的结果一致，题7的值为-54，也是正确值。至此，我们就实现了绝对值在100以内的正负数加减法的正规化，全部简化为加法运算。\n\n至此，可以结束本文了，不过，我们现在不禁要问，为什么我们这样做可以得到与我们以前计算方法一致的结果呢？\n\n嗯，这个超出了小学数学知识的范畴了，我们之所以可以等到相同的结果，因为我们讨论的**在一定范围内**的带符号加法运算和**在一定范围内**的不带符号的加法运算都是一个阿贝尔群，还具有相同的单位元，而且表示的范围是等价的。简单点说，我们现在讨论的整数加法是一个[阿贝尔群](https://zh.wikipedia.org/wiki/阿贝尔群)，满足（下面是个人的通俗说法，准确定义请参考相关专业书籍）：\n1、封闭性：通俗说就是加数与和属于同样的一个取值域，比如绝对值100以内的加法运算，如果大于等于100我们就减去100，得到的和还是在100以内，转换成不带正负号的加法，就是计算[0,999]内的正整数加法，加数与和都是在[0,999]区间；\n2、结合律：就是满足结合律，a+b+c=(a+b)+c=a+(b+c)，a、b、c是任意取值域的值;\n3、单位元：就是满足，a+e=a，e+a=a，a是任意取值域的值，e就是单位元,这里两种情况的单位元都是0；\n4、逆元：对取值域中的任意a，取值域中都存在b，使得a+b=单位元，b称为a的逆元。比如：绝对值100以内的加法运算，x的逆元就是-x，而在[0,999]无符号加法的x的逆元就是1000-x；\n5、交换律：对取值域中的任意a、b，都有a+b=b+a。\n\n这就是原因，估计很多小伙伴根本看不懂，只能说就当热闹看看，不要求一定弄懂。\n\n### 衍生阶段\n\n说了这么久，说好的计算机基础呢？为什么与计算机没半毛钱关系，鉴于此，我就简单说一下，计算机使用的是二进制，加法分为有符号和无符号正数加法。有符号的计算使用了类似上面的方法，正数最高位是0，负数最高位是1，后面的位表示值。\n\n用一个例子说明一下：\n用4位二进制表示一个数，最高位是符号位，还有3位用于表示数值，所以二进制数的取值范围是[-8,7],\n\n**题目8：2-4=0010+1100=1110=-2**\n\n\n最后强调一下，有些小伙伴说，一个数的补码很难求，其实，在二进制中的补码其实就是上面说的逆元，只要你理解了上面逆元的概念，是很好求的，比如十进制中减掉一个数，其实就是加上这个数的逆元。\n举几个例子熟练一下（用4位数表示，最高位是符号位），算法就是：x逆元=10……0-x（10……0总共有最后表示数的位数个0，这里也就是4）：\n-1=1的逆元=10000-1=9999\n1=-1的逆元=10000-(-1)=10000+1=0001\n-48=48的逆元=10000-48=9952\n\n下面是一个二进制的例子：\n-4=0100的逆元=10000-0100=1100\n\n下面是一些计算中的补码（即逆元）的应用：\n20-48=0020+(10000-48)=0020+9952=9972=-28，同样的在二进制中，2-4=0010+(10000-0100)=0010+1100=1110=-2\n\n当然如果你学过计算机相关知识，还有一种求逆元的方法，原码（原数）取反加一即得补码（逆元），其中原码取反得到的数被成为反码。取反就是：指定的位数中的最大数-原码，什么意思，举个例子，用四位数表示下面的数的反码，由于是用四位数表示，所以四位数最大能表示的数是9999：\n48的反码=9999-48=9951\n根据：补码=反码+1得：\n48的补码=48的反码+1=9951+1=9952=-48\n同理，用二进制表示下面的数，四位最大二进制数能表示的最大数是1111：\n4的反码=1111-0100=1011\n4的补码=4的反码+1=1011+1=1100=-4\n\n### 小结\n\n在**有限范围内**的整数计算中，将负数使用补码（也就是逆元）参与运算，就能只使用加法实现有符号整数的加减法运算，这其中使用到的就是群的性质，尤其是逆元公式：x+y=e。在有符号整数计算中x+(-x)=0，而无符号整数计算有：x+(x的逆元)=0，所以我们将无符号整数中的逆元等效于有符号整数中的负数，以此达到只使用加法实现加减法运算的目的。本文还有一点没写清楚，那就是进制转换，后面几个例子中涉及十进制转二进制，留以后再写。","source":"_posts/别样的整数表示和运算.md","raw":"title: 别样的整数表示和运算\ntags:\n  - 计算机基础\n  - 数学\ncategories:\n  - 计算机基础\ndate: 2016-06-04 23:47:02\n---\n\n\n最近进入懒癌晚期，拖延症重症期，总惦记着让自己写点东西，然而回头一看，已经将近两个月没写东西，看书也开始打瞌睡，彻底进入老年人模式。细思极恐，鼓起勇气，把最近吹着电扇，抠着脚丫看的些东西记录一下。这文涉及的知识非常简单，主要是涉及小学整数加减运算。\n\n本文主要是温习一下计算机基础知识，计算机的信息表示和处理基础二进制整数的表示和运算。不过，我不打算照着书本介绍一下二进制，今天我们使用我们熟知的十进制（也就是我们平时使用的数）来介绍其中的原理。这样做的好处有很多：1、对于不熟悉二进制的或者说不熟悉进制的读者也可以理解一二，而不用多费口舌去介绍进制的概念；2、使用十进制，可以让自己对书本上的原理有更好的理解；3、使用十进制，可以让自己增进对知识的迁移能力，已达到触类旁通等等。\n\n### 1、小学一年级加法（十以内加法）\n\n请注意了，各位童鞋，请用掰手指的方法告诉下面这道题加法题的答案\n\n**题目1：3+5=？**\n\n\n有八根手指对吧。再来\n\n**题目2：6+7=？**\n\n\n多少？13？你确定你是13吗？请问你真的有13根手指吗？反正我是只看到了3根手指，我的答案是3。这不禁让人感叹人生苦短，在有限的时间范围之内，你想得到的越多，反而拥有的会越少。一不小心又变成了鸡汤小短文，寓言小故事。\n<!--more-->\n### 小学二年级加减法（一百以内加减法）\n\n一年级的太简单了，我们快速进入二年级，请听题：\n\n\n**题目3：28+57=？**\n\n\n答案是……，我还没算出来，容我开个挂，用计算机算一下，答案是85，各位小盘友，使用一百根火柴棒就能算出来哦(*^__^*)。接着看题：\n\n**题目4：68+57=？**\n\n请注意了，你只有一百根火柴棒，这次你应该能给出正确答案，答案是：25。到目前为止，你已经学会了加法了，下面来学习减法：\n\n**题目5：68-43=？**\n\n不啰嗦了，直接给答案：25。来一道有难度的减法：\n\n**题目6：28-57=？**\n\n以我小学二年级的智商，表示不知道答案。那让我们进入到高年级阶段。\n\n### 高年级阶段（部分涉及超越了小学知识）\n\n所谓高年级就是知道了负数这么一个概念，所以题目6的答案就是-29。既然进入了高年级，那我们来做另外一件有意思的事，把减法变成加法，省的记两种运算规则。我没来仔细看一下题目4和题目5，\n**题目4：68+57=？**\n**题目5：68-43=？**\n\n这两道题根据**有限范围内**的加减法得出的结果是一样的，都是25，那我们是不是可以将题目5的减法变成题目4的加法呢？进一步，在**有限范围内**的加减法，是不是所有的减法都可以转变成加法，使用加法规则做减法运算呢？答案是肯定的，下面我们就来实现这一猜想。\n\n我们都知道，一个数减去一个数等于一个数加上一个负数，现在的问题是怎么把这个负数表示成一个正数。你有没有发现，题目4和题目5中的第二运算数57和43的关系，这两个数加起来57+43=100，正好是我们所规定的范围（一百以内的加减法），当然，如果按照一百以内不含一百的加法计算，这个结果应该是0。找到这个规律，我们来看是不是真的是这样呢？再来验证一下，73-27=73+73=46（请注意这都是都是100以内的计算）。好像是对的，为什么了？因为100以内的加法，超过100（包括100）的数都要减去100，也就是：73-27=73+(73-100)=73+73-100，此时73+73-100正好是表达100以内的加法运算。好像有什么不对，谁能保证所有的运算都能像73+73-100这样，前两个数的和大于100呢，有没可能小于100呢？那肯定是有可能的，就拿这个例子来说，假设第一个数为x，要x+73<100，也就是x<100-73=27，也就是说x-27是一个负数，同时x+73-100也正好是一个负数，也说明这个两个数是相等的，但它还是用负数表示。综上，当y>0，x-y可以表示成x-y+100，也就是说-y用正数表示是100-y。\n\n### 正规化阶段\n\n经过前面一些简单的介绍，让我们来总结和归纳一下这个**在一定范围内**的加减法运算。\n\n#### 1、让数的表示更正规化\n\n上面提到过正数和负数的表示，以及如何将一个减法变成一个加法，然和将负数变成一个正数进行相加，且等到与加法相等的结果。现在我们将其进行更进一步的整理。\n\n表示一个一百以内的十进制数（不包括100，当然这里所说的数是指|x|<100的数），我们只需要两个数字进行组合即可得到，考虑到有正与负数，我们多加一位表示正负，这一位可以是+、-，比如+20、-60等。我也说过了，我现在是懒癌晚期，我只想学习正数加法，我天真的把所有数都变成正数，而且只是数，连正负号都是用数字，还能表示这个数是正数还是负数，所以绝对值在100以内的数，只需要三位数表示，而且我们只用三个数表示。明确了目标，那开始吧：\n\n100以内的正数表示：最高位用0和1表示这是一个正数，后两位表示数的大小。比如：+20表示成020。\n绝对值100以内的负数的表示：最高位用8或9表示是负数，一般使用9，后两位表示数的大小，当然了为了能让负数变成正数加法，数的大小部分还是用100-数的大小部分。比如：-60表示成940（9是符号位，40=100-60）。\n\n\n#### 2、让计算方法更正规化\n\n将数的表示正规化后，我们用正规化后的数带入之前的题目中进行计算，注意符号位也当作数值进行运算，且只能保留最低三位数，看看能不能得到正确答案：\n\n**题目3：28+57=028+057=085**\n**题目4：68+57=068+057=125=025     (前面说过，0或1都表示正数，通常我们会把1变成0来表示)**\n**题目5：68-43=068+957=1025（超过了3个位，把最高为丢掉）=025**\n**题目6：28-57=028+943=971**\n**题目7：-66-88=934+912=1846（超过了3位，把最高位丢掉）=846=946(前面说过，8或9都表示负数，通常我们会把8变成9来表示)**\n\n题目3、4、5的结果都是正数，且结果和我们之前得到是一样的，题目6、7的结果是负数，题6值为100-71=29，所以结果是-29，也与我之前的结果一致，题7的值为-54，也是正确值。至此，我们就实现了绝对值在100以内的正负数加减法的正规化，全部简化为加法运算。\n\n至此，可以结束本文了，不过，我们现在不禁要问，为什么我们这样做可以得到与我们以前计算方法一致的结果呢？\n\n嗯，这个超出了小学数学知识的范畴了，我们之所以可以等到相同的结果，因为我们讨论的**在一定范围内**的带符号加法运算和**在一定范围内**的不带符号的加法运算都是一个阿贝尔群，还具有相同的单位元，而且表示的范围是等价的。简单点说，我们现在讨论的整数加法是一个[阿贝尔群](https://zh.wikipedia.org/wiki/阿贝尔群)，满足（下面是个人的通俗说法，准确定义请参考相关专业书籍）：\n1、封闭性：通俗说就是加数与和属于同样的一个取值域，比如绝对值100以内的加法运算，如果大于等于100我们就减去100，得到的和还是在100以内，转换成不带正负号的加法，就是计算[0,999]内的正整数加法，加数与和都是在[0,999]区间；\n2、结合律：就是满足结合律，a+b+c=(a+b)+c=a+(b+c)，a、b、c是任意取值域的值;\n3、单位元：就是满足，a+e=a，e+a=a，a是任意取值域的值，e就是单位元,这里两种情况的单位元都是0；\n4、逆元：对取值域中的任意a，取值域中都存在b，使得a+b=单位元，b称为a的逆元。比如：绝对值100以内的加法运算，x的逆元就是-x，而在[0,999]无符号加法的x的逆元就是1000-x；\n5、交换律：对取值域中的任意a、b，都有a+b=b+a。\n\n这就是原因，估计很多小伙伴根本看不懂，只能说就当热闹看看，不要求一定弄懂。\n\n### 衍生阶段\n\n说了这么久，说好的计算机基础呢？为什么与计算机没半毛钱关系，鉴于此，我就简单说一下，计算机使用的是二进制，加法分为有符号和无符号正数加法。有符号的计算使用了类似上面的方法，正数最高位是0，负数最高位是1，后面的位表示值。\n\n用一个例子说明一下：\n用4位二进制表示一个数，最高位是符号位，还有3位用于表示数值，所以二进制数的取值范围是[-8,7],\n\n**题目8：2-4=0010+1100=1110=-2**\n\n\n最后强调一下，有些小伙伴说，一个数的补码很难求，其实，在二进制中的补码其实就是上面说的逆元，只要你理解了上面逆元的概念，是很好求的，比如十进制中减掉一个数，其实就是加上这个数的逆元。\n举几个例子熟练一下（用4位数表示，最高位是符号位），算法就是：x逆元=10……0-x（10……0总共有最后表示数的位数个0，这里也就是4）：\n-1=1的逆元=10000-1=9999\n1=-1的逆元=10000-(-1)=10000+1=0001\n-48=48的逆元=10000-48=9952\n\n下面是一个二进制的例子：\n-4=0100的逆元=10000-0100=1100\n\n下面是一些计算中的补码（即逆元）的应用：\n20-48=0020+(10000-48)=0020+9952=9972=-28，同样的在二进制中，2-4=0010+(10000-0100)=0010+1100=1110=-2\n\n当然如果你学过计算机相关知识，还有一种求逆元的方法，原码（原数）取反加一即得补码（逆元），其中原码取反得到的数被成为反码。取反就是：指定的位数中的最大数-原码，什么意思，举个例子，用四位数表示下面的数的反码，由于是用四位数表示，所以四位数最大能表示的数是9999：\n48的反码=9999-48=9951\n根据：补码=反码+1得：\n48的补码=48的反码+1=9951+1=9952=-48\n同理，用二进制表示下面的数，四位最大二进制数能表示的最大数是1111：\n4的反码=1111-0100=1011\n4的补码=4的反码+1=1011+1=1100=-4\n\n### 小结\n\n在**有限范围内**的整数计算中，将负数使用补码（也就是逆元）参与运算，就能只使用加法实现有符号整数的加减法运算，这其中使用到的就是群的性质，尤其是逆元公式：x+y=e。在有符号整数计算中x+(-x)=0，而无符号整数计算有：x+(x的逆元)=0，所以我们将无符号整数中的逆元等效于有符号整数中的负数，以此达到只使用加法实现加减法运算的目的。本文还有一点没写清楚，那就是进制转换，后面几个例子中涉及十进制转二进制，留以后再写。","slug":"别样的整数表示和运算","published":1,"updated":"2016-06-04T15:52:36.657Z","_id":"cip1c2ozj000i90optu0dtfiv","comments":1,"layout":"post","photos":[],"link":""},{"title":"初识Netfilter/iptables","date":"2016-03-25T12:49:54.000Z","_content":"\n\n### 一、什么是Netfilter/iptables？\n\n{% blockquote 维基百科 https://zh.wikipedia.org/wiki/Iptables%}\n\niptables是一个运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的流动与转送。在大部分的Linux系统上面，iptables是使用/usr/sbin/iptables来操作，文件则放置在手册页底下，可以通过 man iptables 指令获取。通常iptables都需要内核层级的模块来配合运作，Xtables是主要在内核层级里面iptables API运作功能的模块。因相关动作上的需要，iptables的操作需要用到超级用户的权限。\n\n目前iptables系在2.4、2.6及3.0的内核底下运作，旧版的Linux内核（2.2）使用ipchains及ipwadm（Linux 2.0）来达成类似的功能，2014年1月19日起发行的新版Linux内核（3.13后）则使用nftables取而代之。\n\n{% endblockquote %}\n<!-- more -->\n以上就是中文维基百科上给出的定义，看完后，仍然不知所云，iptables的功能具体是什么？它与NetFilter是什么关系？\n\niptables是用来管理网络数据包的流动和转送的，也就是控制数据包的流向。我们都知道网络数据包在流经一台电脑时，数据包一般只有两种流向，一是目的地址是本机的：网卡驱动接收数据包->路由程序处理->本地协议栈处理->网卡驱动发送数据包；另一种流向是目的地址不是本机：网卡驱动接收数据包->路由程序处理数据包->将数据包转送到另一网卡->网卡驱动发送数据包。为了能灵活的管理数据包，Linux内核使用Netfilter模块在这些主要流向的路径的关键位置添加了一些钩子。如下图：\n\n{% asset_img Netfilter-packet-flow.png Netfilter-packet-flow %}\n\n上图过于复杂，为了便于理解，使用下面简化版的流程：\n\n{% asset_img iptables数据包流程.png iptables数据包流程 %}\n\n从上图可知，Netfilter在几个固定的位置设置了5个钩子：\n\n1. NF_INET_PRE_ROUTING:在网卡接收到数据包后，进入路由选择之前；\n2. NF_INET_LOCAL_IN:在路由判断目的地址是本机之后，交给本地协议栈处理之前；\n3. NF_INET_FORWARD:在路由判断目的地址不是本机之后，交给另一个网卡发送之前；\n4. NF_INET_LOCAL_OUT:在本地协议栈和应用程序处理之后，交给网卡发送之前；\n5. NF_INET_POST_ROUTING:在交给网卡发送之前，这是数据流中的最后一个钩子。\n\n既然有钩子，就可以定义与之对应的处理函数，这些函数也已经在Netfilter中定义好，并且与钩子绑定了。感觉所有的活，Netfilter都已经做好了，还有iptables什么事呢？\n\n其实不然，先来看看Netfilter的四个基本模块：\n1. conntrack模块：连接追踪模块\n2. Filter模块：过滤模块\n3. Nat模块：地址转换模块\n4. Mangle模块：数据包修改模块\n其中conntrack模块是基础核心模块，而其他几个模块是在此模块的基础上，维护一张全局表，以实现各模块相应的功能。为了灵活的管理数据包，iptables就可以调用Netfilter提供的接口想这些全局表中添加相应的控制条件和处理。以此，Netfilter其实就是提供一组系统调用以实现管理网络数据包流动和转送的框架。\n\n而iptables则是提供命令处理的用户空间应用程序，同时提供了一些扩展模块以加载到内核对数据包进行处理。Netfilter和iptables的关系如图：\n\n{% asset_img Netfilter与iptabales关系.png Netfilter与iptabales关系 %}\n\n为了方便处理用户命令的一组有序控制策略，iptables使用table、chain、rule来表示一条策略。其中table与Netfilter中的各模块中维护的全局表进行对应，chain与挂载点（即钩子）相对应，rule处理规则。iptables策略组成如图：\n\n{% asset_img iptables策略组成.png iptables策略组成 %}\n\n### 二、 iptables命令格式\n\niptables命令语法：\n``` bash\niptables [-t 表名] 命令 [条件匹配] [目标]\n```\n下面是更加详细的命令格式：\n``` bash\niptables [ -t 表名] 命令选项 [链名] [条件匹配] [-j 目标动作或跳转] \n```\n\n#### 1.表名\n有四张表：filter(默认值)、NAT、mangle、raw。\n\n#### 2.命令选项\n|选项名\t\t\t|功能说明|\n|:-------------:|-------|\n|-A\t\t\t\t|在指定链的末尾添加（--append）一条新的规则|\n|-D\t\t\t\t|删除（--delete）指定链中的某一条规则，按规则序号或内容确定要删除的规则|\n|-I\t\t\t\t|在指定链中插入（--insert）一条新的规则，默认在链的开头插入|\n|-R\t\t\t\t|修改、替换（--replace）指定链中的一条规则，按规则序号或内容确定|\n|-L\t\t\t\t|列出（--list）指定链中的所有的规则进行查看，默认列出表中所有链的内容|\n|-F\t\t\t\t|清空（--flush）指定链中的所有规则，默认清空表中所有链的内容|\n|-N\t\t\t\t|新建（--new-chain）一条用户自己定义的规则链|\n|-X\t\t\t\t|删除指定表中用户自定义的规则链（--delete-chain）|\n|-P\t\t\t\t|设置指定链的默认策略（--policy）|\n|-n\t\t\t\t|用数字形式（--numeric）显示输出结果，若显示主机的 IP地址而不是主机名|\n|-P\t\t\t\t|设置指定链的默认策略（--policy）|\n|-v\t\t\t\t|查看规则列表时显示详细（--verbose）的信息|\n|-V\t\t\t\t|查看iptables命令工具的版本（--Version）信息|\n|-h\t\t\t\t|查看命令帮助信息（--help）|\n|--line-number\t|查看规则列表时，同时显示规则在链中的顺序号|\n\n#### 3.链名\n通过之前分析，主要有一下五条链：\n1. PREROUTING：与NF_INET_PRE_ROUTING钩子相对应，此链的处理时机也与NF_INET_PRE_ROUTING的时机相对应。\n2. INPUT：与NF_INET_LOCAL_IN钩子相对应，此链的处理时机也与NF_INET_LOCAL_IN的时机相对应。\n3. FORWARD：与NF_INET_LOCAL_OUT钩子相对应，此链的处理时机也与NF_INET_LOCAL_OUT的时机相对应。\n4. OUTPUT：与NF_INET_LOCAL_OUT钩子相对应，此链的处理时机也与NF_INET_LOCAL_OUT的时机相对应。\n5. POSTROUTING：与NF_INET_POST_ROUTING钩子相对应，此链的处理时机也与NF_INET_POST_ROUTING的时机相对应。\n\n#### 4.匹配条件\n\n##### 1）通用匹配\n|匹配参数\t|参数说明|\n|:---------:|-------|\n|-p\t\t\t|指定规则协议，如tcp, udp,icmp等，可以使用all来指定所有协议|\n|-s\t\t\t|指定数据包的源地址参数，可以使IP地址、网络地址、主机名|\n|-d\t\t\t|指定目的地址|\n|-i\t\t\t|输入接口|\n|-o\t\t\t|输出接口|\n\n##### 2）隐含匹配\n\n{% asset_img 隐含匹配.jpg 隐含匹配 %}\n\n##### 3）显式匹配\n\n{% asset_img 显式匹配.jpg 显式匹配 %}\n\n#### 5.目标动作或跳转\n|目标项           |功能说明|\n|:--------------:|-------|\n|ACCEPT\t|当信息包与具有ACCEPT目标的规则完全匹配时，会被接受（允许它前往目的地）|\n|DROP\t|当信息包与具有DROP目标的规则完全匹配时，会阻塞该信息包，并且不对它做进一步处理。该目标被指定为-j DROP|\n|REJECT\t|该目标的工作方式与DROP目标相同，但它比DROP好。和DROP不同，REJECT不会在服务器和客户机上留下死套接字。另外，REJECT将错误消息发回给信息包的发送方。该目标被指定为-j REJECT|\n|RETURN\t|在规则中设置的RETURN目标让与该规则匹配的信息包停止遍历包含该规则的链。如果链是如INPUT之类的主链，则使用该链的默认策略处理信息包。它被指定为-jump RETURN|\n|LOG\t|表示将包的有关信息记录入日志|\n|TOS\t|表示改写数据包的TOS值|\n\n### 三、  iptables应用\n\n1. 删除iptables现有规则\n``` bash\niptables –F\n```\n2. 查看iptables规则\n``` bash\niptables –L (iptables –L –v -n)\n```\n3. 增加一条规则到最后\n``` bash\niptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\n```\n4. 添加一条规则到指定位置\n``` bash\niptables -I INPUT 2 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT \n```\n5.  删除一条规则\n``` bash\niptabels -D INPUT 2 \n```\n6. 修改一条规则\n``` bash\niptables -R INPUT 3 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT \n```\n7. 设置默认策略\n``` bash\niptables -P INPUT DROP \n```\n\n### 四、实战——使用iptables的源地址转发功能\n\n上面就是一些简单的介绍，下面模拟内网通过网关访问外网的一个简单例子来看看iptables的应用。\n\n#### 1.准备：\n1. 用虚拟机开启两台机器，分别命名为VM1（Virtual Machine 1）和VM2，VM2当作局域网内的机器，VM2当作网关，真实机器（即本机）LM（Local Machine）当作外网；\n2. 现在分别为VM1配置网络，ip地址是192.186.10.1，掩码是255.255.255.0；VM2配置两网卡，网络配置分别为：网卡1：ip地址是192.168.10.2，掩码是255.255.255.0，网卡2：ip地址是10.126.72.203，掩码是255.255.255.0；LM的网络配置是：ip地址是10.126.72.23，掩码是255.255.255.0。\n3. 在LM上搭建一个web服务器，配置网址www.LM.com。\n\n注意：怎么配置两台虚拟机在同一个局域网内，以及如何配置本机和虚拟机在同一网络中并相互访问呢？\n\n这里备注一下：下面的配置均是以VirtualBox为例。\n\n1. 配置虚拟机局域网\n\n{% asset_img 虚拟机网络配置1.png 虚拟机网络配置1 %}\n\n{% asset_img 虚拟机网络配置2.png 虚拟机网络配置2 %}\n\n2. 配置本机和虚拟机在同一网络中并相互访问\n{% asset_img 虚拟机网络配置3.png 虚拟机网络配置3 %}\n\n准备工作基本完成，如果顺利的话，最后将得到如下网络：\n\n{% asset_img 模拟网络.png 模拟网络 %}\n\n#### 2.实现VM1通过VM2访问LM\n\n由于LM的Web服务(www.lm.com)是本地服务并没有申请域名，还需要手动在VM1和VM2主机的/etc/hosts中添加如下一语句，否则无法对其进行域名解析：\n\n``` bash\n10.126.72.23     www.lm.com\n```\n\n毋庸置疑，开始VM1无法访问LM的Web服务（www.lm.com）。\n\n{% asset_img 访问LM服务1.png 访问LM服务1 %}\n\n下面将实现此访问。\n\n1. 首先开启内核转发的模块\n向/etc/sysctl.conf文件添加或这修改net.ipv4.ip_forward的值为1（即net.ipv4.ip_forward = 1）：\n``` bash\nsudo vim /etc/sysctl.conf\n```\n\n2. 设置VM1的默认网关为VM2，即192.168.10.2，\n\n{% asset_img 设置默认网关.png 设置默认网关 %}\n\n3. 在VM2上安装iptables及服务（此处系统为CentOS 7），并启动\n``` bash\nsudo yum -y install iptables\nsudo yum -y install iptables-services\nsudo systemctl start iptables.service \n```\n\n4. 配置iptables策略\n``` bash\nsudo iptables -F\nsudo iptalbes -t nat -F\nsudo iptables -t nat -A POSTROUTING -s 192.168.10.1/32 -j SNAT --to 10.126.72.203 \n```\n\n这就可以实现VM1访问LM上的服务了。\n\n{% asset_img 访问LM服务2.png 访问LM服务2 %}\n\n\n### 五、小结\n\n以上简单的介绍了iptable的基本概念和基本命令，以及命令的简单使用。这只是冰山一角，iptables还能实现如下功能：\n1. 建立一个基于有状态和无状态的包过滤规则的因特网防火墙。\n2. 部署高度可用的有状态和无状态防火墙集群。\n3. 当公网ip不够用时，可以进行ip伪装，属于NAT模块。\n4. 使用NAT来实现透明代理。\n5. 辅助内核网络模块中的tc和iproute2去构造一个复杂的QoS和路由策略。\n6. 做进一步处理比如比如更改IP包头中的TOS/DSCP/ECN参数。\n\n\n### 参考文章\n[Iptables入门教程](http://drops.wooyun.org/tips/1424)\n[Netfilter---框架的设计](http://blog.chinaunix.net/uid-20786208-id-3429074.html)\n[iptables防火墙原理详解](http://seanlook.com/2014/02/23/iptables-understand/)\n[iptables深入解析](http://blog.jobbole.com/?s=iptables%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90)\n[Linux内核工程导论——网络：Netfilter概览](http://blog.csdn.net/ljy1988123/article/details/50458044?utm_source=tuicool&utm_medium=referral)\n[Netfilter/iptables框架总结](http://vinllen.com/netfilteriptableskuang-jia-zong-jie/)\n","source":"_posts/初识Netfilter-iptables.md","raw":"title: 初识Netfilter/iptables\ntags:\n  - iptables\n  - Netfilter\n  - 防火墙\n  - 网络\ncategories:\n  - Linux防火墙\ndate: 2016-03-25 20:49:54\n---\n\n\n### 一、什么是Netfilter/iptables？\n\n{% blockquote 维基百科 https://zh.wikipedia.org/wiki/Iptables%}\n\niptables是一个运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的流动与转送。在大部分的Linux系统上面，iptables是使用/usr/sbin/iptables来操作，文件则放置在手册页底下，可以通过 man iptables 指令获取。通常iptables都需要内核层级的模块来配合运作，Xtables是主要在内核层级里面iptables API运作功能的模块。因相关动作上的需要，iptables的操作需要用到超级用户的权限。\n\n目前iptables系在2.4、2.6及3.0的内核底下运作，旧版的Linux内核（2.2）使用ipchains及ipwadm（Linux 2.0）来达成类似的功能，2014年1月19日起发行的新版Linux内核（3.13后）则使用nftables取而代之。\n\n{% endblockquote %}\n<!-- more -->\n以上就是中文维基百科上给出的定义，看完后，仍然不知所云，iptables的功能具体是什么？它与NetFilter是什么关系？\n\niptables是用来管理网络数据包的流动和转送的，也就是控制数据包的流向。我们都知道网络数据包在流经一台电脑时，数据包一般只有两种流向，一是目的地址是本机的：网卡驱动接收数据包->路由程序处理->本地协议栈处理->网卡驱动发送数据包；另一种流向是目的地址不是本机：网卡驱动接收数据包->路由程序处理数据包->将数据包转送到另一网卡->网卡驱动发送数据包。为了能灵活的管理数据包，Linux内核使用Netfilter模块在这些主要流向的路径的关键位置添加了一些钩子。如下图：\n\n{% asset_img Netfilter-packet-flow.png Netfilter-packet-flow %}\n\n上图过于复杂，为了便于理解，使用下面简化版的流程：\n\n{% asset_img iptables数据包流程.png iptables数据包流程 %}\n\n从上图可知，Netfilter在几个固定的位置设置了5个钩子：\n\n1. NF_INET_PRE_ROUTING:在网卡接收到数据包后，进入路由选择之前；\n2. NF_INET_LOCAL_IN:在路由判断目的地址是本机之后，交给本地协议栈处理之前；\n3. NF_INET_FORWARD:在路由判断目的地址不是本机之后，交给另一个网卡发送之前；\n4. NF_INET_LOCAL_OUT:在本地协议栈和应用程序处理之后，交给网卡发送之前；\n5. NF_INET_POST_ROUTING:在交给网卡发送之前，这是数据流中的最后一个钩子。\n\n既然有钩子，就可以定义与之对应的处理函数，这些函数也已经在Netfilter中定义好，并且与钩子绑定了。感觉所有的活，Netfilter都已经做好了，还有iptables什么事呢？\n\n其实不然，先来看看Netfilter的四个基本模块：\n1. conntrack模块：连接追踪模块\n2. Filter模块：过滤模块\n3. Nat模块：地址转换模块\n4. Mangle模块：数据包修改模块\n其中conntrack模块是基础核心模块，而其他几个模块是在此模块的基础上，维护一张全局表，以实现各模块相应的功能。为了灵活的管理数据包，iptables就可以调用Netfilter提供的接口想这些全局表中添加相应的控制条件和处理。以此，Netfilter其实就是提供一组系统调用以实现管理网络数据包流动和转送的框架。\n\n而iptables则是提供命令处理的用户空间应用程序，同时提供了一些扩展模块以加载到内核对数据包进行处理。Netfilter和iptables的关系如图：\n\n{% asset_img Netfilter与iptabales关系.png Netfilter与iptabales关系 %}\n\n为了方便处理用户命令的一组有序控制策略，iptables使用table、chain、rule来表示一条策略。其中table与Netfilter中的各模块中维护的全局表进行对应，chain与挂载点（即钩子）相对应，rule处理规则。iptables策略组成如图：\n\n{% asset_img iptables策略组成.png iptables策略组成 %}\n\n### 二、 iptables命令格式\n\niptables命令语法：\n``` bash\niptables [-t 表名] 命令 [条件匹配] [目标]\n```\n下面是更加详细的命令格式：\n``` bash\niptables [ -t 表名] 命令选项 [链名] [条件匹配] [-j 目标动作或跳转] \n```\n\n#### 1.表名\n有四张表：filter(默认值)、NAT、mangle、raw。\n\n#### 2.命令选项\n|选项名\t\t\t|功能说明|\n|:-------------:|-------|\n|-A\t\t\t\t|在指定链的末尾添加（--append）一条新的规则|\n|-D\t\t\t\t|删除（--delete）指定链中的某一条规则，按规则序号或内容确定要删除的规则|\n|-I\t\t\t\t|在指定链中插入（--insert）一条新的规则，默认在链的开头插入|\n|-R\t\t\t\t|修改、替换（--replace）指定链中的一条规则，按规则序号或内容确定|\n|-L\t\t\t\t|列出（--list）指定链中的所有的规则进行查看，默认列出表中所有链的内容|\n|-F\t\t\t\t|清空（--flush）指定链中的所有规则，默认清空表中所有链的内容|\n|-N\t\t\t\t|新建（--new-chain）一条用户自己定义的规则链|\n|-X\t\t\t\t|删除指定表中用户自定义的规则链（--delete-chain）|\n|-P\t\t\t\t|设置指定链的默认策略（--policy）|\n|-n\t\t\t\t|用数字形式（--numeric）显示输出结果，若显示主机的 IP地址而不是主机名|\n|-P\t\t\t\t|设置指定链的默认策略（--policy）|\n|-v\t\t\t\t|查看规则列表时显示详细（--verbose）的信息|\n|-V\t\t\t\t|查看iptables命令工具的版本（--Version）信息|\n|-h\t\t\t\t|查看命令帮助信息（--help）|\n|--line-number\t|查看规则列表时，同时显示规则在链中的顺序号|\n\n#### 3.链名\n通过之前分析，主要有一下五条链：\n1. PREROUTING：与NF_INET_PRE_ROUTING钩子相对应，此链的处理时机也与NF_INET_PRE_ROUTING的时机相对应。\n2. INPUT：与NF_INET_LOCAL_IN钩子相对应，此链的处理时机也与NF_INET_LOCAL_IN的时机相对应。\n3. FORWARD：与NF_INET_LOCAL_OUT钩子相对应，此链的处理时机也与NF_INET_LOCAL_OUT的时机相对应。\n4. OUTPUT：与NF_INET_LOCAL_OUT钩子相对应，此链的处理时机也与NF_INET_LOCAL_OUT的时机相对应。\n5. POSTROUTING：与NF_INET_POST_ROUTING钩子相对应，此链的处理时机也与NF_INET_POST_ROUTING的时机相对应。\n\n#### 4.匹配条件\n\n##### 1）通用匹配\n|匹配参数\t|参数说明|\n|:---------:|-------|\n|-p\t\t\t|指定规则协议，如tcp, udp,icmp等，可以使用all来指定所有协议|\n|-s\t\t\t|指定数据包的源地址参数，可以使IP地址、网络地址、主机名|\n|-d\t\t\t|指定目的地址|\n|-i\t\t\t|输入接口|\n|-o\t\t\t|输出接口|\n\n##### 2）隐含匹配\n\n{% asset_img 隐含匹配.jpg 隐含匹配 %}\n\n##### 3）显式匹配\n\n{% asset_img 显式匹配.jpg 显式匹配 %}\n\n#### 5.目标动作或跳转\n|目标项           |功能说明|\n|:--------------:|-------|\n|ACCEPT\t|当信息包与具有ACCEPT目标的规则完全匹配时，会被接受（允许它前往目的地）|\n|DROP\t|当信息包与具有DROP目标的规则完全匹配时，会阻塞该信息包，并且不对它做进一步处理。该目标被指定为-j DROP|\n|REJECT\t|该目标的工作方式与DROP目标相同，但它比DROP好。和DROP不同，REJECT不会在服务器和客户机上留下死套接字。另外，REJECT将错误消息发回给信息包的发送方。该目标被指定为-j REJECT|\n|RETURN\t|在规则中设置的RETURN目标让与该规则匹配的信息包停止遍历包含该规则的链。如果链是如INPUT之类的主链，则使用该链的默认策略处理信息包。它被指定为-jump RETURN|\n|LOG\t|表示将包的有关信息记录入日志|\n|TOS\t|表示改写数据包的TOS值|\n\n### 三、  iptables应用\n\n1. 删除iptables现有规则\n``` bash\niptables –F\n```\n2. 查看iptables规则\n``` bash\niptables –L (iptables –L –v -n)\n```\n3. 增加一条规则到最后\n``` bash\niptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\n```\n4. 添加一条规则到指定位置\n``` bash\niptables -I INPUT 2 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT \n```\n5.  删除一条规则\n``` bash\niptabels -D INPUT 2 \n```\n6. 修改一条规则\n``` bash\niptables -R INPUT 3 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT \n```\n7. 设置默认策略\n``` bash\niptables -P INPUT DROP \n```\n\n### 四、实战——使用iptables的源地址转发功能\n\n上面就是一些简单的介绍，下面模拟内网通过网关访问外网的一个简单例子来看看iptables的应用。\n\n#### 1.准备：\n1. 用虚拟机开启两台机器，分别命名为VM1（Virtual Machine 1）和VM2，VM2当作局域网内的机器，VM2当作网关，真实机器（即本机）LM（Local Machine）当作外网；\n2. 现在分别为VM1配置网络，ip地址是192.186.10.1，掩码是255.255.255.0；VM2配置两网卡，网络配置分别为：网卡1：ip地址是192.168.10.2，掩码是255.255.255.0，网卡2：ip地址是10.126.72.203，掩码是255.255.255.0；LM的网络配置是：ip地址是10.126.72.23，掩码是255.255.255.0。\n3. 在LM上搭建一个web服务器，配置网址www.LM.com。\n\n注意：怎么配置两台虚拟机在同一个局域网内，以及如何配置本机和虚拟机在同一网络中并相互访问呢？\n\n这里备注一下：下面的配置均是以VirtualBox为例。\n\n1. 配置虚拟机局域网\n\n{% asset_img 虚拟机网络配置1.png 虚拟机网络配置1 %}\n\n{% asset_img 虚拟机网络配置2.png 虚拟机网络配置2 %}\n\n2. 配置本机和虚拟机在同一网络中并相互访问\n{% asset_img 虚拟机网络配置3.png 虚拟机网络配置3 %}\n\n准备工作基本完成，如果顺利的话，最后将得到如下网络：\n\n{% asset_img 模拟网络.png 模拟网络 %}\n\n#### 2.实现VM1通过VM2访问LM\n\n由于LM的Web服务(www.lm.com)是本地服务并没有申请域名，还需要手动在VM1和VM2主机的/etc/hosts中添加如下一语句，否则无法对其进行域名解析：\n\n``` bash\n10.126.72.23     www.lm.com\n```\n\n毋庸置疑，开始VM1无法访问LM的Web服务（www.lm.com）。\n\n{% asset_img 访问LM服务1.png 访问LM服务1 %}\n\n下面将实现此访问。\n\n1. 首先开启内核转发的模块\n向/etc/sysctl.conf文件添加或这修改net.ipv4.ip_forward的值为1（即net.ipv4.ip_forward = 1）：\n``` bash\nsudo vim /etc/sysctl.conf\n```\n\n2. 设置VM1的默认网关为VM2，即192.168.10.2，\n\n{% asset_img 设置默认网关.png 设置默认网关 %}\n\n3. 在VM2上安装iptables及服务（此处系统为CentOS 7），并启动\n``` bash\nsudo yum -y install iptables\nsudo yum -y install iptables-services\nsudo systemctl start iptables.service \n```\n\n4. 配置iptables策略\n``` bash\nsudo iptables -F\nsudo iptalbes -t nat -F\nsudo iptables -t nat -A POSTROUTING -s 192.168.10.1/32 -j SNAT --to 10.126.72.203 \n```\n\n这就可以实现VM1访问LM上的服务了。\n\n{% asset_img 访问LM服务2.png 访问LM服务2 %}\n\n\n### 五、小结\n\n以上简单的介绍了iptable的基本概念和基本命令，以及命令的简单使用。这只是冰山一角，iptables还能实现如下功能：\n1. 建立一个基于有状态和无状态的包过滤规则的因特网防火墙。\n2. 部署高度可用的有状态和无状态防火墙集群。\n3. 当公网ip不够用时，可以进行ip伪装，属于NAT模块。\n4. 使用NAT来实现透明代理。\n5. 辅助内核网络模块中的tc和iproute2去构造一个复杂的QoS和路由策略。\n6. 做进一步处理比如比如更改IP包头中的TOS/DSCP/ECN参数。\n\n\n### 参考文章\n[Iptables入门教程](http://drops.wooyun.org/tips/1424)\n[Netfilter---框架的设计](http://blog.chinaunix.net/uid-20786208-id-3429074.html)\n[iptables防火墙原理详解](http://seanlook.com/2014/02/23/iptables-understand/)\n[iptables深入解析](http://blog.jobbole.com/?s=iptables%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90)\n[Linux内核工程导论——网络：Netfilter概览](http://blog.csdn.net/ljy1988123/article/details/50458044?utm_source=tuicool&utm_medium=referral)\n[Netfilter/iptables框架总结](http://vinllen.com/netfilteriptableskuang-jia-zong-jie/)\n","slug":"初识Netfilter-iptables","published":1,"updated":"2016-06-04T02:43:09.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip1c2ozp000p90opygi2trd4"},{"title":"Github个人静态博客的搭建总结","date":"2015-11-21T09:31:06.000Z","_content":"\n在搭建博客中出现了不少问题，在此分享一下个人的博客搭建过程：\n\n\n### 第一步：想不花钱就把事情给办了\n俗话说：想不花钱，就把事情给办了，你的找一个有钱有势的主。同样的，如果你想要有一个独立的博客，又不想自己掏钱和投入经历去维护，那么你的找一个有优势的主，这当然是首推[全球最大的男性同性交友平台 github](http://www.zhihu.com/question/28976652/answer/42771650)(*^__^*) ，至于怎么注册，怎么设置，直接看官网[帮助文档](https://help.github.com/)。\n<!--more-->\n### 第二步：hexo —— 简单、快速、强大的Node.js静态博客框架\nHexo的安装和配置请参考**Heaven**的[《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)，由于Heaven大神一直是在搞前端的，博文里没有提到node.js的安装，这个就是下载，下一步的事，也不详陈了。\n\n---\n\n### 总结遇到的问题\n\n注意：以下操作都是基于windows7！！！\n\n1、在git bash客户端，使用ssh方式进行clone和push时，每次关闭重开git bash客户端总是出现如下错误：\n\n``` bash\n$ git clone git@github.com:xiaorisu/github-roam.git\nCloning into 'github-roam'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n之前一直是手动输入如下两句代码来解决此问题：\n\n``` bash\neval $(ssh-agent -s)\nssh-add ~/.ssh/xxxx\n```\n\n我是一个懒人，每次都要这样手动输入这两行代码，我会很烦躁，于是有了下面的解决方案：\n在当前用户目录底下新建一个.bash_profile文件，不要问我当前用户的目录是哪个目录，一般是打开cmd之后，光标之前的路劲就是当前用户目录。当然，如果你设置过默认打开路径，那就是另一回事了，这时你可以使用如下命令得到：\n\n``` bash\necho %systemdrive%%homepath%\n```\n\n创建好了.bash_profile文件后，在文件中输入如下代码：\n\n``` bash\neval $(ps | grep 'ssh-agent' | awk '{print $1}' | xargs kill -9)\neval $(ssh-agent -s)\nssh-add ~/.ssh/XXXXX\n```\n\n保存文件，此文件会在每次打开git bash时加载并运行其中的命令。解释一下这三条命令的含义：第一句是杀死之前开的所有ssh-agent，由于每次打开都会执行两编这里面的命令，没有去查是什么原因导致的。并且每次关闭了git bash客户端，都不会关闭它打开的ssh-agent程序；第二句是开启ssh-agent服务；第三句是将专用密钥添加到ssh-agent的高速缓存中。\n\n---\n\n2、执行hexo s 命令后，在浏览器中输入localhost:4000半天没有响应，最后无法访问生成的静态页面。\n\n这个问题的原因在于4000端口被FxServer占用了，但是hexo-server没有报错，真是郁闷！！！解决这问题很简单，可以关掉FxServer服务，也可使用hexo s -p 4040即可解决。解决这个问题并不困难，我要说的是怎么找到问题的原因的。\n首先使用netstat命令查看当前电脑的网络连接状况：\n\n``` bash\nC:\\Users\\lenovo>netstat -ano | findstr \"4000\"\n  TCP    0.0.0.0:4000           0.0.0.0:0              LISTENING       21908\n  TCP    127.0.0.1:4000         0.0.0.0:0              LISTENING       17620\n  TCP    127.0.0.1:4000         127.0.0.1:4737         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4738         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4739         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4740         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4741         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4742         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4755         ESTABLISHED     17620\n  TCP    127.0.0.1:4737         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4738         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4739         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4740         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4741         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4742         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4755         127.0.0.1:4000         ESTABLISHED     556\n```\n\n发现4000端口有很多连接，发现有两个进程在监听4000端口，pid分别是21908和17620，从任务管理器中可以看到这两个pid对应的进程分别是node.exe和FxServer服务。这就是查找问题的过程。\n\n---\n\n### 最后说一下改进\n\n最后说一说多仓库部署和源代码自动备份以及自动打开Markdown编辑器。\n\n先上我的_config.yml文件：\n\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 翰海尘沙\nsubtitle: 进击的程序员\ndescription: 技术分享、阅读笔记\nauthor: 翰海尘沙\nlanguage: zh-CN\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yourgithubname.github.io\nroot: /blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: landscape\n#theme: leo\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n# 自动备份\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n\n# 评论\n# 1.友言\n#uyan:\n#  enable: true\n# 2.多说\n#duoshuo_shortname: shortname\n# 3.畅言\nchangyan:\n  enable: true\n\n# RSS订阅\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 10\n\n# 网站地图\nsitemap:\n    path: sitemap.xml\n```\n\n多仓库部署比较简单，只要在_config.yml配置成如下：\n\n```\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n```\n\n使用hexo d命令就可以自动部署到github和gitcafe上去。\n\n多仓自动库备份稍微复杂些，先在配置文件中自定自己的自动备份的配置：\n\n```\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n```\n\n然后在博客源代码的项目根目录下的scripts目录（如果没有就新建一个scripes文件夹）中新建一个任意名字的javascript文件。我新建的是一个AutoBackUp.js，添加如下代码：\n\n``` JavaScript\nrequire('shelljs/global');\n\nvar parseConfig = require('hexo-deployer-git/lib/parse_config');\nvar util = require('hexo/node_modules/hexo-util');\nvar Promise = require('hexo/node_modules/bluebird');\nvar spawn = util.spawn;\n\ntry {\n    hexo.on('deployAfter', function() {\n        run();\n    });\n} catch (e) {\n    console.log(\"备份出现异常，详细信息\" + e.toString());\n}\n\nfunction git() {\n    var len = arguments.length;\n    var args = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n        args[i] = arguments[i];\n    }\n\n    return spawn('git', args, {\n        cwd: hexo.base_dir,\n        verbose: !hexo.config.backup.silent\n    });\n}\n\nfunction push(repo) {\n    return git('add', '-A').then(function() {\n        return git('commit', '-m', \"Form auto backup script\\'s commit\").catch(function() {\n            // Do nothing. It's OK if nothing to commit.\n        });\n    }).then(function() {\n        return git('push', '-u', repo.url, 'master:' + repo.branch, '--force');\n    });\n}\n\nfunction run() {\n    if (!which('git')) {\n        echo('Sorry, this script require git');\n    } else {\n        echo(\"=======================Auto Backup Begin=======================\");\n        Promise.each(parseConfig(hexo.config.backup),function(repo){\n            return push(repo);\n        });\n        echo(\"=======================Auto Backup Complete======================\");\n    }\n}\n\n```\n\n还要安装shelljs模块，这样每次执行hexo d后就会自动备份到githu和gitcafe代码仓库。\n\n自动打开Markdown编辑器，同样在srcipt目录中添加一个OpenEditor.js文件，代码如下：\n``` JavaScript\nvar exec = require('child_process').exec;\nvar parseConfig = require('./parse_config');\n// Hexo 2.x 用户复制这段\n// hexo.on('new', function(path){\n// exec('start  \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + path);\n// });\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data) {\n    //exec('start  /max \"\" \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + data.path);\n    exec('start  /max \"\" \"D:\\\\Program Files\\\\MarkdownPad 2\\\\MarkdownPad2.exe\" ' + data.path);\n});\n\n/*=================windows code end======================*/\n\n\n///*********************************************************\n// *                 linux   代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x\n//hexo.on('new', function(path){\n//  exec('vi', [path]);\n//});\n//\n//// Hexo 3\n//hexo.on('new', function(data){\n//  exec('vi', [data.path]);\n//});\n//\n///*=================linux  code  end======================*/\n//\n///*********************************************************\n// *                 mac     代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x 用户复制这段\n//hexo.on('new', function(path){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n//});\n//// Hexo 3 用户复制这段\n//hexo.on('new', function(data){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n//});\n///*=================mac    code  end======================*/\n\n```\n\n在windows7下是亲测可以打开，至于Mac和Linux没测试过，不敢保证可以用。\n\n---\n\n参考博文：\n\n1. [younglaker的《Hexo系列博客》](http://laker.me/blog/categories/Hexo/)\n2. [夏末的《Hexo添加文章时自动打开编辑器》](http://notes.xiamo.tk/2015-06-29-Hexo添加文章时自动打开编辑器.html)\n3. [夏末的《自动备份Hexo博客源文件》](http://notes.xiamo.tk/2015-07-06-自动备份Hexo博客源文件.html)\n4. [Heaven的《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)\n5. [github高亮语言关键字](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)","source":"_posts/Github个人静态博客的搭建.md","raw":"title: Github个人静态博客的搭建总结\ndate: 2015-11-21 17:31:06\ntags:\n - 教程\n - 总结\n - Hexo\ncategories:\n - Hexo\n---\n\n在搭建博客中出现了不少问题，在此分享一下个人的博客搭建过程：\n\n\n### 第一步：想不花钱就把事情给办了\n俗话说：想不花钱，就把事情给办了，你的找一个有钱有势的主。同样的，如果你想要有一个独立的博客，又不想自己掏钱和投入经历去维护，那么你的找一个有优势的主，这当然是首推[全球最大的男性同性交友平台 github](http://www.zhihu.com/question/28976652/answer/42771650)(*^__^*) ，至于怎么注册，怎么设置，直接看官网[帮助文档](https://help.github.com/)。\n<!--more-->\n### 第二步：hexo —— 简单、快速、强大的Node.js静态博客框架\nHexo的安装和配置请参考**Heaven**的[《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)，由于Heaven大神一直是在搞前端的，博文里没有提到node.js的安装，这个就是下载，下一步的事，也不详陈了。\n\n---\n\n### 总结遇到的问题\n\n注意：以下操作都是基于windows7！！！\n\n1、在git bash客户端，使用ssh方式进行clone和push时，每次关闭重开git bash客户端总是出现如下错误：\n\n``` bash\n$ git clone git@github.com:xiaorisu/github-roam.git\nCloning into 'github-roam'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n之前一直是手动输入如下两句代码来解决此问题：\n\n``` bash\neval $(ssh-agent -s)\nssh-add ~/.ssh/xxxx\n```\n\n我是一个懒人，每次都要这样手动输入这两行代码，我会很烦躁，于是有了下面的解决方案：\n在当前用户目录底下新建一个.bash_profile文件，不要问我当前用户的目录是哪个目录，一般是打开cmd之后，光标之前的路劲就是当前用户目录。当然，如果你设置过默认打开路径，那就是另一回事了，这时你可以使用如下命令得到：\n\n``` bash\necho %systemdrive%%homepath%\n```\n\n创建好了.bash_profile文件后，在文件中输入如下代码：\n\n``` bash\neval $(ps | grep 'ssh-agent' | awk '{print $1}' | xargs kill -9)\neval $(ssh-agent -s)\nssh-add ~/.ssh/XXXXX\n```\n\n保存文件，此文件会在每次打开git bash时加载并运行其中的命令。解释一下这三条命令的含义：第一句是杀死之前开的所有ssh-agent，由于每次打开都会执行两编这里面的命令，没有去查是什么原因导致的。并且每次关闭了git bash客户端，都不会关闭它打开的ssh-agent程序；第二句是开启ssh-agent服务；第三句是将专用密钥添加到ssh-agent的高速缓存中。\n\n---\n\n2、执行hexo s 命令后，在浏览器中输入localhost:4000半天没有响应，最后无法访问生成的静态页面。\n\n这个问题的原因在于4000端口被FxServer占用了，但是hexo-server没有报错，真是郁闷！！！解决这问题很简单，可以关掉FxServer服务，也可使用hexo s -p 4040即可解决。解决这个问题并不困难，我要说的是怎么找到问题的原因的。\n首先使用netstat命令查看当前电脑的网络连接状况：\n\n``` bash\nC:\\Users\\lenovo>netstat -ano | findstr \"4000\"\n  TCP    0.0.0.0:4000           0.0.0.0:0              LISTENING       21908\n  TCP    127.0.0.1:4000         0.0.0.0:0              LISTENING       17620\n  TCP    127.0.0.1:4000         127.0.0.1:4737         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4738         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4739         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4740         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4741         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4742         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4755         ESTABLISHED     17620\n  TCP    127.0.0.1:4737         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4738         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4739         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4740         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4741         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4742         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4755         127.0.0.1:4000         ESTABLISHED     556\n```\n\n发现4000端口有很多连接，发现有两个进程在监听4000端口，pid分别是21908和17620，从任务管理器中可以看到这两个pid对应的进程分别是node.exe和FxServer服务。这就是查找问题的过程。\n\n---\n\n### 最后说一下改进\n\n最后说一说多仓库部署和源代码自动备份以及自动打开Markdown编辑器。\n\n先上我的_config.yml文件：\n\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 翰海尘沙\nsubtitle: 进击的程序员\ndescription: 技术分享、阅读笔记\nauthor: 翰海尘沙\nlanguage: zh-CN\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yourgithubname.github.io\nroot: /blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: landscape\n#theme: leo\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n# 自动备份\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n\n# 评论\n# 1.友言\n#uyan:\n#  enable: true\n# 2.多说\n#duoshuo_shortname: shortname\n# 3.畅言\nchangyan:\n  enable: true\n\n# RSS订阅\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 10\n\n# 网站地图\nsitemap:\n    path: sitemap.xml\n```\n\n多仓库部署比较简单，只要在_config.yml配置成如下：\n\n```\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n```\n\n使用hexo d命令就可以自动部署到github和gitcafe上去。\n\n多仓自动库备份稍微复杂些，先在配置文件中自定自己的自动备份的配置：\n\n```\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n```\n\n然后在博客源代码的项目根目录下的scripts目录（如果没有就新建一个scripes文件夹）中新建一个任意名字的javascript文件。我新建的是一个AutoBackUp.js，添加如下代码：\n\n``` JavaScript\nrequire('shelljs/global');\n\nvar parseConfig = require('hexo-deployer-git/lib/parse_config');\nvar util = require('hexo/node_modules/hexo-util');\nvar Promise = require('hexo/node_modules/bluebird');\nvar spawn = util.spawn;\n\ntry {\n    hexo.on('deployAfter', function() {\n        run();\n    });\n} catch (e) {\n    console.log(\"备份出现异常，详细信息\" + e.toString());\n}\n\nfunction git() {\n    var len = arguments.length;\n    var args = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n        args[i] = arguments[i];\n    }\n\n    return spawn('git', args, {\n        cwd: hexo.base_dir,\n        verbose: !hexo.config.backup.silent\n    });\n}\n\nfunction push(repo) {\n    return git('add', '-A').then(function() {\n        return git('commit', '-m', \"Form auto backup script\\'s commit\").catch(function() {\n            // Do nothing. It's OK if nothing to commit.\n        });\n    }).then(function() {\n        return git('push', '-u', repo.url, 'master:' + repo.branch, '--force');\n    });\n}\n\nfunction run() {\n    if (!which('git')) {\n        echo('Sorry, this script require git');\n    } else {\n        echo(\"=======================Auto Backup Begin=======================\");\n        Promise.each(parseConfig(hexo.config.backup),function(repo){\n            return push(repo);\n        });\n        echo(\"=======================Auto Backup Complete======================\");\n    }\n}\n\n```\n\n还要安装shelljs模块，这样每次执行hexo d后就会自动备份到githu和gitcafe代码仓库。\n\n自动打开Markdown编辑器，同样在srcipt目录中添加一个OpenEditor.js文件，代码如下：\n``` JavaScript\nvar exec = require('child_process').exec;\nvar parseConfig = require('./parse_config');\n// Hexo 2.x 用户复制这段\n// hexo.on('new', function(path){\n// exec('start  \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + path);\n// });\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data) {\n    //exec('start  /max \"\" \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + data.path);\n    exec('start  /max \"\" \"D:\\\\Program Files\\\\MarkdownPad 2\\\\MarkdownPad2.exe\" ' + data.path);\n});\n\n/*=================windows code end======================*/\n\n\n///*********************************************************\n// *                 linux   代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x\n//hexo.on('new', function(path){\n//  exec('vi', [path]);\n//});\n//\n//// Hexo 3\n//hexo.on('new', function(data){\n//  exec('vi', [data.path]);\n//});\n//\n///*=================linux  code  end======================*/\n//\n///*********************************************************\n// *                 mac     代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x 用户复制这段\n//hexo.on('new', function(path){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n//});\n//// Hexo 3 用户复制这段\n//hexo.on('new', function(data){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n//});\n///*=================mac    code  end======================*/\n\n```\n\n在windows7下是亲测可以打开，至于Mac和Linux没测试过，不敢保证可以用。\n\n---\n\n参考博文：\n\n1. [younglaker的《Hexo系列博客》](http://laker.me/blog/categories/Hexo/)\n2. [夏末的《Hexo添加文章时自动打开编辑器》](http://notes.xiamo.tk/2015-06-29-Hexo添加文章时自动打开编辑器.html)\n3. [夏末的《自动备份Hexo博客源文件》](http://notes.xiamo.tk/2015-07-06-自动备份Hexo博客源文件.html)\n4. [Heaven的《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)\n5. [github高亮语言关键字](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)","slug":"Github个人静态博客的搭建","published":1,"updated":"2016-03-24T11:20:36.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip1c2p1i001090opl5sw0p60"},{"title":"Web服务器安全策略","_content":"","source":"_drafts/Web服务器安全策略.md","raw":"title: Web服务器安全策略\ntags:\n---\n","slug":"Web服务器安全策略","published":0,"date":"2016-03-24T11:20:35.771Z","updated":"2016-03-24T11:20:35.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip1c2p1o001990opdgrl62eg"}],"PostAsset":[{"_id":"source/_posts/计算机网络概述/图一.jpg","post":"cip1c2ows000190ophf7ptp7a","slug":"图一.jpg","modified":1},{"_id":"source/_posts/计算机网络概述/图三.png","post":"cip1c2ows000190ophf7ptp7a","slug":"图三.png","modified":1},{"_id":"source/_posts/计算机网络概述/图二.png","post":"cip1c2ows000190ophf7ptp7a","slug":"图二.png","modified":1},{"_id":"source/_posts/计算机网络概述/图五.png","post":"cip1c2ows000190ophf7ptp7a","slug":"图五.png","modified":1},{"_id":"source/_posts/计算机网络概述/图四.png","post":"cip1c2ows000190ophf7ptp7a","slug":"图四.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/fengmian.jpg","post":"cip1c2oyj000d90op0l7e4vh7","slug":"fengmian.jpg","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/六一儿童节.png","post":"cip1c2oyj000d90op0l7e4vh7","slug":"六一儿童节.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图一.png","post":"cip1c2oyj000d90op0l7e4vh7","slug":"图一.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图三.png","post":"cip1c2oyj000d90op0l7e4vh7","slug":"图三.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图二.png","post":"cip1c2oyj000d90op0l7e4vh7","slug":"图二.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图五.png","post":"cip1c2oyj000d90op0l7e4vh7","slug":"图五.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图六.png","post":"cip1c2oyj000d90op0l7e4vh7","slug":"图六.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图四.png","post":"cip1c2oyj000d90op0l7e4vh7","slug":"图四.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter-packet-flow.png","post":"cip1c2ozp000p90opygi2trd4","slug":"Netfilter-packet-flow.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter-packet-flow.svg","post":"cip1c2ozp000p90opygi2trd4","slug":"Netfilter-packet-flow.svg","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter与iptabales关系.png","post":"cip1c2ozp000p90opygi2trd4","slug":"Netfilter与iptabales关系.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/iptables数据包流程.png","post":"cip1c2ozp000p90opygi2trd4","slug":"iptables数据包流程.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/iptables策略组成.png","post":"cip1c2ozp000p90opygi2trd4","slug":"iptables策略组成.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/显式匹配.jpg","post":"cip1c2ozp000p90opygi2trd4","slug":"显式匹配.jpg","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/模拟网络.png","post":"cip1c2ozp000p90opygi2trd4","slug":"模拟网络.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置1.png","post":"cip1c2ozp000p90opygi2trd4","slug":"虚拟机网络配置1.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置2.png","post":"cip1c2ozp000p90opygi2trd4","slug":"虚拟机网络配置2.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置3.png","post":"cip1c2ozp000p90opygi2trd4","slug":"虚拟机网络配置3.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/设置默认网关.png","post":"cip1c2ozp000p90opygi2trd4","slug":"设置默认网关.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/访问LM服务1.png","post":"cip1c2ozp000p90opygi2trd4","slug":"访问LM服务1.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/访问LM服务2.png","post":"cip1c2ozp000p90opygi2trd4","slug":"访问LM服务2.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/隐含匹配.jpg","post":"cip1c2ozp000p90opygi2trd4","slug":"隐含匹配.jpg","modified":1}],"PostCategory":[{"post_id":"cip1c2ows000190ophf7ptp7a","category_id":"cip1c2oww000290optt8w1n3n","_id":"cip1c2oxj000590opry4f9fvl"},{"post_id":"cip1c2oyd000690opcu5299aq","category_id":"cip1c2oyf000790opwhrx075y","_id":"cip1c2oyg000a90op877w49w2"},{"post_id":"cip1c2oyj000d90op0l7e4vh7","category_id":"cip1c2oyk000e90op3wlju4bn","_id":"cip1c2oyl000h90opoimmz8yq"},{"post_id":"cip1c2ozp000p90opygi2trd4","category_id":"cip1c2ozr000q90opy1xthp24","_id":"cip1c2ozt000t90oppu4zc0jw"},{"post_id":"cip1c2p1i001090opl5sw0p60","category_id":"cip1c2p1k001190op3xkca9xo","_id":"cip1c2p1l001490op8vd3xg0x"},{"post_id":"cip1c2ozj000i90optu0dtfiv","category_id":"cip1c2ozl000j90op46iv4rru","_id":"cip1c984t000088ops4g04k5e"}],"PostTag":[{"post_id":"cip1c2ows000190ophf7ptp7a","tag_id":"cip1c2oww000390op9vjoblzp","_id":"cip1c2oxj000490opxct6ohvh"},{"post_id":"cip1c2oyd000690opcu5299aq","tag_id":"cip1c2oyf000890opu915mylr","_id":"cip1c2oyh000b90opqn1wbxw2"},{"post_id":"cip1c2oyd000690opcu5299aq","tag_id":"cip1c2oyg000990opsxb8ojmo","_id":"cip1c2oyh000c90opoa43rmbl"},{"post_id":"cip1c2oyj000d90op0l7e4vh7","tag_id":"cip1c2oyk000f90opwvrwy3dt","_id":"cip1c2oyl000g90oplk5v0fkh"},{"post_id":"cip1c2ozj000i90optu0dtfiv","tag_id":"cip1c2ozl000k90opot990vzq","_id":"cip1c2ozn000n90opi2qf150g"},{"post_id":"cip1c2ozj000i90optu0dtfiv","tag_id":"cip1c2ozm000l90op1vl22t5s","_id":"cip1c2ozn000o90opgbsta3mp"},{"post_id":"cip1c2ozp000p90opygi2trd4","tag_id":"cip1c2ozr000r90opugf6e159","_id":"cip1c2ozv000w90opi7253zmx"},{"post_id":"cip1c2ozp000p90opygi2trd4","tag_id":"cip1c2ozs000s90opsmbzx9s7","_id":"cip1c2ozv000x90opb10bzenq"},{"post_id":"cip1c2ozp000p90opygi2trd4","tag_id":"cip1c2ozt000u90opt4gc6ufb","_id":"cip1c2ozv000y90opyiw7b4ks"},{"post_id":"cip1c2ozp000p90opygi2trd4","tag_id":"cip1c2ozu000v90opfxn7m6p9","_id":"cip1c2ozw000z90op0go80a4c"},{"post_id":"cip1c2p1i001090opl5sw0p60","tag_id":"cip1c2p1k001290opckqdb3mh","_id":"cip1c2p1m001690opos4f9v4m"},{"post_id":"cip1c2p1i001090opl5sw0p60","tag_id":"cip1c2p1l001390opn0vfamwv","_id":"cip1c2p1m001790oppzlw34lt"},{"post_id":"cip1c2p1i001090opl5sw0p60","tag_id":"cip1c2p1m001590opi4fnvqif","_id":"cip1c2p1m001890oppirjwtl3"}],"Tag":[{"name":"计算机网络","_id":"cip1c2oww000390op9vjoblzp"},{"name":"杂谈","_id":"cip1c2oyf000890opu915mylr"},{"name":"关于博客","_id":"cip1c2oyg000990opsxb8ojmo"},{"name":"微信开发","_id":"cip1c2oyk000f90opwvrwy3dt"},{"name":"计算机基础","_id":"cip1c2ozl000k90opot990vzq"},{"name":"数学","_id":"cip1c2ozm000l90op1vl22t5s"},{"name":"iptables","_id":"cip1c2ozr000r90opugf6e159"},{"name":"Netfilter","_id":"cip1c2ozs000s90opsmbzx9s7"},{"name":"防火墙","_id":"cip1c2ozt000u90opt4gc6ufb"},{"name":"网络","_id":"cip1c2ozu000v90opfxn7m6p9"},{"name":"教程","_id":"cip1c2p1k001290opckqdb3mh"},{"name":"总结","_id":"cip1c2p1l001390opn0vfamwv"},{"name":"Hexo","_id":"cip1c2p1m001590opi4fnvqif"}]}}