{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/js/jquery2.0.3.min.js","path":"js/jquery2.0.3.min.js","modified":0},{"_id":"themes/landscape/source/js/jquery.min.map","path":"js/jquery.min.map","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/favicon.jpg","path":"css/images/favicon.jpg","modified":0},{"_id":"themes/landscape/source/css/images/banner_bak.jpg","path":"css/images/banner_bak.jpg","modified":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0},{"_id":"themes/landscape/source/css/font.css","path":"css/font.css","modified":0}],"Cache":[{"_id":"source/_drafts/Linux服务器安全.md","shasum":"6cb832a115651b2d1e82c0d40a72a2f47f0ce1ff","modified":1458704585141},{"_id":"source/_drafts/Web服务器安全策略.md","shasum":"fba6c16eb53759e79d3f39b093972ce99968c25e","modified":1448857214141},{"_id":"source/_drafts/《中国互联网地下产业链分析白皮书》阅读笔记.md","shasum":"1dcadce4db4fa565e835de9c218657e506eb6f14","modified":1467464412923},{"_id":"source/_posts/Github个人静态博客的搭建.md","shasum":"d9b3334b7f8f09a844e94ab47c5d11555e2a5579","modified":1468463517746},{"_id":"source/_posts/RSA系类（一）：辗转相除法/图一.png","shasum":"381bde105287bdda205a1e096fb7ef5c9cb16e73","modified":1468393023433},{"_id":"source/_posts/RSA系类（一）：辗转相除法.md","shasum":"2069ba6e617a0476d2a085117d8a6185cd691779","modified":1468393888059},{"_id":"source/_posts/RSA系类（三）：从物不知数到中国剩余定理和费马小定理.md","shasum":"e6557c6e0889218c92431f9148c41f21c38a6ac9","modified":1468464443049},{"_id":"source/_posts/RSA系类（二）：分水问题.md","shasum":"a8482b08e52f36049e6d583296b6d49b78304527","modified":1468399011712},{"_id":"source/_posts/RSA系类（四）：完結篇.md","shasum":"34e9d5025bb4bd6d6b137d326f80d92eff295c45","modified":1468478175717},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter与iptabales关系.png","shasum":"f07b793296e3a9f13dbef4e65d63576e2eee07b6","modified":1458910194406},{"_id":"source/_posts/初识Netfilter-iptables/iptables数据包流程.png","shasum":"0f1d291a330ce1abd680a98e3322e11f8877c7de","modified":1458910194406},{"_id":"source/_posts/初识Netfilter-iptables/iptables策略组成.png","shasum":"41dd95105f2e09ef801d3e8dc1a76efa3ab25598","modified":1458910194407},{"_id":"source/_posts/初识Netfilter-iptables/模拟网络.png","shasum":"c3946cc30033e971acfb3313778775b0df8f4e76","modified":1458910194407},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置1.png","shasum":"a385762c42f4a30f350841e2e8259ec88c905e95","modified":1458910194407},{"_id":"source/_posts/初识Netfilter-iptables/设置默认网关.png","shasum":"5dcbdddc7dba1175e69daa03e124aa8317ba91fd","modified":1458910194407},{"_id":"source/_posts/初识Netfilter-iptables/访问LM服务1.png","shasum":"22971485ee334d7de37727f4acb19101955ea9a1","modified":1458910194407},{"_id":"source/_posts/初识Netfilter-iptables/访问LM服务2.png","shasum":"428e539065338f67ebe089eb66de058ce9a14ec9","modified":1458910194407},{"_id":"source/_posts/初识Netfilter-iptables.md","shasum":"e7ded4ac662da8e24bfd6b3c8954998390962e3f","modified":1458910194338},{"_id":"source/_posts/别样的整数表示和运算.md","shasum":"a7208dab04dc74f9d9aa851dc24f04ee08ae3916","modified":1465178783044},{"_id":"source/_posts/别样的进制/图一.png","shasum":"97b2e679bfdc70b5dfeb0aeca1ac355042c3d9ca","modified":1465178783063},{"_id":"source/_posts/别样的进制/图三.png","shasum":"60155bc7fe76d65eee31bddd787d6ef20b0e67a9","modified":1465180630203},{"_id":"source/_posts/别样的进制/图二.png","shasum":"d7c110d1db9abbc7b4362a0064a811725fe734c6","modified":1465178783087},{"_id":"source/_posts/别样的进制/图四.png","shasum":"2c89c86ee2e1e9c287570520ef45be8c43c44c53","modified":1465178783088},{"_id":"source/_posts/别样的进制.md","shasum":"9f16b2abf27c005974f201f12ee77db670c683a1","modified":1465179528458},{"_id":"source/_posts/单击微信文章进入原文的方法/fengmian.jpg","shasum":"36161bbb799c3bc08067d14c758602b8f6b7ac8b","modified":1458704585179},{"_id":"source/_posts/单击微信文章进入原文的方法/图六.png","shasum":"d6df76b9deaa263ff7028157dab5371ec3dc2ace","modified":1458704585195},{"_id":"source/_posts/单击微信文章进入原文的方法.md","shasum":"218ffed71c3fc5ff67b3e52d48a13f1922a90c48","modified":1458704585142},{"_id":"source/_posts/博客名字的由来.md","shasum":"245d79db7029045512487dfcfb7d842f2baf9774","modified":1468393437358},{"_id":"source/_posts/计算机网络概述/图三.png","shasum":"c078fb552b5f969d3156d5365177d26ceae74fd7","modified":1448588936081},{"_id":"source/_posts/计算机网络概述/图二.png","shasum":"1a56f33a1fa563de33744b2ac4814bbb8bde1e26","modified":1448588936099},{"_id":"source/_posts/计算机网络概述/图四.png","shasum":"80a6ff3d993cb7f5aba1c3a3223cc4a57f69ac0d","modified":1448588936162},{"_id":"source/_posts/计算机网络概述.md","shasum":"a170460d77327ba2e9538874fd368c4b5c658e69","modified":1448588936040},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter-packet-flow.svg","shasum":"b93652bb519e2f632b0a459461d2779a588e92b4","modified":1458910194407},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置2.png","shasum":"f583ddd58d1730c961bd6051a5d8f681a8fe6864","modified":1458910194408},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置3.png","shasum":"ff911d09c4bd2c3574f62bff5a7ac738901bd6fe","modified":1458910194408},{"_id":"source/_posts/初识Netfilter-iptables/隐含匹配.jpg","shasum":"c1c7fdeecdb754d0cb6d5cab759add00d8bea3e4","modified":1458910194408},{"_id":"source/_posts/单击微信文章进入原文的方法/图一.png","shasum":"ec4bc73ec7abfd302e24988929dc0eba297e2af6","modified":1458704585183},{"_id":"source/_posts/单击微信文章进入原文的方法/图三.png","shasum":"ada815093d7bd9c95778dd75500ed6627aa1becf","modified":1458704585186},{"_id":"source/_posts/单击微信文章进入原文的方法/图二.png","shasum":"df77cfd2e9f7546cdd1b15b05e65ad7b8432906d","modified":1458704585190},{"_id":"source/_posts/单击微信文章进入原文的方法/图四.png","shasum":"c2af20e2c69405284ed6cf92a703332cba06670e","modified":1458704585198},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter-packet-flow.png","shasum":"62e35afd4e37c919b903dfb5cea619a84e9a1ba8","modified":1458910194408},{"_id":"source/_posts/单击微信文章进入原文的方法/图五.png","shasum":"77c13f3006a540178052e120289bdc749294c916","modified":1458704585194},{"_id":"source/_posts/计算机网络概述/图五.png","shasum":"667b20c74023428436cdaa7b26f6d26a65cad7f1","modified":1448588936155},{"_id":"themes/landscape/Gruntfile.js","shasum":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1448423282620},{"_id":"themes/landscape/LICENSE","shasum":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1448423282621},{"_id":"themes/landscape/README.md","shasum":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1448423282621},{"_id":"themes/landscape/_config.yml","shasum":"4fcba4a86ecceda026fc3c49ee4446beedcfb79e","modified":1448423282621},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"58b4c73a2e26fa899157ba89d18ff93e00d41fb6","modified":1448423282622},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"5062c723721d8497eebad372f57092ade45041f4","modified":1448423282622},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"e440311811c74c20cbdf70f6fd44fd4855d059ae","modified":1448423282623},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"01f6615c6ee17969f2adfa78def1fcdc117d9095","modified":1465184168171},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"29849f7d8f34acf80fc1a2bfd11a935581c32e3d","modified":1448423282624},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1448423282624},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"3df94dc164f4d1bd256fc9049386d489a9da057b","modified":1448423282624},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"f158b8b3f2e260c4090718bf7154922f54bac5d1","modified":1448423282625},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1448423282625},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1448423282625},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1448423282626},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1448423282626},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"eb000d9d8a9ebd9087046fa019abe1cddae8fd9c","modified":1448423282626},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1448423282627},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1448423282627},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1448423282627},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"88e191e3d14541299ed03b9a45be70974df51143","modified":1448423282628},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"4d3f92e3cd652cb69d71e40d1c64b2369922ca26","modified":1448423282628},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"d6591c745402fbc600e682830a343f732e336e4f","modified":1448423282628},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"7ba10fbd17b83b9b89eaea99bb78158d318c6d75","modified":1448423282628},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"9028129dd2e56813197d0c38db5df8110aaeaabb","modified":1448423282629},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1448423282629},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1448423282629},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1448423282629},{"_id":"themes/landscape/layout/layout.ejs","shasum":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1448423282630},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1448423282630},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1448423282631},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1448423282631},{"_id":"themes/landscape/package.json","shasum":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1448423282631},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1448423282632},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1448423282632},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1448423282633},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1448423282633},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"2834870661e490775f9154d71638bfdc72e640a6","modified":1448423282633},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1448423282634},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"8a737f61e78bf488642a85627d8fc66ef4a50acd","modified":1448423282634},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"05da1b8f4859761dc60bca40b8682f167e350742","modified":1448423282635},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1448423282635},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1448423282635},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"f6023861b2fbd858946e2108438b5f8f17586179","modified":1448423282635},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"8d971a00e644a600179b04815688d188f094012e","modified":1448423282636},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1448423282636},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1448423282636},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1448423282637},{"_id":"themes/landscape/source/css/font.css","shasum":"7b737ba95d532c65173e14cc5269b9a1ac638e2d","modified":1448423282637},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1448423282638},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1448423282639},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1448423282642},{"_id":"themes/landscape/source/css/images/favicon.jpg","shasum":"1ed9999d5f43b9d5873ce9fe72263eb271fae9d3","modified":1448423282646},{"_id":"themes/landscape/source/css/style.styl","shasum":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1448423282647},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1448423282647},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1448423282647},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1448423282648},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1448423282649},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1448423282649},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1448423282649},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1448423282650},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1448423282650},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1448423282651},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1448423282651},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1448423282651},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1448423282652},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1448423282652},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1448423282653},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1448423282653},{"_id":"themes/landscape/source/js/script.js","shasum":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1465183428834},{"_id":"source/_posts/初识Netfilter-iptables/显式匹配.jpg","shasum":"ab728363b3fb1277620df778aa34d89e52a21a2c","modified":1458910194408},{"_id":"source/_posts/计算机网络概述/图一.jpg","shasum":"6fe0234cfaaea8b8665cb48b5cf36e61e60410cb","modified":1448588936043},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1448423282641},{"_id":"themes/landscape/source/js/jquery.min.map","shasum":"83c9ec8ebb61ee9916f624a1e75ba47b0f1b0ec4","modified":1448423282655},{"_id":"themes/landscape/source/js/jquery2.0.3.min.js","shasum":"745ab5d6e434cf8d321779da3c527b6d301e2b50","modified":1448423282656},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"813f6072ce732ad698e9979bfb3a3dcd1e4b0d0a","modified":1448423282643},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"a275426daefd3716c53561fad121d258a7f05b47","modified":1448423282640},{"_id":"themes/landscape/source/css/images/banner_bak.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1448423282646},{"_id":"source/_posts/单击微信文章进入原文的方法/六一儿童节.png","shasum":"de9f1d926ac19e6c8b4c0076e7a1fb212d65cc92","modified":1464677830092},{"_id":"public/js/script.js","modified":1468477881869,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/js/jquery2.0.3.min.js","modified":1468477881874,"shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d"},{"_id":"public/js/jquery.min.map","modified":1468477881881,"shasum":"83c9ec8ebb61ee9916f624a1e75ba47b0f1b0ec4"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1468477881884,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1468477881887,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1468477881891,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1468477881896,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1468477881899,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1468477881901,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1468477881905,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1468477881907,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1468477881910,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1468477881912,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1468477881915,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1468477881918,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1468477881920,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1468477881923,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1468477881926,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1468477882461,"shasum":"67182948fec42b5b89a68a17bea4ada6fcef79a0"},{"_id":"public/css/images/favicon.jpg","modified":1468477882635,"shasum":"1ed9999d5f43b9d5873ce9fe72263eb271fae9d3"},{"_id":"public/css/images/banner_bak.jpg","modified":1468477882648,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/images/banner.jpg","modified":1468477882661,"shasum":"813f6072ce732ad698e9979bfb3a3dcd1e4b0d0a"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1468477882674,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1468477882677,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1468477882682,"shasum":"a275426daefd3716c53561fad121d258a7f05b47"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1468477882685,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1468477882689,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/css/font.css","modified":1468477882692,"shasum":"d2c3b48df4256b730b9dcb4b932550544cd83243"},{"_id":"public/2015/11/26/计算机网络概述/图一.jpg","modified":1468477882694,"shasum":"6fe0234cfaaea8b8665cb48b5cf36e61e60410cb"},{"_id":"public/2015/11/26/计算机网络概述/图三.png","modified":1468477882706,"shasum":"c078fb552b5f969d3156d5365177d26ceae74fd7"},{"_id":"public/2015/11/26/计算机网络概述/图二.png","modified":1468477882709,"shasum":"1a56f33a1fa563de33744b2ac4814bbb8bde1e26"},{"_id":"public/2015/11/26/计算机网络概述/图五.png","modified":1468477882713,"shasum":"667b20c74023428436cdaa7b26f6d26a65cad7f1"},{"_id":"public/2015/11/26/计算机网络概述/图四.png","modified":1468477882717,"shasum":"80a6ff3d993cb7f5aba1c3a3223cc4a57f69ac0d"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/fengmian.jpg","modified":1468477882722,"shasum":"36161bbb799c3bc08067d14c758602b8f6b7ac8b"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/六一儿童节.png","modified":1468477882737,"shasum":"de9f1d926ac19e6c8b4c0076e7a1fb212d65cc92"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图一.png","modified":1468477882741,"shasum":"ec4bc73ec7abfd302e24988929dc0eba297e2af6"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图三.png","modified":1468477882743,"shasum":"ada815093d7bd9c95778dd75500ed6627aa1becf"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图二.png","modified":1468477882746,"shasum":"df77cfd2e9f7546cdd1b15b05e65ad7b8432906d"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图五.png","modified":1468477882749,"shasum":"77c13f3006a540178052e120289bdc749294c916"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图六.png","modified":1468477882752,"shasum":"d6df76b9deaa263ff7028157dab5371ec3dc2ace"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/图四.png","modified":1468477882754,"shasum":"c2af20e2c69405284ed6cf92a703332cba06670e"},{"_id":"public/2016/06/06/别样的进制/图一.png","modified":1468477882757,"shasum":"97b2e679bfdc70b5dfeb0aeca1ac355042c3d9ca"},{"_id":"public/2016/06/06/别样的进制/图三.png","modified":1468477882759,"shasum":"60155bc7fe76d65eee31bddd787d6ef20b0e67a9"},{"_id":"public/2016/06/06/别样的进制/图二.png","modified":1468477882761,"shasum":"d7c110d1db9abbc7b4362a0064a811725fe734c6"},{"_id":"public/2016/06/06/别样的进制/图四.png","modified":1468477882763,"shasum":"2c89c86ee2e1e9c287570520ef45be8c43c44c53"},{"_id":"public/2016/03/25/初识Netfilter-iptables/Netfilter-packet-flow.png","modified":1468477882766,"shasum":"62e35afd4e37c919b903dfb5cea619a84e9a1ba8"},{"_id":"public/2016/03/25/初识Netfilter-iptables/Netfilter-packet-flow.svg","modified":1468477882768,"shasum":"b93652bb519e2f632b0a459461d2779a588e92b4"},{"_id":"public/2016/03/25/初识Netfilter-iptables/Netfilter与iptabales关系.png","modified":1468477882772,"shasum":"f07b793296e3a9f13dbef4e65d63576e2eee07b6"},{"_id":"public/2016/03/25/初识Netfilter-iptables/iptables数据包流程.png","modified":1468477882775,"shasum":"0f1d291a330ce1abd680a98e3322e11f8877c7de"},{"_id":"public/2016/03/25/初识Netfilter-iptables/iptables策略组成.png","modified":1468477882778,"shasum":"41dd95105f2e09ef801d3e8dc1a76efa3ab25598"},{"_id":"public/2016/03/25/初识Netfilter-iptables/显式匹配.jpg","modified":1468477882781,"shasum":"ab728363b3fb1277620df778aa34d89e52a21a2c"},{"_id":"public/2016/03/25/初识Netfilter-iptables/模拟网络.png","modified":1468477882794,"shasum":"c3946cc30033e971acfb3313778775b0df8f4e76"},{"_id":"public/2016/03/25/初识Netfilter-iptables/虚拟机网络配置1.png","modified":1468477882796,"shasum":"a385762c42f4a30f350841e2e8259ec88c905e95"},{"_id":"public/2016/03/25/初识Netfilter-iptables/虚拟机网络配置2.png","modified":1468477882799,"shasum":"f583ddd58d1730c961bd6051a5d8f681a8fe6864"},{"_id":"public/2016/03/25/初识Netfilter-iptables/虚拟机网络配置3.png","modified":1468477882802,"shasum":"ff911d09c4bd2c3574f62bff5a7ac738901bd6fe"},{"_id":"public/2016/03/25/初识Netfilter-iptables/设置默认网关.png","modified":1468477882807,"shasum":"5dcbdddc7dba1175e69daa03e124aa8317ba91fd"},{"_id":"public/2016/03/25/初识Netfilter-iptables/访问LM服务1.png","modified":1468477882809,"shasum":"22971485ee334d7de37727f4acb19101955ea9a1"},{"_id":"public/2016/03/25/初识Netfilter-iptables/访问LM服务2.png","modified":1468477882811,"shasum":"428e539065338f67ebe089eb66de058ce9a14ec9"},{"_id":"public/2016/03/25/初识Netfilter-iptables/隐含匹配.jpg","modified":1468477882813,"shasum":"c1c7fdeecdb754d0cb6d5cab759add00d8bea3e4"},{"_id":"public/2015/02/01/RSA系类（一）：辗转相除法/图一.png","modified":1468477882824,"shasum":"381bde105287bdda205a1e096fb7ef5c9cb16e73"},{"_id":"public/2016/06/06/别样的进制/index.html","modified":1468477882890,"shasum":"e744ad710c5004c20b03cadfc695a8760d392f11"},{"_id":"public/2016/06/04/别样的整数表示和运算/index.html","modified":1468477882907,"shasum":"7687cd07384a49c28ce890ff30ad37b46504f3aa"},{"_id":"public/2016/03/25/初识Netfilter-iptables/index.html","modified":1468477882924,"shasum":"010caad373aa5481452c2666cf6d8156242d600b"},{"_id":"public/2016/03/06/单击微信文章进入原文的方法/index.html","modified":1468477882943,"shasum":"b6fd13ec9588026fc6acd628f062690f0bf1fcea"},{"_id":"public/2015/11/26/计算机网络概述/index.html","modified":1468477882953,"shasum":"9092d17a5e2b42a39bd93aaa0775e72037323d8b"},{"_id":"public/2015/02/04/RSA系类（四）：完結篇/index.html","modified":1468478188011,"shasum":"0868f65fda893de8ed7940f87b6acd1391a6b0a6"},{"_id":"public/2015/02/03/RSA系类（三）：从物不知数到中国剩余定理和费马小定理/index.html","modified":1468477882977,"shasum":"43ce45b731ae72a126f9a74b3475feab8472ade0"},{"_id":"public/2015/02/02/RSA系类（二）：分水问题/index.html","modified":1468477882985,"shasum":"e8837149625dbfc2abd44beb290aba9e28b8b693"},{"_id":"public/2015/02/01/RSA系类（一）：辗转相除法/index.html","modified":1468477882992,"shasum":"98040be606fad673cc86f5eb3814ad463fa4e09e"},{"_id":"public/2015/02/01/Github个人静态博客的搭建/index.html","modified":1468477883009,"shasum":"6cd605e0fda4a768dca3edf437c2948ad6084b5f"},{"_id":"public/2015/02/01/博客名字的由来/index.html","modified":1468477883017,"shasum":"6499429b6d7817b5f2123311ba4a1adcda3617b0"},{"_id":"public/atom.xml","modified":1468478188152,"shasum":"b4a646b26ccf3546e3ed430bab033fc6fba8aef4"},{"_id":"public/archives/index.html","modified":1468477883043,"shasum":"1636d1878369e7c2d7b500c4270b99e904c7cb45"},{"_id":"public/archives/page/2/index.html","modified":1468477883048,"shasum":"4046220c61c25203ec796c58411edf8fdbc343c8"},{"_id":"public/archives/2015/index.html","modified":1468477883060,"shasum":"7b151cf19b1ba49b73547150330b8592b71b625d"},{"_id":"public/archives/2015/02/index.html","modified":1468477883069,"shasum":"842af117c0b372555f57e662d9947e18cada6ce8"},{"_id":"public/archives/2015/11/index.html","modified":1468477883073,"shasum":"bfeed5c1093e05c27e531347cb85d4dbc4bc0a7d"},{"_id":"public/archives/2016/index.html","modified":1468477883081,"shasum":"8b062d36813fc6a364f52f22ec5e853db89dbd14"},{"_id":"public/archives/2016/03/index.html","modified":1468477883088,"shasum":"8c223f3713b13124030f4af75c43d20f79fdd84c"},{"_id":"public/archives/2016/06/index.html","modified":1468477883093,"shasum":"a2f037434224a7435d7305792cbde42f72aef7d3"},{"_id":"public/categories/计算机网络/index.html","modified":1468477883098,"shasum":"ce9f7b2a0a4caa202c5314ad5d9f969e097e6c1f"},{"_id":"public/categories/杂谈/index.html","modified":1468477883103,"shasum":"e2c4a43630688e8b683d1c5c0de2b8dc6cf9abc3"},{"_id":"public/categories/微信开发/index.html","modified":1468477883107,"shasum":"8b51483131afdc6522d529519e1814522746448c"},{"_id":"public/categories/计算机基础/index.html","modified":1468477883112,"shasum":"68bc6295ecfdf29d98bc151afb5d77d57740aeeb"},{"_id":"public/categories/Linux防火墙/index.html","modified":1468477883118,"shasum":"47cd87c01d37b22ec85e1374c29fe72549b120a2"},{"_id":"public/categories/算法/index.html","modified":1468477883127,"shasum":"08da9e0422904f4917f51b39b14267f52306bca1"},{"_id":"public/categories/Hexo/index.html","modified":1468477883132,"shasum":"6b574f0db6c64aa86ec9e722328bf36355b2b069"},{"_id":"public/index.html","modified":1468478188177,"shasum":"6808d920ec84f5bdb7a8522836db642014b3f7d6"},{"_id":"public/page/2/index.html","modified":1468477883166,"shasum":"583e9915787c7db4c34e6cee9fe58139ac67956f"},{"_id":"public/sitemap.xml","modified":1468478188184,"shasum":"d1c7d150394fb608b9460b75521f7cb19dae2931"},{"_id":"public/tags/计算机网络/index.html","modified":1468477883175,"shasum":"a4a3501e09365b8cd31ae90d1e04bb674aba287f"},{"_id":"public/tags/杂谈/index.html","modified":1468477883181,"shasum":"898d75de2f2943638b36ccbf45b16a49e62ae1e8"},{"_id":"public/tags/关于博客/index.html","modified":1468477883185,"shasum":"ee6b5114b93dabc013bd6b52c67a6932e566fd04"},{"_id":"public/tags/微信开发/index.html","modified":1468477883190,"shasum":"4f7334b61ca343c9ddd1196a12a59f8d0ffe37c6"},{"_id":"public/tags/计算机基础/index.html","modified":1468477883195,"shasum":"495141351712c9d0b48554e1a253241c248fccbb"},{"_id":"public/tags/数学/index.html","modified":1468477883205,"shasum":"2b0824e7af20b4ab8a59a7918123d18c07b4767c"},{"_id":"public/tags/iptables/index.html","modified":1468477883209,"shasum":"5505e3e946cf0f64cdeefac7ac03dba7c1d14973"},{"_id":"public/tags/Netfilter/index.html","modified":1468477883213,"shasum":"6b10ff167da158faf74d691f208ab107807fe8d7"},{"_id":"public/tags/防火墙/index.html","modified":1468477883218,"shasum":"ec60ab29e5309943986568e7e48bf1464963187b"},{"_id":"public/tags/网络/index.html","modified":1468477883222,"shasum":"05164cde4faf0966d590606f9d499c6aa7f2e0fe"},{"_id":"public/tags/RSA算法/index.html","modified":1468477883229,"shasum":"b76d0c692f6e3c945b5e7d91228e4bb2a354fb53"},{"_id":"public/tags/欧拉函数/index.html","modified":1468477883235,"shasum":"6c37f7a98ba8d4d4a6c1d56e5e335539c4f85f49"},{"_id":"public/tags/费马小定理/index.html","modified":1468477883260,"shasum":"2f5b97e8f217268ea1dcbe1de6740d58ea3f157f"},{"_id":"public/tags/扩展辗转相除法/index.html","modified":1468477883266,"shasum":"afd080d19e2eb1ca8ad1b2e7e007897d4b93d500"},{"_id":"public/tags/中国剩余定理/index.html","modified":1468477883271,"shasum":"d6eda5925c4a9c8ff97d8d0e3cbdfefe407aec71"},{"_id":"public/tags/辗转相除法/index.html","modified":1468477883276,"shasum":"63e353c327a34ce45edbd9ac9abb8faf66f61b5b"},{"_id":"public/tags/教程/index.html","modified":1468477883281,"shasum":"0a2dc282cfaad7bb70ea5e5462031f416c25df25"},{"_id":"public/tags/总结/index.html","modified":1468477883286,"shasum":"e1d459aa6407cbf857df7b609fa6f9ddbaeb0bd3"},{"_id":"public/tags/Hexo/index.html","modified":1468477883290,"shasum":"9c0cf9c27e640ab4f49916f1b39afd704f323429"},{"_id":"public/baidusitemap.xml","modified":1468478188117,"shasum":"178e3a08b617085b1bc20228ed4956a1e8ce6b78"}],"Category":[{"name":"计算机网络","_id":"ciqlxtclt0002f8b9ozwlizw1"},{"name":"杂谈","_id":"ciqlxtcml0007f8b94loq6a3n"},{"name":"微信开发","_id":"ciqlxtcmq000ef8b985zexlu5"},{"name":"计算机基础","_id":"ciqlxtcnl000jf8b9ledb5xl0"},{"name":"Linux防火墙","_id":"ciqlxtco8000uf8b9btto6f2e"},{"name":"算法","_id":"ciqlxtcph0015f8b9j3k78iyp"},{"name":"Hexo","_id":"ciqlxtcqc001yf8b9pz1uhioa"}],"Data":[],"Page":[],"Post":[{"title":"Linux服务器安全","_content":"","source":"_drafts/Linux服务器安全.md","raw":"title: Linux服务器安全\ntags:\n---\n","slug":"Linux服务器安全","published":0,"date":"2016-03-23T03:43:05.141Z","updated":"2016-03-23T03:43:05.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtclg0000f8b93x8wyndy"},{"title":"计算机网络概述","date":"2015-11-26T12:51:27.000Z","_content":"\n\n### 基本原理\n\n在《也说“当你输入一个网址，实际会发生什么?”》中介绍到，一台电脑要跟另一台电脑进行通信（所谓通信就是进行数据交换，比如：从其他电脑上下载一个文件到自己电脑等等，如果没有网络，我们一般的做法是使用U盘、光盘等存储设备将文件从某电脑上拷贝到U盘或者刻录到光盘，然后再把U盘或者光盘的文件拷贝到自己电脑上），说道一个重要的步骤就是找到想进行通信的计算机的IP地址（使用DNS协议实现），只是这样就能通信了吗？我只能说小伙子你真是“too young too simple”。这只是万里长征的一小步，为了后面知识点介绍的方便和对网络通信有大局观，现在先简单的概括性的对网络进行介绍。  \n\n上篇日记中说到，在浏览器地址栏中输入www.baidu.com时，我们的计算机会把这个域名转换成IP地址，这个宏观过程就是之前讲过的DNS协议查询的那样，但是现在的问题是，本机也就是192.168.1.100去询问DNS服务器223.5.5.5 www.baidu.com的IP是多少时，本机和DNS服务器并不是用一根线直接相连的，而是通过网关和路由器间接相连，要把这个询问消息发送个DNS服务器，就必须要这些网关和路由器进行转发，使用ipconfig /all命令可以查看网关，如图：\n\n<!--more-->\n\n{% asset_img 图一.jpg 图一 %}  \n\n也就是说我先把信息发给网关或者路由器，如果只能使用IP来表示目标的话，那就只能先将目标设置为网关IP：192.168.1.100，但是当网关收到了这条消息后，网关不知道该怎么办，它该把这条消息发给谁呢？这显然是行不通的，当然这里可以使用广播，向与网关相连的所有的网关或这路由器都发送这条消息，其它机器使用同样的方法一直把消息传递给DNS服务器，然后DNS服务器使用同样的方法把响应回传。这种实现有一个很恐怖的地方，就拿网关A以及和网关A相连的另一个路由B来说，当网关把消息广播出去后，路由B会收到一条消息，然后路由B又将消息广播，此时网关A又会收到这条消息，然后A和B就传这条消息传到白头到老，地老天荒。如图：\n\n{% asset_img 图二.png 图二 %}  \n\n有人说这个比较容易解决，A传给B后，B传给除A外的其他机器，这样就不会出现这种传过来传回去的无限循环。传给出了除信息来源的其他机器，也就是说每传到一个机器后，要把信息里的源IP地址改变成机器自己的IP地址，这会出现当DNS服务器收到信息后不知道把信息回给谁？接着广播吗？就算这样行的通，这样真的能解决无限循环的问题吗？现在假设A将信息传给B，B传给除A外的其他机器，比如C，C收到信息，C将信息传给除B外的其他机器，比如A，又是一个天长地久，之前是两人的缠缠绵绵到天涯，现在是三人的纠葛漩涡。除此之外，这种方法带来的将是整个网络的瘫痪，进入流言满天飞，而且是永无停歇的境况。如图：\n\n{% asset_img 图三.png 图三 %}  \n\n这么看来这种方法是行不通的，那用什么办法可以解决呢？\n既然是因为目标IP和源IP在传递的过程中一直在变化，那可以再添加一个地址，套一层壳，每次只换壳，目标IP永远不变，有句歌词怎么唱来着：“洋装虽然穿在身 我心依然是中国心”。正所谓初心不改，奋勇向前，总有一天会达成目标的。看一看具体的流程，本机将DNS消息和目标IP和自己IP以及网关的一个地址（目标地址）和自己的一个地址（源地址）,根据网关的这个地址，把信息发个网关，网关收到消息，根据目标IP选择一个目标路由器或主机，将消息中的目标地址改成路由或者主机的地址，将源地址改为网关自己的地址，根据目标地址，将消息发给路由或主机，以此类推一直到目标IP主机收到这个消息。消息回复，使用同样的方法。这样就完成了两台电脑之间的通信。\n\n用什么地址可以唯一标识一台计算机呢？答案是MAC地址，每台计算机在生产的时候都会为其分配一个唯一的一个MAC地址。计算机之间的通信原理大致就是这样，具体细节，会在后面的文章中介绍。接下来，我们来大致理一理这个过程的稍微具体点的实现。\n\n我们分别看看各个计算机的职责：\n\n1. 发起通信的主机，主要职责：\n   * 准备好要发送的用户信息；\n   * 找到目标主机IP地址和本机的IP地址；\n   * 将目标主机的的IP地址添加为信息的目标IP，将自己的IP地址添加为源IP，将其作为一整体，当作一条新的信息；\n   * 找到网关的MAC地址和本机的MAC地址；\n   * 在新的信息上添加网关MAC地址作为目标MAC地址，添加本机MAC地址作为源MAC地址；\n   * 根据目标MAC地址，将消息发送出去。\n2. 网关或者路由，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是，则取出目标IP地址，看看离这个IP最近且与自己直接相连的路由或者主机，找出它的MAC地址，并且和它相连的网络接口，将目标MAC地址修改为最近的路由或者主机的MAC地址，将源MAC地址修改为网关或者路由自己的MAC地址，将消息从找到的网络接口发送出去。\n   * 如果不是，将消息丢弃。\n3. 接收端的主机，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是本机MAC地址，取出目标IP，检查是不是本机IP；\n   * 如果不是本机MAC地址，丢弃此信息，不作后面的解析；\n   * 如果是本机IP地址，则取出信息，进行相应处理；\n   * 如果不是本机IP地址，则丢弃此消息；\n\n从上面的职责，我们可以看出它们的主要职责有，用户信息处理，IP地址处理和MAC地址处理。源主机和目标主机这三个职责都有，只不过是过程向逆，三者都有的职责是IP地址处理和MAC地址处理。所以我们可以将这三个职责抽象出三个独立的处理模块，分别处理各自职责内的事情。将这三个模块组合起来就可以处理整个通信过程。而且从上面的过程可以明显的看出，这些处理过程有着层级关系，为了降低复杂性，我们对网络进行分层，将用户数据处理模块对应为应用层，IP地址处理模块对应为IP层，MAC地址处理模块对应为数据链路层。这就是计算机网络中的分层思想。\n\n小伙伴们看到这，是不是要着急了。计算机网络的书本上明明白白说了OSI参考模型是七层，TCP/IP参考模型是四层，这里只有三层，明显是博主学艺不精。至于OSI参考模型这里就不说了，这个只是参考模型，在实现中并没有采用。TCP/IP参考模型的四层，再加上一层物理层（就是各类物理硬件），我们说的就是这个模型，下面将另外两层补上。\n\n前面只是说到两台主机间的通信，我们忽略了物理设备这层（即各类硬件），把这层加上就足够两台主机通信了（当然这里可靠性之类的细节），也就是说，如果每台计算机只有一个使用网络的程序，那么理论上有这四层就能进行网络通信了，但是我们都知道，每台电脑上都有很多程序在使用网络，这就带了一个问题，计算机收到了来之网络上的信息，这条信息是要交给哪个应用程序的呢？我们可已使用上面的原理再加一层处理，网络分层也加一层，这一层处理的职责是在信息中添加一个ID标记（也就是端口）来标记这条消息是给哪个应用程序的，在接收端，根据这个ID（即端口）将信息交给对应的应用程序。加上这两层，就可以真真正正的实现通信了。\n\n---\n\n### 分层\n\n下面来看看分层：网络协议通常分不同层次进行开发，每一层分别\n负责不同的通信功能。这里不介绍物理层，这一层并非协议分层。\n\n1. 链路层：通常包括操作系统中的设备驱动程序及接口卡。\n2. 网络层：处理分组在网络中的活动，包括协议有：IP、ICMP和IGMP。\n3. 运输层：或者叫做传输层，主要是为两台主机的应用程序提供端到端的通信，包括协议有：TCP和UDP。\n4. 应用层：负责处理特定应用程序的细节，包括协议有：Telnet、FTP、HTTP和e-mail等。\n\n\n用一张图来表示一下TCP/IP协议族中不同层次的协议，协议详情，以后在详陈：\n\n{% asset_img 图四.png 图四 %}\n\n---\n\n### 封装\n\n借助图四中的协议之间的箭头，我们来看看数据的组装（即箭头方向是从上向下的过程）和解析（即箭头方向是从下向上的过程）过程，这里的组装就是现在要将的封装，下一小节要说的分用就是解析过程。\n\n封装过程如下：\n\n1. 用户输入数据给应用程序，比如使用FTP的PWD命令显示当前目录，此时的数据就是：PWD。\n2. FTP应用程序将此命令按FTP协议的规定将用户数据封装成FTP数据：PWD\\r\\r。\n3. FTP将FTP数据交给TCP层，TCP层按照TCP协议加上TCP头，形成新的数据：TCP头+FTP数据。\n4. TCP层将数据传给IP层，IP层按照IP协议加上IP头，形成新的数据：IP头+TCP头+FTP数据。\n5. IP层将数据交给链路层，链路层按照链路层上的协议（一般是以太网协议）加上链路层协议头和链路层尾部，形成新的数据：以太网协议头+IP头+TCP头+FTP数据+以太网尾部。\n\n如下图所示：\n\n{% asset_img 图五.png 图五 %}\n\n---\n\n### 分用\n\n分用正好是封装的逆过程，此过程就不赘述了，这里说一个题外话，由以太网尾部联想到身份证最后一位的含义，它们的作用是一样的，都是一个校验作用。现在就让我们来看看身份证末尾出现X是怎么一回事：\n\n公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。\n\n前面的17位是可以根据地区、出生年月和顺序码确定下来，最有一位的计算方法如下：\n\n1. 将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这17位数字和系数相乘的结果相加。\n3. 用加出来和除以11，看余数是多少？\n4. 余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字。其分别对应的最后一位身份证的号码为1－0－X －9－8－7－6－5－4－3－2。\n\n从上面可以看出由于是对11取余数，所以有11个余数，而一位数只有10个，所以就出现了X。现在你可以用自己的身份证验证一下是不是这样的,如果你计算出来的结果与你身份证最后一位不一样，你的身份证就有问题了。还有一点：倒数第二数字，如果是奇数，则说明这个身份证号码是男性的，偶数则是女性的。\n\n---\n\n参考资料：\n\n1. 《TCP/IP详解：卷一》\n2. [居民身份证号码](http://baike.baidu.com/view/188003.htm)","source":"_posts/计算机网络概述.md","raw":"title: 计算机网络概述\ntags:\n  - 计算机网络\ncategories:\n  - 计算机网络\ndate: 2015-11-26 20:51:27\n---\n\n\n### 基本原理\n\n在《也说“当你输入一个网址，实际会发生什么?”》中介绍到，一台电脑要跟另一台电脑进行通信（所谓通信就是进行数据交换，比如：从其他电脑上下载一个文件到自己电脑等等，如果没有网络，我们一般的做法是使用U盘、光盘等存储设备将文件从某电脑上拷贝到U盘或者刻录到光盘，然后再把U盘或者光盘的文件拷贝到自己电脑上），说道一个重要的步骤就是找到想进行通信的计算机的IP地址（使用DNS协议实现），只是这样就能通信了吗？我只能说小伙子你真是“too young too simple”。这只是万里长征的一小步，为了后面知识点介绍的方便和对网络通信有大局观，现在先简单的概括性的对网络进行介绍。  \n\n上篇日记中说到，在浏览器地址栏中输入www.baidu.com时，我们的计算机会把这个域名转换成IP地址，这个宏观过程就是之前讲过的DNS协议查询的那样，但是现在的问题是，本机也就是192.168.1.100去询问DNS服务器223.5.5.5 www.baidu.com的IP是多少时，本机和DNS服务器并不是用一根线直接相连的，而是通过网关和路由器间接相连，要把这个询问消息发送个DNS服务器，就必须要这些网关和路由器进行转发，使用ipconfig /all命令可以查看网关，如图：\n\n<!--more-->\n\n{% asset_img 图一.jpg 图一 %}  \n\n也就是说我先把信息发给网关或者路由器，如果只能使用IP来表示目标的话，那就只能先将目标设置为网关IP：192.168.1.100，但是当网关收到了这条消息后，网关不知道该怎么办，它该把这条消息发给谁呢？这显然是行不通的，当然这里可以使用广播，向与网关相连的所有的网关或这路由器都发送这条消息，其它机器使用同样的方法一直把消息传递给DNS服务器，然后DNS服务器使用同样的方法把响应回传。这种实现有一个很恐怖的地方，就拿网关A以及和网关A相连的另一个路由B来说，当网关把消息广播出去后，路由B会收到一条消息，然后路由B又将消息广播，此时网关A又会收到这条消息，然后A和B就传这条消息传到白头到老，地老天荒。如图：\n\n{% asset_img 图二.png 图二 %}  \n\n有人说这个比较容易解决，A传给B后，B传给除A外的其他机器，这样就不会出现这种传过来传回去的无限循环。传给出了除信息来源的其他机器，也就是说每传到一个机器后，要把信息里的源IP地址改变成机器自己的IP地址，这会出现当DNS服务器收到信息后不知道把信息回给谁？接着广播吗？就算这样行的通，这样真的能解决无限循环的问题吗？现在假设A将信息传给B，B传给除A外的其他机器，比如C，C收到信息，C将信息传给除B外的其他机器，比如A，又是一个天长地久，之前是两人的缠缠绵绵到天涯，现在是三人的纠葛漩涡。除此之外，这种方法带来的将是整个网络的瘫痪，进入流言满天飞，而且是永无停歇的境况。如图：\n\n{% asset_img 图三.png 图三 %}  \n\n这么看来这种方法是行不通的，那用什么办法可以解决呢？\n既然是因为目标IP和源IP在传递的过程中一直在变化，那可以再添加一个地址，套一层壳，每次只换壳，目标IP永远不变，有句歌词怎么唱来着：“洋装虽然穿在身 我心依然是中国心”。正所谓初心不改，奋勇向前，总有一天会达成目标的。看一看具体的流程，本机将DNS消息和目标IP和自己IP以及网关的一个地址（目标地址）和自己的一个地址（源地址）,根据网关的这个地址，把信息发个网关，网关收到消息，根据目标IP选择一个目标路由器或主机，将消息中的目标地址改成路由或者主机的地址，将源地址改为网关自己的地址，根据目标地址，将消息发给路由或主机，以此类推一直到目标IP主机收到这个消息。消息回复，使用同样的方法。这样就完成了两台电脑之间的通信。\n\n用什么地址可以唯一标识一台计算机呢？答案是MAC地址，每台计算机在生产的时候都会为其分配一个唯一的一个MAC地址。计算机之间的通信原理大致就是这样，具体细节，会在后面的文章中介绍。接下来，我们来大致理一理这个过程的稍微具体点的实现。\n\n我们分别看看各个计算机的职责：\n\n1. 发起通信的主机，主要职责：\n   * 准备好要发送的用户信息；\n   * 找到目标主机IP地址和本机的IP地址；\n   * 将目标主机的的IP地址添加为信息的目标IP，将自己的IP地址添加为源IP，将其作为一整体，当作一条新的信息；\n   * 找到网关的MAC地址和本机的MAC地址；\n   * 在新的信息上添加网关MAC地址作为目标MAC地址，添加本机MAC地址作为源MAC地址；\n   * 根据目标MAC地址，将消息发送出去。\n2. 网关或者路由，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是，则取出目标IP地址，看看离这个IP最近且与自己直接相连的路由或者主机，找出它的MAC地址，并且和它相连的网络接口，将目标MAC地址修改为最近的路由或者主机的MAC地址，将源MAC地址修改为网关或者路由自己的MAC地址，将消息从找到的网络接口发送出去。\n   * 如果不是，将消息丢弃。\n3. 接收端的主机，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是本机MAC地址，取出目标IP，检查是不是本机IP；\n   * 如果不是本机MAC地址，丢弃此信息，不作后面的解析；\n   * 如果是本机IP地址，则取出信息，进行相应处理；\n   * 如果不是本机IP地址，则丢弃此消息；\n\n从上面的职责，我们可以看出它们的主要职责有，用户信息处理，IP地址处理和MAC地址处理。源主机和目标主机这三个职责都有，只不过是过程向逆，三者都有的职责是IP地址处理和MAC地址处理。所以我们可以将这三个职责抽象出三个独立的处理模块，分别处理各自职责内的事情。将这三个模块组合起来就可以处理整个通信过程。而且从上面的过程可以明显的看出，这些处理过程有着层级关系，为了降低复杂性，我们对网络进行分层，将用户数据处理模块对应为应用层，IP地址处理模块对应为IP层，MAC地址处理模块对应为数据链路层。这就是计算机网络中的分层思想。\n\n小伙伴们看到这，是不是要着急了。计算机网络的书本上明明白白说了OSI参考模型是七层，TCP/IP参考模型是四层，这里只有三层，明显是博主学艺不精。至于OSI参考模型这里就不说了，这个只是参考模型，在实现中并没有采用。TCP/IP参考模型的四层，再加上一层物理层（就是各类物理硬件），我们说的就是这个模型，下面将另外两层补上。\n\n前面只是说到两台主机间的通信，我们忽略了物理设备这层（即各类硬件），把这层加上就足够两台主机通信了（当然这里可靠性之类的细节），也就是说，如果每台计算机只有一个使用网络的程序，那么理论上有这四层就能进行网络通信了，但是我们都知道，每台电脑上都有很多程序在使用网络，这就带了一个问题，计算机收到了来之网络上的信息，这条信息是要交给哪个应用程序的呢？我们可已使用上面的原理再加一层处理，网络分层也加一层，这一层处理的职责是在信息中添加一个ID标记（也就是端口）来标记这条消息是给哪个应用程序的，在接收端，根据这个ID（即端口）将信息交给对应的应用程序。加上这两层，就可以真真正正的实现通信了。\n\n---\n\n### 分层\n\n下面来看看分层：网络协议通常分不同层次进行开发，每一层分别\n负责不同的通信功能。这里不介绍物理层，这一层并非协议分层。\n\n1. 链路层：通常包括操作系统中的设备驱动程序及接口卡。\n2. 网络层：处理分组在网络中的活动，包括协议有：IP、ICMP和IGMP。\n3. 运输层：或者叫做传输层，主要是为两台主机的应用程序提供端到端的通信，包括协议有：TCP和UDP。\n4. 应用层：负责处理特定应用程序的细节，包括协议有：Telnet、FTP、HTTP和e-mail等。\n\n\n用一张图来表示一下TCP/IP协议族中不同层次的协议，协议详情，以后在详陈：\n\n{% asset_img 图四.png 图四 %}\n\n---\n\n### 封装\n\n借助图四中的协议之间的箭头，我们来看看数据的组装（即箭头方向是从上向下的过程）和解析（即箭头方向是从下向上的过程）过程，这里的组装就是现在要将的封装，下一小节要说的分用就是解析过程。\n\n封装过程如下：\n\n1. 用户输入数据给应用程序，比如使用FTP的PWD命令显示当前目录，此时的数据就是：PWD。\n2. FTP应用程序将此命令按FTP协议的规定将用户数据封装成FTP数据：PWD\\r\\r。\n3. FTP将FTP数据交给TCP层，TCP层按照TCP协议加上TCP头，形成新的数据：TCP头+FTP数据。\n4. TCP层将数据传给IP层，IP层按照IP协议加上IP头，形成新的数据：IP头+TCP头+FTP数据。\n5. IP层将数据交给链路层，链路层按照链路层上的协议（一般是以太网协议）加上链路层协议头和链路层尾部，形成新的数据：以太网协议头+IP头+TCP头+FTP数据+以太网尾部。\n\n如下图所示：\n\n{% asset_img 图五.png 图五 %}\n\n---\n\n### 分用\n\n分用正好是封装的逆过程，此过程就不赘述了，这里说一个题外话，由以太网尾部联想到身份证最后一位的含义，它们的作用是一样的，都是一个校验作用。现在就让我们来看看身份证末尾出现X是怎么一回事：\n\n公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。\n\n前面的17位是可以根据地区、出生年月和顺序码确定下来，最有一位的计算方法如下：\n\n1. 将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这17位数字和系数相乘的结果相加。\n3. 用加出来和除以11，看余数是多少？\n4. 余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字。其分别对应的最后一位身份证的号码为1－0－X －9－8－7－6－5－4－3－2。\n\n从上面可以看出由于是对11取余数，所以有11个余数，而一位数只有10个，所以就出现了X。现在你可以用自己的身份证验证一下是不是这样的,如果你计算出来的结果与你身份证最后一位不一样，你的身份证就有问题了。还有一点：倒数第二数字，如果是奇数，则说明这个身份证号码是男性的，偶数则是女性的。\n\n---\n\n参考资料：\n\n1. 《TCP/IP详解：卷一》\n2. [居民身份证号码](http://baike.baidu.com/view/188003.htm)","slug":"计算机网络概述","published":1,"updated":"2015-11-27T01:48:56.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtclr0001f8b9ipo4d5g3"},{"title":"博客名字的来由","date":"2015-02-01T05:41:50.000Z","_content":"\n\n近来脑袋发热，想经营一下博客，看看自己能写出点啥鬼东西。同时，我也想知道自己对一件事情能坚持多久。在此写下开博声明，一来用来告诫自己：“自己吹过的牛，就算糗死，也要吹下去”；二来激励身边更多的小伙伴加入进来。\n\n<!--more-->\n\n---\n\n正事已经说完，现在来聊一聊名字的问题，这么怪异的名字来源与简书中**凤红邪**的一篇短诗：[《史上最中二爆表的四首诗！·郁》](http://www.jianshu.com/p/cc326f492bff)。全诗如下：\n>谁人手中诛心剑，\n>\n>借我斩此纷绪乱。\n>\n>凝悲噎泪为佳人，\n>\n>颦笑盈盈牵肠断。\n>\n>苟活碌碌计得失，\n>\n>诟我赞我如何辨。\n>\n>但恨吾生之已入凡人道，\n>\n>美色声名萦怀抱。\n>\n>困此牢笼不得脱，\n>\n>安共猪狗无为老。\n>\n>撕胸剖腹问此心，\n>\n>生我何用难欢笑。\n>\n>君不见世人多为尘关锁，\n>\n>随欲绝忧能几个。\n>\n>吾独叛世逆众人，\n>\n>礼法陈规皆斩破。\n>\n>命数非天当由我，\n>\n>但求逍遥宁执错。\n>\n>狂歌痛饮日西斜，\n>\n>携酒一壶走天涯。\n>\n>散发赤脚从人谩，\n>\n>醉来眠处即为家。\n>\n>待得沧桑都历尽，\n>\n>心若止水看浮华。\n>\n>却问谁人能自在，\n>\n>皆是<font color=#0099ff size=5 face=\"黑体\">翰海一尘沙。</font>\n\n---\n博客名字就是取自最后一句“却问谁人能自在，皆是翰海一尘沙”。各位看官，以后请不要问我为什么要取这个名字，不为什么，就是恰巧看到了这首诗而已，没有特别的意义。如果非得说有什么意义的话，那就是写这篇博客来练一练Markdown语法。","source":"_posts/博客名字的由来.md","raw":"title: 博客名字的来由\ndate: 2015-02-01 13:41:50\ntags:\n- 杂谈\n- 关于博客\ncategories:\n- 杂谈\n---\n\n\n近来脑袋发热，想经营一下博客，看看自己能写出点啥鬼东西。同时，我也想知道自己对一件事情能坚持多久。在此写下开博声明，一来用来告诫自己：“自己吹过的牛，就算糗死，也要吹下去”；二来激励身边更多的小伙伴加入进来。\n\n<!--more-->\n\n---\n\n正事已经说完，现在来聊一聊名字的问题，这么怪异的名字来源与简书中**凤红邪**的一篇短诗：[《史上最中二爆表的四首诗！·郁》](http://www.jianshu.com/p/cc326f492bff)。全诗如下：\n>谁人手中诛心剑，\n>\n>借我斩此纷绪乱。\n>\n>凝悲噎泪为佳人，\n>\n>颦笑盈盈牵肠断。\n>\n>苟活碌碌计得失，\n>\n>诟我赞我如何辨。\n>\n>但恨吾生之已入凡人道，\n>\n>美色声名萦怀抱。\n>\n>困此牢笼不得脱，\n>\n>安共猪狗无为老。\n>\n>撕胸剖腹问此心，\n>\n>生我何用难欢笑。\n>\n>君不见世人多为尘关锁，\n>\n>随欲绝忧能几个。\n>\n>吾独叛世逆众人，\n>\n>礼法陈规皆斩破。\n>\n>命数非天当由我，\n>\n>但求逍遥宁执错。\n>\n>狂歌痛饮日西斜，\n>\n>携酒一壶走天涯。\n>\n>散发赤脚从人谩，\n>\n>醉来眠处即为家。\n>\n>待得沧桑都历尽，\n>\n>心若止水看浮华。\n>\n>却问谁人能自在，\n>\n>皆是<font color=#0099ff size=5 face=\"黑体\">翰海一尘沙。</font>\n\n---\n博客名字就是取自最后一句“却问谁人能自在，皆是翰海一尘沙”。各位看官，以后请不要问我为什么要取这个名字，不为什么，就是恰巧看到了这首诗而已，没有特别的意义。如果非得说有什么意义的话，那就是写这篇博客来练一练Markdown语法。","slug":"博客名字的由来","published":1,"updated":"2016-07-13T07:03:57.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcmj0006f8b9ikzox39w"},{"title":"单击微信文章进入原文的方法","date":"2016-03-06T06:05:55.000Z","_content":"昨天，一朋友因为我去年帮了她一点小忙而请吃了一顿豪华早茶，表示受之有愧，想想还是将这个方法分享一下。\n\n需求：当公众号向订阅用户推送一篇文章后，用户单击文章直接进入文章的原文，而不是进入微信的一个页面，然后再单击阅读原文才能进入到原文的页面，（这样对于一个有动画效果的H5页面，直接进入原文，可以直接看到动画效果，否则，有些用户点开后进入到微信的一个页面，没有单击阅读原文，从而不会看到动画效果，而且大部分用户都不会点击阅读原文）。如图：\n\n---\n#### 正常的流程：\n第一步：点击阅读原文\n\n{% asset_img 图一.png 图一 %} \n\n<!--more-->\n\n第二步：点击阅读原文\n\n{% asset_img 图二.png 图二 %}  \n\n第三步：到达原网页\n\n{% asset_img 图三.png 图三 %}\n  \n---\n#### 期望流程\n\n第一步：点击阅读原文\n\n{% asset_img 图四.png 图四 %}  \n\n第二步：到达原网页\n\n{% asset_img 图五.png 图五 %}  \n\n---\n\n期望的流程其实在2014年之前注册的公众号是有这个功能的，不过后来腾讯把公众号的好多功能都给限制了，至于其中缘由，我不清楚，也不想知道。那现在的公众号要怎样实现这个功能呢？通过分析有这种效果的公众号文章，发现这是一种“news”类型的消息，但是在微信开发文档的群发接口中：[http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html](http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html)，并没有真正的这种类型的消息，虽然有一种返回结果叫作“news”的东西，但是它并不是我们所期望的东西，还有一种叫作“mpnews”的消息，也不是我们期望的。后来在客服接口[http://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html](http://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html)中发现了这种类型的消息，抱着试一试的心态，居然成功了，当然了现在说起来很简单，但是在探索的阶段，它可是一个磨人的小妖精。\n\n---\n\n下面是用php实现此功能的代码：\n\n```php\n<?php\t\n\tset_time_limit(0);\n\n\tfunction encode2json($str) {\n\t\treturn urldecode(json_encode(url_encode($str)));\t\n\t}\n\n\tfunction url_encode($str) {\n\t\tif(is_array($str)) {\n\t\t\tforeach($str as $key=>$value) {\n\t\t\t\t$str[urlencode($key)] = url_encode($value);\n\t\t\t}\n\t\t} else {\n\t\t\t$str = urlencode($str);\n\t\t}\n\t\t\n\t\treturn $str;\n\t}\n\t\n\tfunction get_curl($url)\n\t{\n\t\tif (!extension_loaded('curl')) {\n            throw new Exception('cURL library is not loaded');\n        }\n\t\t$curl = curl_init();       \n\t\tcurl_setopt($curl, CURLOPT_URL, $url);       \n\t\tcurl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n\t\tcurl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);\n\t\tcurl_setopt($curl, CURLOPT_TIMEOUT, 30); \n\t\tcurl_setopt($curl, CURLOPT_RETURNTRANSFER, true); \n\t\t\n\t\treturn $curl;\n\t}\n\tfunction https_get($url)\n\t{       \n\t\ttry{\n\t\t\t$curl = get_curl($url);\n\t\t}catch(Exception $e){\n\t\t\tdie($e->getMessage());\n\t\t}\n\t\t$data = curl_exec($curl);       \n\t\tif (curl_errno($curl)) {\n\t\t\t$data = encode2json(array('error' => curl_error($curl)));\n\t\t}       \n\t\tcurl_close($curl);       \n\t\treturn $data;\n\t}\n\tfunction https_post($url, $data) {\n\t\ttry{\n\t\t\t$curl = get_curl($url);\n\t\t}catch(Exception $e){\n\t\t\tdie($e->getMessage());\n\t\t}\n\t\t$data_string = encode2json($data);\n\t\tcurl_setopt($curl, CURLOPT_POST, 1);\n\t\tcurl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);\n\t\tcurl_setopt($curl, CURLOPT_HTTPHEADER, array(\n\t\t\t'Content-Type: application/json; charset=utf-8',\n\t\t\t'Content-Length: ' . strlen($data_string))\n\t\t);\n\t\t$data = curl_exec($curl);       \n\t\tif (curl_errno($curl)) {\n\t\t\t$data = encode2json(array('error' => curl_error($curl)));\n\t\t}       \n\t\tcurl_close($curl);       \n\t\treturn $data;\n\t}\n\t\n\t//参考文档：http://mp.weixin.qq.com/wiki/14/9f9c82c1af308e3b14ba9b973f99a8ba.html\n\tfunction get_wechat_token()\n\t{\n\t\t$appid = \"xxxxxxxxxxxxxxxxxx\";\n\t\t$appsecret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n\t\t\n\t\t$url = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=$appid&secret=$appsecret\";\n\t\t\n\t\t$result = json_decode(https_get($url));\n\t\tif(property_exists($result,'error')){\n\t\t\tdie($result->error);\n\t\t}\n\t\t\n\t\tif(!property_exists($result,'access_token')){\n\t\t\tdie('Get wechat token failed!');\n\t\t}\n\t\t\n\t\tprint_r($result);\n\t\techo \"<br />\";\n\t\treturn $result->access_token;\n\t}\n\t\n\t//参考文档：http://mp.weixin.qq.com/wiki/12/54773ff6da7b8bdc95b7d2667d84b1d4.html\n\tfunction get_brocast_user($token)\n\t{\n\t\t$url = \"https://api.weixin.qq.com/cgi-bin/user/get?access_token=$token&next_openid=\";\n\t\t$result = json_decode(https_get($url));\n\t\tif(property_exists($result,'error')){\n\t\t\tdie($result->error);\n\t\t}\n\t\tif(!property_exists($result,'data')){\n\t\t\tdie('Get wechat user failed!');\n\t\t}\n\t\t\t \n\t\treturn $result->data->openid;\t\t// 获得所有用户的Openid\n\t}\n\t\n\t//参考文档：\n\t//\t\t1、接口文档：http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html\n\t//\t\t2、news类型的消息（即：'msgtype'=>'news'）参考文档：\t\n\t//\t\t\t\thttp://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html\n\tfunction send_news($access_token,$arr)\n\t{\n\t\t$url  = \"https://api.weixin.qq.com/cgi-bin/message/mass/send?access_token=$access_token\";\n\t\t$data = array(\n\t\t\t\t\t'touser'=>$arr,\n\t\t\t\t\t'msgtype'=>'news',\n\t\t\t\t\t'news'=>array(\n\t\t\t\t\t\t'articles'=>array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'title'=>'单击微信文章进入原文的方法',\n\t\t\t\t\t\t\t\t'description'=>'微信公众号文章无需单击阅读原文直接进入到原文的方法',\n\t\t\t\t\t\t\t\t'url'=>'http://t.cn/RGQwXwp',\n\t\t\t\t\t\t\t\t'picurl'=>'http://t.cn/RGQwaVW'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t); \n\n\t\t$return_content = https_post($url, $data);\n\t\tprint_r($return_content);\n\t\techo \"<br />\";\n\t}\n\t\n\t$access_token = get_wechat_token();\n\t$users = get_brocast_user($access_token);\n\tsend_news($access_token,$users);\n?>\n\n```\n\n代码中的$appid = \"xxxxxxxxxxxxxxxxxx\";$appsecret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";可以从微信公众平台的后台的“开发”菜单下的“基本配置”中得到，如图：\n\n{% asset_img 图六.png 图六 %}  \n\n","source":"_posts/单击微信文章进入原文的方法.md","raw":"title: 单击微信文章进入原文的方法\ntags:\n  - 微信开发\ncategories:\n  - 微信开发\ndate: 2016-03-06 14:05:55\n---\n昨天，一朋友因为我去年帮了她一点小忙而请吃了一顿豪华早茶，表示受之有愧，想想还是将这个方法分享一下。\n\n需求：当公众号向订阅用户推送一篇文章后，用户单击文章直接进入文章的原文，而不是进入微信的一个页面，然后再单击阅读原文才能进入到原文的页面，（这样对于一个有动画效果的H5页面，直接进入原文，可以直接看到动画效果，否则，有些用户点开后进入到微信的一个页面，没有单击阅读原文，从而不会看到动画效果，而且大部分用户都不会点击阅读原文）。如图：\n\n---\n#### 正常的流程：\n第一步：点击阅读原文\n\n{% asset_img 图一.png 图一 %} \n\n<!--more-->\n\n第二步：点击阅读原文\n\n{% asset_img 图二.png 图二 %}  \n\n第三步：到达原网页\n\n{% asset_img 图三.png 图三 %}\n  \n---\n#### 期望流程\n\n第一步：点击阅读原文\n\n{% asset_img 图四.png 图四 %}  \n\n第二步：到达原网页\n\n{% asset_img 图五.png 图五 %}  \n\n---\n\n期望的流程其实在2014年之前注册的公众号是有这个功能的，不过后来腾讯把公众号的好多功能都给限制了，至于其中缘由，我不清楚，也不想知道。那现在的公众号要怎样实现这个功能呢？通过分析有这种效果的公众号文章，发现这是一种“news”类型的消息，但是在微信开发文档的群发接口中：[http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html](http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html)，并没有真正的这种类型的消息，虽然有一种返回结果叫作“news”的东西，但是它并不是我们所期望的东西，还有一种叫作“mpnews”的消息，也不是我们期望的。后来在客服接口[http://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html](http://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html)中发现了这种类型的消息，抱着试一试的心态，居然成功了，当然了现在说起来很简单，但是在探索的阶段，它可是一个磨人的小妖精。\n\n---\n\n下面是用php实现此功能的代码：\n\n```php\n<?php\t\n\tset_time_limit(0);\n\n\tfunction encode2json($str) {\n\t\treturn urldecode(json_encode(url_encode($str)));\t\n\t}\n\n\tfunction url_encode($str) {\n\t\tif(is_array($str)) {\n\t\t\tforeach($str as $key=>$value) {\n\t\t\t\t$str[urlencode($key)] = url_encode($value);\n\t\t\t}\n\t\t} else {\n\t\t\t$str = urlencode($str);\n\t\t}\n\t\t\n\t\treturn $str;\n\t}\n\t\n\tfunction get_curl($url)\n\t{\n\t\tif (!extension_loaded('curl')) {\n            throw new Exception('cURL library is not loaded');\n        }\n\t\t$curl = curl_init();       \n\t\tcurl_setopt($curl, CURLOPT_URL, $url);       \n\t\tcurl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n\t\tcurl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);\n\t\tcurl_setopt($curl, CURLOPT_TIMEOUT, 30); \n\t\tcurl_setopt($curl, CURLOPT_RETURNTRANSFER, true); \n\t\t\n\t\treturn $curl;\n\t}\n\tfunction https_get($url)\n\t{       \n\t\ttry{\n\t\t\t$curl = get_curl($url);\n\t\t}catch(Exception $e){\n\t\t\tdie($e->getMessage());\n\t\t}\n\t\t$data = curl_exec($curl);       \n\t\tif (curl_errno($curl)) {\n\t\t\t$data = encode2json(array('error' => curl_error($curl)));\n\t\t}       \n\t\tcurl_close($curl);       \n\t\treturn $data;\n\t}\n\tfunction https_post($url, $data) {\n\t\ttry{\n\t\t\t$curl = get_curl($url);\n\t\t}catch(Exception $e){\n\t\t\tdie($e->getMessage());\n\t\t}\n\t\t$data_string = encode2json($data);\n\t\tcurl_setopt($curl, CURLOPT_POST, 1);\n\t\tcurl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);\n\t\tcurl_setopt($curl, CURLOPT_HTTPHEADER, array(\n\t\t\t'Content-Type: application/json; charset=utf-8',\n\t\t\t'Content-Length: ' . strlen($data_string))\n\t\t);\n\t\t$data = curl_exec($curl);       \n\t\tif (curl_errno($curl)) {\n\t\t\t$data = encode2json(array('error' => curl_error($curl)));\n\t\t}       \n\t\tcurl_close($curl);       \n\t\treturn $data;\n\t}\n\t\n\t//参考文档：http://mp.weixin.qq.com/wiki/14/9f9c82c1af308e3b14ba9b973f99a8ba.html\n\tfunction get_wechat_token()\n\t{\n\t\t$appid = \"xxxxxxxxxxxxxxxxxx\";\n\t\t$appsecret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n\t\t\n\t\t$url = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=$appid&secret=$appsecret\";\n\t\t\n\t\t$result = json_decode(https_get($url));\n\t\tif(property_exists($result,'error')){\n\t\t\tdie($result->error);\n\t\t}\n\t\t\n\t\tif(!property_exists($result,'access_token')){\n\t\t\tdie('Get wechat token failed!');\n\t\t}\n\t\t\n\t\tprint_r($result);\n\t\techo \"<br />\";\n\t\treturn $result->access_token;\n\t}\n\t\n\t//参考文档：http://mp.weixin.qq.com/wiki/12/54773ff6da7b8bdc95b7d2667d84b1d4.html\n\tfunction get_brocast_user($token)\n\t{\n\t\t$url = \"https://api.weixin.qq.com/cgi-bin/user/get?access_token=$token&next_openid=\";\n\t\t$result = json_decode(https_get($url));\n\t\tif(property_exists($result,'error')){\n\t\t\tdie($result->error);\n\t\t}\n\t\tif(!property_exists($result,'data')){\n\t\t\tdie('Get wechat user failed!');\n\t\t}\n\t\t\t \n\t\treturn $result->data->openid;\t\t// 获得所有用户的Openid\n\t}\n\t\n\t//参考文档：\n\t//\t\t1、接口文档：http://mp.weixin.qq.com/wiki/15/40b6865b893947b764e2de8e4a1fb55f.html\n\t//\t\t2、news类型的消息（即：'msgtype'=>'news'）参考文档：\t\n\t//\t\t\t\thttp://mp.weixin.qq.com/wiki/11/c88c270ae8935291626538f9c64bd123.html\n\tfunction send_news($access_token,$arr)\n\t{\n\t\t$url  = \"https://api.weixin.qq.com/cgi-bin/message/mass/send?access_token=$access_token\";\n\t\t$data = array(\n\t\t\t\t\t'touser'=>$arr,\n\t\t\t\t\t'msgtype'=>'news',\n\t\t\t\t\t'news'=>array(\n\t\t\t\t\t\t'articles'=>array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'title'=>'单击微信文章进入原文的方法',\n\t\t\t\t\t\t\t\t'description'=>'微信公众号文章无需单击阅读原文直接进入到原文的方法',\n\t\t\t\t\t\t\t\t'url'=>'http://t.cn/RGQwXwp',\n\t\t\t\t\t\t\t\t'picurl'=>'http://t.cn/RGQwaVW'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t); \n\n\t\t$return_content = https_post($url, $data);\n\t\tprint_r($return_content);\n\t\techo \"<br />\";\n\t}\n\t\n\t$access_token = get_wechat_token();\n\t$users = get_brocast_user($access_token);\n\tsend_news($access_token,$users);\n?>\n\n```\n\n代码中的$appid = \"xxxxxxxxxxxxxxxxxx\";$appsecret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";可以从微信公众平台的后台的“开发”菜单下的“基本配置”中得到，如图：\n\n{% asset_img 图六.png 图六 %}  \n\n","slug":"单击微信文章进入原文的方法","published":1,"updated":"2016-03-23T03:43:05.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcmp000df8b9xn1v7sh6"},{"title":"别样的进制","date":"2016-06-05T16:09:05.000Z","_content":"\n\n在[《别样的整数表示和运算》](http://t.cn/R5qdeVp)中遗留了一个问题——进制转换问题。在进入今天的主题前，先给一个趣题让大家思考一下：\n\n{% blockquote 知乎老鼠与毒药问题 https://www.zhihu.com/question/19676641%}\n\n老鼠与毒药升级版：有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有三星期的时间进行实验，在某轮实验中死掉的老鼠，无法继续参与之后的实验。为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？\n\n{% endblockquote %}\n\n<!--more-->\n\n### 1、从十进制说起\n\n什么叫进制，进制又叫[进位制(下面定义来自中文维基百科)](https://zh.wikipedia.org/wiki/进位制)是一种记数方式，亦称进位计数法或位值计数法。利用这种记数法，可以使用有限种数字符号来表示所有的数值。一种进位制中可以使用的数字符号的数目称为这种进位制的基数或底数。若一个进位制的基数为n，即可称之为n进位制，简称n进制。现在最常用的进位制是十进制，这种进位制通常使用10个阿拉伯数字（即0-9）进行记数。\n\n我们可以用不同的进位制来表示同一个数。比如：十进数57(10)，可以用二进制表示为111001(2)，也可以用五进制表示为212(5)，同时也可以用八进制表示为71(8)、亦可用十六进制表示为39(16)，它们所代表的数值都是一样的。\n\n在10进制中有10个数字(0 - 9)，比如\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle 2506=2\\times 10^{3}+5\\times 10^{2}+0\\times 10^{1}+6\\times 10^{0}} \" type=\"image/svg+xml\" />\n\n在16进制中有16个数字(0–9 和 A–F)，比如\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle 171B=1\\times 16^{3}+7\\times 16^{2}+1\\times 16^{1}+B\\times 16^{0}}\" type=\"image/svg+xml\" />\n\n  (这里用字符B表示数字11)\n一般说来，b进制有b个数字，如果<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle a_{3},a_{2},a_{1},a_{0}}\" type=\"image/svg+xml\" /> 是其中四个数字，那么就有\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{3}a_{2}a_{1}a_{0}=a_{3}\\times b^{3}+a_{2}\\times b^{2}+a_{1}\\times b^{1}+a_{0}\\times b^{0}}\" type=\"image/svg+xml\" />(注意，<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{3}a_{2}a_{1}a_{0}}\" type=\"image/svg+xml\" /> 表示一个数字序列, 而不是数字的相乘)\n\n\n看完上面的定义，我不禁想到，所谓进位制，其实就是跟数表示与数字所在位置有关，在不同的位置上的数字代表了不同量级的大小。这与我们最开始的掰手指不同，掰手指无论你从左边掰到右边，还是从右边掰到左边，我们都是把所有手指代表的大小认为是相等的，且为1，然后用加法一个一个加起来，得到用掰手指代表的数。这就是在进位制出现之前，我们的祖先使用的计数方法，这是对数的一个初级抽象，这种例子还有很多，比如罗马人用I代表1，用V代表5，X代表10，L代表50，C代表100，D代表500，M代表1000，再往上就没了，罗马人要表示2就是用II，要表示100万的话，他们就要拼命话M了。不过罗马数字中也有一个跟位置有关的计数方法，比如：7他们就用VII（I在V右边用V+II=5+2），4用IV（I在V左边用V-I=5-1）表示或者IIII表示。\n\n大家都发现了这种计数方式麻烦了，要表示一个大一点的数要写好久，而且很费纸。于是印度人发明的包括0在内的10个阿拉伯数字的阿拉伯数表示法得到了大家的青睐。这种表示法书写简单，也就是我们现在使用的10进制数。\n\n说明了10进制数的来由，那现在我们深入讨论10进制的含义。10进制，只用0、1、2、3、4、5、6、7、8、9（当然，你还可以使用其它10个符号，比如a、b、c、d、e、f、g、h、i、j）这10个符号来表示所以的数，为什么是10个符号，估计多少跟我们有10根手指有关。如果只用一个符号来表示数，它只能让我们区分出10个数，如果要表示与前面不同的第11个数，我们就必须使用两字符来表示，这就是为什么说逢十进一，两个符号来表示，又有很多种情况，为了使表示有规律性，我们就规定数字位置的顺序，最右边的符号表示是用一个符号表示的那10个数，在这个符号的左边那一个符号又可以像这个符号一样表示10种情况，只不过它表示的基数是10了，这个概念就是我们所说的**个十百千万位**。使用这个统一的规律进行下去，我们就可以轻易的表示很大的数，而且很简单，上面定义中已经有数学抽象了，这里省略这部分。\n\n### 2、其他进制\n\n上面已经讨论了10进制的来由和规律，那么我们考虑一下这么一种情况：假如，在外太空有一个类似人类的智能物种，他们也有两只手，每只手只有4根手指，所以他们总共只有8根手指。那么现在问题来了，他们计数系统是什么样的呢？这里有一种可能就是跟我们使用技术系统类似，他们使用8个符号来表示所有的数，比如使用如下八个符号：a、b、c、d、e、f、g、h来表示。假如在未来的某天，我们跟这个星球的外星人建立的深厚的友谊，我们可以使用我们的资源与他们的资源进行交换。有一个外星人向你买一个东西，这个东西要15块钱（假设汇率是1），这时你该向他说要多少钱呢？\n\n要回答这问题，我们先来看看他们的计数系统的表示方法。与10进制类似的，只有8个符号，如果只用一个符号表示，最多能表示8个不同的数，如果要表示所有的数，必须使用多个符号，为了方便表示，引进位的概念，每一个位代表不同的量级，比如：a表示没有东西也就是数0，ba表示第九个数，由于包括0在内，所以第九个数就是我们10进制的8，由此，我们就能建立起一个类似10进制的8进制数的表示方式。抽象成数学概念就是：八进制就是用a、b、c、d、e、f、g、h不可拆分的基数通过位权（权值为8）来表示所有的数的计数方法。用公式表示就是\n<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle a_{n},\\dots,a_{2},a_{1},a_{0}\\in\\{a,b,c,d,e,f,g,h\\}}\" type=\"image/svg+xml\" />，\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{n}\\dots a_{2}a_{1}a_{0}=a_{n}\\times 8^{n}+\\dots +a_{2}\\times 8^{2}+a_{1}\\times 8^{1}+a_{0}\\times 8^{0}} \" type=\"image/svg+xml\" />;\n\n现在回到刚刚那个问题，问题的本质就是问如何用8进制数表示10进制数15，所谓要进行转换，最关键的点是他们表示的数量是一样的，所以我们可得到下面这个公式：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{n}\\dots a_{2}a_{1}a_{0}=a_{n}\\times 8^{n}+\\dots+a_{2}\\times 8^{2}+a_{1}\\times 8^{1}+a_{0}\\times 8^{0}=x}\" type=\"image/svg+xml\" />;其中x就是十进制数。\n\n将公式变一下形：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{n}\\dots a_{2}a_{1}a_{0}=8\\times (8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1})+a_{0}=x}\" type=\"image/svg+xml\" />;\n\n现在我们把x除以8，由于\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle x=8\\times (8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1})+a_{0}}\" type=\"image/svg+xml\" />;\n所以有：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle x\\div 8=(8\\times (8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1})+a_{0})\\div 8=8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1}\\cdots a_{0}}\" type=\"image/svg+xml\" />，\n商是：<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle 8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1}}\" type=\"image/svg+xml\" />,\n余数是：<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{0}}\" type=\"image/svg+xml\" />;\n\n以此类推下去，可以依次得到<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle a_{0},a_{1},a_{2}\\dots,a_{n}}\" type=\"image/svg+xml\" />。\n\n这就是为什么在很多计算机教科书中进制转换的数学原理，教科书中只说了，用十进制数除以要转换为的进制数的权值，求出商和余数，然后再用商除以权值，求出商和余数，直至商为0，最后将余数倒过来写就是我吗要转换的结果。下面示范一下：\n\n1、<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle 15\\div 8=1\\cdots 7}\" type=\"image/svg+xml\" />,商是1，余数是7；\n2、<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle 1\\div 8=0\\cdots 1}\" type=\"image/svg+xml\" />，用上次的商除以8，此次商为0，余数1\n3、最后把求得的余数从后面最后余数向第一余数写下来：17，这就是结果，当然我们之前的协定是用a、b、c、d、e、f、g、h来表示，所以就是bh，这里不用0~7表示的原因是，这只是符号而已，不要被以前的思维定势绑架了自己，我们应该释放自己的想象力。\n\n在生活中其实还有好多进制，比如12进制、24进制、60进制等等，有兴趣的小伙伴，可以自己玩玩这些进制的表示和转换。请注意了，我们这里的转换都是用10进制作为跳板进行的，如果你想从8进制直接和12进制进行转换，你可以尝试一下有没有什么规律，找到了顺便告诉我一下。\n\n===========\n2016年6月6号10时更新：\n其他进制之间也是可以直接转换的，只要你有相应的进制的乘法表。\n\n===========\n\n### 3、回答老鼠和毒药问题\n\n老鼠与毒药升级版：有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有三星期的时间进行实验，在某轮实验中死掉的老鼠，无法继续参与之后的实验。为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？\n\n如果我们使用某种进制的数对这1000平液体进行编码，每一次实验都可以用一只老鼠来负责某一位的某个符号的检测，如果老鼠不幸牺牲了，说明这一位就是这个符号，这一位不需要进行下面的的实验了，如果老鼠没事，那让老鼠再接再厉，继续对这一位进行检查。最后就能确定是哪个数，也就能找到对应的瓶子，那问题就转变成了，用什么进制进行编码，最大数（这里是1000）在这种编码下一共要多少位字符表示，就要多少只老鼠。\n\n由于只有三个星期的时间，只能做3此次实验。也就是说每一位都只有3中情况，很容易就想到了用三进制来对1~1000进行编码，如下：\n\n{% asset_img 图一.png 图一 %}\n\n1、第一周，让这七只都喝相应位为0的瓶子中的液体，比如：老鼠1喝1~6等，老鼠7喝3，……，996，999，如图，用红线圈起来的。\n\n{% asset_img 图二.png 图二 %}\n\n2、一周后，如果老鼠1牺牲了，那么可以确定有毒那瓶的编码最高位是0，那么这个编号就是0xxxxxx。那么接下来，让剩下的6只老鼠依旧喝之前负责的那一位上符号为1的液体，比如：老鼠2喝995~1000等，如图，用红线圈起来的。\n\n{% asset_img 图三.png 图三 %}\n\n3、两周后，如果老鼠4牺牲了，那么可以确定有毒那瓶的编码从右边数第四位是1，那么这个编号就是0xx1xxx。那么接下来，让剩下的5只老鼠依旧喝之前负责的那一位上符号为2的液体，比如：老鼠5喝995~998等，如图，用红线圈起来的。\n\n{% asset_img 图四.png 图四 %}\n\n4、三周后，老鼠2、3、5、6、7应该都会牺牲，那么可以确定有毒那瓶的编码的2、3、5、6、7位是2，那么这个编号就是0221222，也就是701号那瓶是有毒液体，为什么呢？因为，通过前两周的实验，我们已经排除了有毒液体编号在2、3、5、6、7位上是0和1的可能性，否则，老鼠2、3、5、6、7在前两次实验中就应该牺牲了。所以第三周的实验是浪费掉的，还把所有老鼠害死了。\n\n所以，我们可以设计的方案是有问题的，进行三次实验，其实要用四进制来表示1~1000这些数，这样我们只需要使用5只老鼠，具体步骤不详写了，有兴趣的小伙伴可以自己去推演一遍。\n\n","source":"_posts/别样的进制.md","raw":"title: 别样的进制\ntags:\n  - 计算机基础\n  - 数学\ncategories:\n  - 计算机基础\ndate: 2016-06-06 00:09:05\n---\n\n\n在[《别样的整数表示和运算》](http://t.cn/R5qdeVp)中遗留了一个问题——进制转换问题。在进入今天的主题前，先给一个趣题让大家思考一下：\n\n{% blockquote 知乎老鼠与毒药问题 https://www.zhihu.com/question/19676641%}\n\n老鼠与毒药升级版：有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有三星期的时间进行实验，在某轮实验中死掉的老鼠，无法继续参与之后的实验。为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？\n\n{% endblockquote %}\n\n<!--more-->\n\n### 1、从十进制说起\n\n什么叫进制，进制又叫[进位制(下面定义来自中文维基百科)](https://zh.wikipedia.org/wiki/进位制)是一种记数方式，亦称进位计数法或位值计数法。利用这种记数法，可以使用有限种数字符号来表示所有的数值。一种进位制中可以使用的数字符号的数目称为这种进位制的基数或底数。若一个进位制的基数为n，即可称之为n进位制，简称n进制。现在最常用的进位制是十进制，这种进位制通常使用10个阿拉伯数字（即0-9）进行记数。\n\n我们可以用不同的进位制来表示同一个数。比如：十进数57(10)，可以用二进制表示为111001(2)，也可以用五进制表示为212(5)，同时也可以用八进制表示为71(8)、亦可用十六进制表示为39(16)，它们所代表的数值都是一样的。\n\n在10进制中有10个数字(0 - 9)，比如\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle 2506=2\\times 10^{3}+5\\times 10^{2}+0\\times 10^{1}+6\\times 10^{0}} \" type=\"image/svg+xml\" />\n\n在16进制中有16个数字(0–9 和 A–F)，比如\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle 171B=1\\times 16^{3}+7\\times 16^{2}+1\\times 16^{1}+B\\times 16^{0}}\" type=\"image/svg+xml\" />\n\n  (这里用字符B表示数字11)\n一般说来，b进制有b个数字，如果<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle a_{3},a_{2},a_{1},a_{0}}\" type=\"image/svg+xml\" /> 是其中四个数字，那么就有\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{3}a_{2}a_{1}a_{0}=a_{3}\\times b^{3}+a_{2}\\times b^{2}+a_{1}\\times b^{1}+a_{0}\\times b^{0}}\" type=\"image/svg+xml\" />(注意，<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{3}a_{2}a_{1}a_{0}}\" type=\"image/svg+xml\" /> 表示一个数字序列, 而不是数字的相乘)\n\n\n看完上面的定义，我不禁想到，所谓进位制，其实就是跟数表示与数字所在位置有关，在不同的位置上的数字代表了不同量级的大小。这与我们最开始的掰手指不同，掰手指无论你从左边掰到右边，还是从右边掰到左边，我们都是把所有手指代表的大小认为是相等的，且为1，然后用加法一个一个加起来，得到用掰手指代表的数。这就是在进位制出现之前，我们的祖先使用的计数方法，这是对数的一个初级抽象，这种例子还有很多，比如罗马人用I代表1，用V代表5，X代表10，L代表50，C代表100，D代表500，M代表1000，再往上就没了，罗马人要表示2就是用II，要表示100万的话，他们就要拼命话M了。不过罗马数字中也有一个跟位置有关的计数方法，比如：7他们就用VII（I在V右边用V+II=5+2），4用IV（I在V左边用V-I=5-1）表示或者IIII表示。\n\n大家都发现了这种计数方式麻烦了，要表示一个大一点的数要写好久，而且很费纸。于是印度人发明的包括0在内的10个阿拉伯数字的阿拉伯数表示法得到了大家的青睐。这种表示法书写简单，也就是我们现在使用的10进制数。\n\n说明了10进制数的来由，那现在我们深入讨论10进制的含义。10进制，只用0、1、2、3、4、5、6、7、8、9（当然，你还可以使用其它10个符号，比如a、b、c、d、e、f、g、h、i、j）这10个符号来表示所以的数，为什么是10个符号，估计多少跟我们有10根手指有关。如果只用一个符号来表示数，它只能让我们区分出10个数，如果要表示与前面不同的第11个数，我们就必须使用两字符来表示，这就是为什么说逢十进一，两个符号来表示，又有很多种情况，为了使表示有规律性，我们就规定数字位置的顺序，最右边的符号表示是用一个符号表示的那10个数，在这个符号的左边那一个符号又可以像这个符号一样表示10种情况，只不过它表示的基数是10了，这个概念就是我们所说的**个十百千万位**。使用这个统一的规律进行下去，我们就可以轻易的表示很大的数，而且很简单，上面定义中已经有数学抽象了，这里省略这部分。\n\n### 2、其他进制\n\n上面已经讨论了10进制的来由和规律，那么我们考虑一下这么一种情况：假如，在外太空有一个类似人类的智能物种，他们也有两只手，每只手只有4根手指，所以他们总共只有8根手指。那么现在问题来了，他们计数系统是什么样的呢？这里有一种可能就是跟我们使用技术系统类似，他们使用8个符号来表示所有的数，比如使用如下八个符号：a、b、c、d、e、f、g、h来表示。假如在未来的某天，我们跟这个星球的外星人建立的深厚的友谊，我们可以使用我们的资源与他们的资源进行交换。有一个外星人向你买一个东西，这个东西要15块钱（假设汇率是1），这时你该向他说要多少钱呢？\n\n要回答这问题，我们先来看看他们的计数系统的表示方法。与10进制类似的，只有8个符号，如果只用一个符号表示，最多能表示8个不同的数，如果要表示所有的数，必须使用多个符号，为了方便表示，引进位的概念，每一个位代表不同的量级，比如：a表示没有东西也就是数0，ba表示第九个数，由于包括0在内，所以第九个数就是我们10进制的8，由此，我们就能建立起一个类似10进制的8进制数的表示方式。抽象成数学概念就是：八进制就是用a、b、c、d、e、f、g、h不可拆分的基数通过位权（权值为8）来表示所有的数的计数方法。用公式表示就是\n<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle a_{n},\\dots,a_{2},a_{1},a_{0}\\in\\{a,b,c,d,e,f,g,h\\}}\" type=\"image/svg+xml\" />，\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{n}\\dots a_{2}a_{1}a_{0}=a_{n}\\times 8^{n}+\\dots +a_{2}\\times 8^{2}+a_{1}\\times 8^{1}+a_{0}\\times 8^{0}} \" type=\"image/svg+xml\" />;\n\n现在回到刚刚那个问题，问题的本质就是问如何用8进制数表示10进制数15，所谓要进行转换，最关键的点是他们表示的数量是一样的，所以我们可得到下面这个公式：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{n}\\dots a_{2}a_{1}a_{0}=a_{n}\\times 8^{n}+\\dots+a_{2}\\times 8^{2}+a_{1}\\times 8^{1}+a_{0}\\times 8^{0}=x}\" type=\"image/svg+xml\" />;其中x就是十进制数。\n\n将公式变一下形：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{n}\\dots a_{2}a_{1}a_{0}=8\\times (8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1})+a_{0}=x}\" type=\"image/svg+xml\" />;\n\n现在我们把x除以8，由于\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle x=8\\times (8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1})+a_{0}}\" type=\"image/svg+xml\" />;\n所以有：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle x\\div 8=(8\\times (8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1})+a_{0})\\div 8=8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1}\\cdots a_{0}}\" type=\"image/svg+xml\" />，\n商是：<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle 8\\times (\\dots (8\\times a_{n} + a_{n-1})\\dots ) + a_{1}}\" type=\"image/svg+xml\" />,\n余数是：<embed src=\"http://latex.codecogs.com/svg.latex?{\\displaystyle a_{0}}\" type=\"image/svg+xml\" />;\n\n以此类推下去，可以依次得到<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle a_{0},a_{1},a_{2}\\dots,a_{n}}\" type=\"image/svg+xml\" />。\n\n这就是为什么在很多计算机教科书中进制转换的数学原理，教科书中只说了，用十进制数除以要转换为的进制数的权值，求出商和余数，然后再用商除以权值，求出商和余数，直至商为0，最后将余数倒过来写就是我吗要转换的结果。下面示范一下：\n\n1、<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle 15\\div 8=1\\cdots 7}\" type=\"image/svg+xml\" />,商是1，余数是7；\n2、<embed src=\"http://latex.codecogs.com/svg.latex? {\\displaystyle 1\\div 8=0\\cdots 1}\" type=\"image/svg+xml\" />，用上次的商除以8，此次商为0，余数1\n3、最后把求得的余数从后面最后余数向第一余数写下来：17，这就是结果，当然我们之前的协定是用a、b、c、d、e、f、g、h来表示，所以就是bh，这里不用0~7表示的原因是，这只是符号而已，不要被以前的思维定势绑架了自己，我们应该释放自己的想象力。\n\n在生活中其实还有好多进制，比如12进制、24进制、60进制等等，有兴趣的小伙伴，可以自己玩玩这些进制的表示和转换。请注意了，我们这里的转换都是用10进制作为跳板进行的，如果你想从8进制直接和12进制进行转换，你可以尝试一下有没有什么规律，找到了顺便告诉我一下。\n\n===========\n2016年6月6号10时更新：\n其他进制之间也是可以直接转换的，只要你有相应的进制的乘法表。\n\n===========\n\n### 3、回答老鼠和毒药问题\n\n老鼠与毒药升级版：有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有三星期的时间进行实验，在某轮实验中死掉的老鼠，无法继续参与之后的实验。为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？\n\n如果我们使用某种进制的数对这1000平液体进行编码，每一次实验都可以用一只老鼠来负责某一位的某个符号的检测，如果老鼠不幸牺牲了，说明这一位就是这个符号，这一位不需要进行下面的的实验了，如果老鼠没事，那让老鼠再接再厉，继续对这一位进行检查。最后就能确定是哪个数，也就能找到对应的瓶子，那问题就转变成了，用什么进制进行编码，最大数（这里是1000）在这种编码下一共要多少位字符表示，就要多少只老鼠。\n\n由于只有三个星期的时间，只能做3此次实验。也就是说每一位都只有3中情况，很容易就想到了用三进制来对1~1000进行编码，如下：\n\n{% asset_img 图一.png 图一 %}\n\n1、第一周，让这七只都喝相应位为0的瓶子中的液体，比如：老鼠1喝1~6等，老鼠7喝3，……，996，999，如图，用红线圈起来的。\n\n{% asset_img 图二.png 图二 %}\n\n2、一周后，如果老鼠1牺牲了，那么可以确定有毒那瓶的编码最高位是0，那么这个编号就是0xxxxxx。那么接下来，让剩下的6只老鼠依旧喝之前负责的那一位上符号为1的液体，比如：老鼠2喝995~1000等，如图，用红线圈起来的。\n\n{% asset_img 图三.png 图三 %}\n\n3、两周后，如果老鼠4牺牲了，那么可以确定有毒那瓶的编码从右边数第四位是1，那么这个编号就是0xx1xxx。那么接下来，让剩下的5只老鼠依旧喝之前负责的那一位上符号为2的液体，比如：老鼠5喝995~998等，如图，用红线圈起来的。\n\n{% asset_img 图四.png 图四 %}\n\n4、三周后，老鼠2、3、5、6、7应该都会牺牲，那么可以确定有毒那瓶的编码的2、3、5、6、7位是2，那么这个编号就是0221222，也就是701号那瓶是有毒液体，为什么呢？因为，通过前两周的实验，我们已经排除了有毒液体编号在2、3、5、6、7位上是0和1的可能性，否则，老鼠2、3、5、6、7在前两次实验中就应该牺牲了。所以第三周的实验是浪费掉的，还把所有老鼠害死了。\n\n所以，我们可以设计的方案是有问题的，进行三次实验，其实要用四进制来表示1~1000这些数，这样我们只需要使用5只老鼠，具体步骤不详写了，有兴趣的小伙伴可以自己去推演一遍。\n\n","slug":"别样的进制","published":1,"updated":"2016-06-06T02:18:48.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcnj000if8b9a73g2x58"},{"title":"别样的整数表示和运算","date":"2016-06-04T15:47:02.000Z","_content":"\n\n最近进入懒癌晚期，拖延症重症期，总惦记着让自己写点东西，然而回头一看，已经将近两个月没写东西，看书也开始打瞌睡，彻底进入老年人模式。细思极恐，鼓起勇气，把最近吹着电扇，抠着脚丫看的些东西记录一下。此文涉及的知识非常简单，主要是涉及小学整数加减运算。\n\n主要是温习一下计算机基础知识，计算机的信息表示和处理基础二进制整数的表示和运算。不过，我不打算照着书本介绍一下二进制，今天我们使用我们熟知的十进制（也就是我们平时使用的数）来介绍其中的原理。这样做的好处有很多：1、对于不熟悉二进制的或者说不熟悉进制的读者也可以理解一二，而不用多费口舌去介绍进制的概念；2、使用十进制，可以让自己对书本上的原理有更好的理解；3、使用十进制，可以让自己增进对知识的迁移能力，已达到触类旁通等等。\n\n### 1、小学一年级加法（十以内加法）\n\n请注意了，各位童鞋，请用掰手指的方法告诉下面这道题加法题的答案\n\n**题目1：3+5=？**\n\n\n有八根手指对吧。再来\n\n**题目2：6+7=？**\n\n\n多少？13？你确定你是13吗？请问你真的有13根手指吗？反正我是只看到了3根手指，我的答案是3。这不禁让人感叹人生苦短，在有限的时间范围之内，你想得到的越多，反而拥有的会越少。一不小心又变成了鸡汤小短文，寓言小故事。\n<!--more-->\n### 2、小学二年级加减法（一百以内加减法）\n\n一年级的太简单了，我们快速进入二年级，请听题：\n\n\n**题目3：28+57=？**\n\n\n答案是……，我还没算出来，容我开个挂，用计算器算一下，答案是85，各位小盘友，使用一百根火柴棒就能算出来哦(*^__^*)。接着看题：\n\n**题目4：68+57=？**\n\n请注意了，你只有一百根火柴棒，这次你应该能给出正确答案，答案是：25。到目前为止，你已经学会了加法了，下面来学习减法：\n\n**题目5：68-43=？**\n\n不啰嗦了，直接给答案：25。来一道有难度的减法：\n\n**题目6：28-57=？**\n\n以我小学二年级的智商，表示不知道答案。那让我们进入到高年级阶段。\n\n### 3、高年级阶段（部分涉及超越了小学知识）\n\n所谓高年级就是知道了负数这么一个概念，所以题目6的答案就是-29。既然进入了高年级，那我们来做另外一件有意思的事，把减法变成加法，省的记两种运算规则。我们来仔细看一下题目4和题目5，\n**题目4：68+57=？**\n**题目5：68-43=？**\n\n这两道题根据**有限范围内**的加减法得出的结果是一样的，都是25，那我们是不是可以将题目5的减法变成题目4的加法呢？进一步，在**有限范围内**的加减法，是不是所有的减法都可以转变成加法，使用加法规则做减法运算呢？答案是肯定的，下面我们就来实现这一猜想。\n\n我们都知道，一个数减去一个数等于一个数加上一个负数，现在的问题是怎么把这个负数表示成一个正数。你有没有发现，题目4和题目5中的第二运算数57和43的关系，这两个数加起来57+43=100，正好是我们所规定的范围（一百以内的加减法），当然，如果按照一百以内不含一百的加法计算，这个结果应该是0。找到这个规律，我们来看是不是真的是这样呢？再来验证一下，73-27=73+73=46（请注意这都是都是100以内的计算）。好像是对的，为什么呢？因为100以内的加法，超过100（包括100）的数都要减去100，也就是：73-27=73+(73-100)=73+73-100，此时73+73-100正好是表达100以内的加法运算。好像有什么不对，谁能保证所有的运算都能像73+73-100这样，前两个数的和大于100呢，有没可能小于100呢？那肯定是有可能的，就拿这个例子来说，假设第一个数为x，要x+73<100，也就是x<100-73=27，也就是说x-27是一个负数，同时x+73-100也正好是一个负数，也说明这个两个数是相等的，但它还是用负数表示。综上，当y>0，x-y可以表示成x-y+100，也就是说-y用正数表示是100-y。\n\n### 3、正规化阶段\n\n经过前面一些简单的介绍，让我们来总结和归纳一下这个**在一定范围内**的加减法运算。\n\n#### 1、让数的表示更正规化\n\n上面提到过正数和负数的表示，以及如何将一个减法变成一个加法，然和将负数变成一个正数进行相加，且等到与加法相等的结果。现在我们将其进行更进一步的整理。\n\n表示一个一百以内的十进制数（不包括100，当然这里所说的数是指|x|<100的数），我们只需要两个数字进行组合即可得到，考虑到有正与负数，我们多加一位表示正负，这一位可以是+、-，比如+20、-60等。我也说过了，我现在是懒癌晚期，我只想学习正数加法，我天真的把所有数都变成正数，而且只是数，连正负号都是用数字，还能表示出这个数是正数还是负数，所以绝对值在100以内的数，只需要三位数表示，而且我们只用三个数表示。明确了目标，那开始吧：\n\n100以内的正数表示：最高位用0或1表示这是一个正数，后两位表示数的大小。比如：+20表示成020。\n绝对值100以内的负数的表示：最高位用8或9表示是负数，一般使用9，后两位表示数的大小，当然了为了能让负数变成正数加法，数的大小部分还是用100-数的大小部分。比如：-60表示成940（9是符号位，40=100-60）。\n\n\n#### 2、让计算方法更正规化\n\n将数的表示正规化后，我们用正规化后的数带入之前的题目中进行计算，注意符号位也当作数值进行运算，且只能保留最低三位数，看看能不能得到正确答案：\n\n**题目3：28+57=028+057=085**\n**题目4：68+57=068+057=125=025     (前面说过，0或1都表示正数，通常我们会把1变成0来表示)**\n**题目5：68-43=068+957=1025（超过了3个位，把最高为丢掉）=025**\n**题目6：28-57=028+943=971**\n**题目7：-66-88=934+912=1846（超过了3位，把最高位丢掉）=846=946(前面说过，8或9都表示负数，通常我们会把8变成9来表示)**\n\n题目3、4、5的结果都是正数，且结果和我们之前得到是一样的，题目6、7的结果是负数，题6值为100-71=29，所以结果是-29，也与我之前的结果一致，题7的值为-54，也是正确值。至此，我们就实现了绝对值在100以内的正负数加减法的正规化，全部简化为加法运算。\n\n至此，可以结束本文了，不过，我们现在不禁要问，为什么我们这样做可以得到与我们以前计算方法一致的结果呢？\n\n嗯，这个超出了小学数学知识的范畴了，我们之所以可以等到相同的结果，因为我们讨论的**在一定范围内**的带符号加法运算和**在一定范围内**的不带符号的加法运算都是一个阿贝尔群，还具有相同的单位元，而且表示的范围是符合双射关系。简单点说，我们现在讨论的整数加法是一个[阿贝尔群](https://zh.wikipedia.org/wiki/阿贝尔群)，满足（下面是个人的通俗说法，准确定义请参考相关专业书籍）：\n1、封闭性：通俗说就是加数与和属于同样的一个取值域，比如绝对值100以内的加法运算，如果大于等于100我们就减去100，得到的和还是在100以内，转换成不带正负号的加法，就是计算[0,999]内的正整数加法，加数与和都是在[0,999]区间；\n2、结合律：就是满足结合律，a+b+c=(a+b)+c=a+(b+c)，a、b、c是任意取值域的值;\n3、单位元：就是满足，a+e=a，e+a=a，a是任意取值域的值，e就是单位元,这里两种情况的单位元都是0；\n4、逆元：对取值域中的任意a，取值域中都存在b，使得a+b=单位元，b称为a的逆元。比如：绝对值100以内的加法运算，x的逆元就是-x，而在[0,999]无符号加法的x的逆元就是1000-x；\n5、交换律：对取值域中的任意a、b，都有a+b=b+a。\n\n这就是原因，估计很多小伙伴根本看不懂，只能说就当热闹看看，不要求弄懂。\n\n### 4、衍生阶段\n\n说了这么久，说好的计算机基础呢？为什么与计算机没半毛钱关系，鉴于此，我就简单说一下，计算机使用的是二进制，加法分为有符号和无符号整数加法。有符号的计算使用了类似上面的方法，正数最高位是0，负数最高位是1，后面的位表示值。\n\n用一个例子说明一下：\n用4位二进制表示一个数，最高位是符号位，还有3位用于表示数值，所以二进制数的取值范围是[-8,7],\n\n**题目8：2-4=0010+1100=1110=-2**\n\n\n最后强调一下，有些小伙伴说，一个数的补码很难求，其实，在二进制中的补码其实就是上面说的逆元，只要你理解了上面逆元的概念，是很好求的，比如十进制中减掉一个数，其实就是加上这个数的逆元。\n举几个例子熟练一下（用4位数表示，最高位是符号位），算法就是：x逆元=10……0-x（10……0总共有指定数的表示位数个0，用4位数表示，因此这里是4）：\n-1=1的逆元=10000-1=9999\n1=-1的逆元=10000-(-1)=10000+1=0001\n-48=48的逆元=10000-48=9952\n\n下面是一个二进制的例子：\n-4=0100的逆元=10000-0100=1100\n\n下面是一些计算中的补码（即逆元）的应用：\n20-48=0020+(10000-48)=0020+9952=9972=-28，同样的在二进制中，2-4=0010+(10000-0100)=0010+1100=1110=-2\n\n当然如果你学过计算机相关知识，还有一种求补码（逆元）的方法，原码（原数）取反加一即得补码（逆元），其中原码取反得到的数被成为反码。取反就是：指定的位数中的最大数-原码，什么意思？举个例子，用四位数表示下面的数的反码，由于是用四位数表示，所以四位数最大能表示的数是9999：\n48的反码=9999-48=9951\n根据：补码=反码+1得：\n48的补码=48的反码+1=9951+1=9952=-48\n同理，用二进制表示下面的数，四位最大二进制数能表示的最大数是1111：\n4的反码=1111-0100=1011\n4的补码=4的反码+1=1011+1=1100=-4\n\n\n### 小结\n\n\n在**有限范围内**的整数计算中，将负数使用补码（也就是逆元）参与运算，就能只使用加法实现有符号整数的加减法运算，这其中使用到的就是群的性质，尤其是逆元公式：x+y=e。在有符号整数计算中x+(-x)=0，而无符号整数计算有：x+(x的逆元)=0，所以我们将无符号整数中的逆元等效于有符号整数中的负数，以此达到只使用加法实现加减法运算的目的。本文还有一点没写清楚，那就是进制转换，后面几个例子中涉及十进制转二进制，等有时间再写。","source":"_posts/别样的整数表示和运算.md","raw":"title: 别样的整数表示和运算\ntags:\n  - 计算机基础\n  - 数学\ncategories:\n  - 计算机基础\ndate: 2016-06-04 23:47:02\n---\n\n\n最近进入懒癌晚期，拖延症重症期，总惦记着让自己写点东西，然而回头一看，已经将近两个月没写东西，看书也开始打瞌睡，彻底进入老年人模式。细思极恐，鼓起勇气，把最近吹着电扇，抠着脚丫看的些东西记录一下。此文涉及的知识非常简单，主要是涉及小学整数加减运算。\n\n主要是温习一下计算机基础知识，计算机的信息表示和处理基础二进制整数的表示和运算。不过，我不打算照着书本介绍一下二进制，今天我们使用我们熟知的十进制（也就是我们平时使用的数）来介绍其中的原理。这样做的好处有很多：1、对于不熟悉二进制的或者说不熟悉进制的读者也可以理解一二，而不用多费口舌去介绍进制的概念；2、使用十进制，可以让自己对书本上的原理有更好的理解；3、使用十进制，可以让自己增进对知识的迁移能力，已达到触类旁通等等。\n\n### 1、小学一年级加法（十以内加法）\n\n请注意了，各位童鞋，请用掰手指的方法告诉下面这道题加法题的答案\n\n**题目1：3+5=？**\n\n\n有八根手指对吧。再来\n\n**题目2：6+7=？**\n\n\n多少？13？你确定你是13吗？请问你真的有13根手指吗？反正我是只看到了3根手指，我的答案是3。这不禁让人感叹人生苦短，在有限的时间范围之内，你想得到的越多，反而拥有的会越少。一不小心又变成了鸡汤小短文，寓言小故事。\n<!--more-->\n### 2、小学二年级加减法（一百以内加减法）\n\n一年级的太简单了，我们快速进入二年级，请听题：\n\n\n**题目3：28+57=？**\n\n\n答案是……，我还没算出来，容我开个挂，用计算器算一下，答案是85，各位小盘友，使用一百根火柴棒就能算出来哦(*^__^*)。接着看题：\n\n**题目4：68+57=？**\n\n请注意了，你只有一百根火柴棒，这次你应该能给出正确答案，答案是：25。到目前为止，你已经学会了加法了，下面来学习减法：\n\n**题目5：68-43=？**\n\n不啰嗦了，直接给答案：25。来一道有难度的减法：\n\n**题目6：28-57=？**\n\n以我小学二年级的智商，表示不知道答案。那让我们进入到高年级阶段。\n\n### 3、高年级阶段（部分涉及超越了小学知识）\n\n所谓高年级就是知道了负数这么一个概念，所以题目6的答案就是-29。既然进入了高年级，那我们来做另外一件有意思的事，把减法变成加法，省的记两种运算规则。我们来仔细看一下题目4和题目5，\n**题目4：68+57=？**\n**题目5：68-43=？**\n\n这两道题根据**有限范围内**的加减法得出的结果是一样的，都是25，那我们是不是可以将题目5的减法变成题目4的加法呢？进一步，在**有限范围内**的加减法，是不是所有的减法都可以转变成加法，使用加法规则做减法运算呢？答案是肯定的，下面我们就来实现这一猜想。\n\n我们都知道，一个数减去一个数等于一个数加上一个负数，现在的问题是怎么把这个负数表示成一个正数。你有没有发现，题目4和题目5中的第二运算数57和43的关系，这两个数加起来57+43=100，正好是我们所规定的范围（一百以内的加减法），当然，如果按照一百以内不含一百的加法计算，这个结果应该是0。找到这个规律，我们来看是不是真的是这样呢？再来验证一下，73-27=73+73=46（请注意这都是都是100以内的计算）。好像是对的，为什么呢？因为100以内的加法，超过100（包括100）的数都要减去100，也就是：73-27=73+(73-100)=73+73-100，此时73+73-100正好是表达100以内的加法运算。好像有什么不对，谁能保证所有的运算都能像73+73-100这样，前两个数的和大于100呢，有没可能小于100呢？那肯定是有可能的，就拿这个例子来说，假设第一个数为x，要x+73<100，也就是x<100-73=27，也就是说x-27是一个负数，同时x+73-100也正好是一个负数，也说明这个两个数是相等的，但它还是用负数表示。综上，当y>0，x-y可以表示成x-y+100，也就是说-y用正数表示是100-y。\n\n### 3、正规化阶段\n\n经过前面一些简单的介绍，让我们来总结和归纳一下这个**在一定范围内**的加减法运算。\n\n#### 1、让数的表示更正规化\n\n上面提到过正数和负数的表示，以及如何将一个减法变成一个加法，然和将负数变成一个正数进行相加，且等到与加法相等的结果。现在我们将其进行更进一步的整理。\n\n表示一个一百以内的十进制数（不包括100，当然这里所说的数是指|x|<100的数），我们只需要两个数字进行组合即可得到，考虑到有正与负数，我们多加一位表示正负，这一位可以是+、-，比如+20、-60等。我也说过了，我现在是懒癌晚期，我只想学习正数加法，我天真的把所有数都变成正数，而且只是数，连正负号都是用数字，还能表示出这个数是正数还是负数，所以绝对值在100以内的数，只需要三位数表示，而且我们只用三个数表示。明确了目标，那开始吧：\n\n100以内的正数表示：最高位用0或1表示这是一个正数，后两位表示数的大小。比如：+20表示成020。\n绝对值100以内的负数的表示：最高位用8或9表示是负数，一般使用9，后两位表示数的大小，当然了为了能让负数变成正数加法，数的大小部分还是用100-数的大小部分。比如：-60表示成940（9是符号位，40=100-60）。\n\n\n#### 2、让计算方法更正规化\n\n将数的表示正规化后，我们用正规化后的数带入之前的题目中进行计算，注意符号位也当作数值进行运算，且只能保留最低三位数，看看能不能得到正确答案：\n\n**题目3：28+57=028+057=085**\n**题目4：68+57=068+057=125=025     (前面说过，0或1都表示正数，通常我们会把1变成0来表示)**\n**题目5：68-43=068+957=1025（超过了3个位，把最高为丢掉）=025**\n**题目6：28-57=028+943=971**\n**题目7：-66-88=934+912=1846（超过了3位，把最高位丢掉）=846=946(前面说过，8或9都表示负数，通常我们会把8变成9来表示)**\n\n题目3、4、5的结果都是正数，且结果和我们之前得到是一样的，题目6、7的结果是负数，题6值为100-71=29，所以结果是-29，也与我之前的结果一致，题7的值为-54，也是正确值。至此，我们就实现了绝对值在100以内的正负数加减法的正规化，全部简化为加法运算。\n\n至此，可以结束本文了，不过，我们现在不禁要问，为什么我们这样做可以得到与我们以前计算方法一致的结果呢？\n\n嗯，这个超出了小学数学知识的范畴了，我们之所以可以等到相同的结果，因为我们讨论的**在一定范围内**的带符号加法运算和**在一定范围内**的不带符号的加法运算都是一个阿贝尔群，还具有相同的单位元，而且表示的范围是符合双射关系。简单点说，我们现在讨论的整数加法是一个[阿贝尔群](https://zh.wikipedia.org/wiki/阿贝尔群)，满足（下面是个人的通俗说法，准确定义请参考相关专业书籍）：\n1、封闭性：通俗说就是加数与和属于同样的一个取值域，比如绝对值100以内的加法运算，如果大于等于100我们就减去100，得到的和还是在100以内，转换成不带正负号的加法，就是计算[0,999]内的正整数加法，加数与和都是在[0,999]区间；\n2、结合律：就是满足结合律，a+b+c=(a+b)+c=a+(b+c)，a、b、c是任意取值域的值;\n3、单位元：就是满足，a+e=a，e+a=a，a是任意取值域的值，e就是单位元,这里两种情况的单位元都是0；\n4、逆元：对取值域中的任意a，取值域中都存在b，使得a+b=单位元，b称为a的逆元。比如：绝对值100以内的加法运算，x的逆元就是-x，而在[0,999]无符号加法的x的逆元就是1000-x；\n5、交换律：对取值域中的任意a、b，都有a+b=b+a。\n\n这就是原因，估计很多小伙伴根本看不懂，只能说就当热闹看看，不要求弄懂。\n\n### 4、衍生阶段\n\n说了这么久，说好的计算机基础呢？为什么与计算机没半毛钱关系，鉴于此，我就简单说一下，计算机使用的是二进制，加法分为有符号和无符号整数加法。有符号的计算使用了类似上面的方法，正数最高位是0，负数最高位是1，后面的位表示值。\n\n用一个例子说明一下：\n用4位二进制表示一个数，最高位是符号位，还有3位用于表示数值，所以二进制数的取值范围是[-8,7],\n\n**题目8：2-4=0010+1100=1110=-2**\n\n\n最后强调一下，有些小伙伴说，一个数的补码很难求，其实，在二进制中的补码其实就是上面说的逆元，只要你理解了上面逆元的概念，是很好求的，比如十进制中减掉一个数，其实就是加上这个数的逆元。\n举几个例子熟练一下（用4位数表示，最高位是符号位），算法就是：x逆元=10……0-x（10……0总共有指定数的表示位数个0，用4位数表示，因此这里是4）：\n-1=1的逆元=10000-1=9999\n1=-1的逆元=10000-(-1)=10000+1=0001\n-48=48的逆元=10000-48=9952\n\n下面是一个二进制的例子：\n-4=0100的逆元=10000-0100=1100\n\n下面是一些计算中的补码（即逆元）的应用：\n20-48=0020+(10000-48)=0020+9952=9972=-28，同样的在二进制中，2-4=0010+(10000-0100)=0010+1100=1110=-2\n\n当然如果你学过计算机相关知识，还有一种求补码（逆元）的方法，原码（原数）取反加一即得补码（逆元），其中原码取反得到的数被成为反码。取反就是：指定的位数中的最大数-原码，什么意思？举个例子，用四位数表示下面的数的反码，由于是用四位数表示，所以四位数最大能表示的数是9999：\n48的反码=9999-48=9951\n根据：补码=反码+1得：\n48的补码=48的反码+1=9951+1=9952=-48\n同理，用二进制表示下面的数，四位最大二进制数能表示的最大数是1111：\n4的反码=1111-0100=1011\n4的补码=4的反码+1=1011+1=1100=-4\n\n\n### 小结\n\n\n在**有限范围内**的整数计算中，将负数使用补码（也就是逆元）参与运算，就能只使用加法实现有符号整数的加减法运算，这其中使用到的就是群的性质，尤其是逆元公式：x+y=e。在有符号整数计算中x+(-x)=0，而无符号整数计算有：x+(x的逆元)=0，所以我们将无符号整数中的逆元等效于有符号整数中的负数，以此达到只使用加法实现加减法运算的目的。本文还有一点没写清楚，那就是进制转换，后面几个例子中涉及十进制转二进制，等有时间再写。","slug":"别样的整数表示和运算","published":1,"updated":"2016-06-06T02:06:23.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtco3000pf8b9f2mb5n4m"},{"title":"初识Netfilter/iptables","date":"2016-03-25T12:49:54.000Z","_content":"\n\n### 一、什么是Netfilter/iptables？\n\n{% blockquote 维基百科 https://zh.wikipedia.org/wiki/Iptables%}\n\niptables是一个运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的流动与转送。在大部分的Linux系统上面，iptables是使用/usr/sbin/iptables来操作，文件则放置在手册页底下，可以通过 man iptables 指令获取。通常iptables都需要内核层级的模块来配合运作，Xtables是主要在内核层级里面iptables API运作功能的模块。因相关动作上的需要，iptables的操作需要用到超级用户的权限。\n\n目前iptables系在2.4、2.6及3.0的内核底下运作，旧版的Linux内核（2.2）使用ipchains及ipwadm（Linux 2.0）来达成类似的功能，2014年1月19日起发行的新版Linux内核（3.13后）则使用nftables取而代之。\n\n{% endblockquote %}\n<!-- more -->\n以上就是中文维基百科上给出的定义，看完后，仍然不知所云，iptables的功能具体是什么？它与NetFilter是什么关系？\n\niptables是用来管理网络数据包的流动和转送的，也就是控制数据包的流向。我们都知道网络数据包在流经一台电脑时，数据包一般只有两种流向，一是目的地址是本机的：网卡驱动接收数据包->路由程序处理->本地协议栈处理->网卡驱动发送数据包；另一种流向是目的地址不是本机：网卡驱动接收数据包->路由程序处理数据包->将数据包转送到另一网卡->网卡驱动发送数据包。为了能灵活的管理数据包，Linux内核使用Netfilter模块在这些主要流向的路径的关键位置添加了一些钩子。如下图：\n\n{% asset_img Netfilter-packet-flow.png Netfilter-packet-flow %}\n\n上图过于复杂，为了便于理解，使用下面简化版的流程：\n\n{% asset_img iptables数据包流程.png iptables数据包流程 %}\n\n从上图可知，Netfilter在几个固定的位置设置了5个钩子：\n\n1. NF_INET_PRE_ROUTING:在网卡接收到数据包后，进入路由选择之前；\n2. NF_INET_LOCAL_IN:在路由判断目的地址是本机之后，交给本地协议栈处理之前；\n3. NF_INET_FORWARD:在路由判断目的地址不是本机之后，交给另一个网卡发送之前；\n4. NF_INET_LOCAL_OUT:在本地协议栈和应用程序处理之后，交给网卡发送之前；\n5. NF_INET_POST_ROUTING:在交给网卡发送之前，这是数据流中的最后一个钩子。\n\n既然有钩子，就可以定义与之对应的处理函数，这些函数也已经在Netfilter中定义好，并且与钩子绑定了。感觉所有的活，Netfilter都已经做好了，还有iptables什么事呢？\n\n其实不然，先来看看Netfilter的四个基本模块：\n1. conntrack模块：连接追踪模块\n2. Filter模块：过滤模块\n3. Nat模块：地址转换模块\n4. Mangle模块：数据包修改模块\n其中conntrack模块是基础核心模块，而其他几个模块是在此模块的基础上，维护一张全局表，以实现各模块相应的功能。为了灵活的管理数据包，iptables就可以调用Netfilter提供的接口想这些全局表中添加相应的控制条件和处理。以此，Netfilter其实就是提供一组系统调用以实现管理网络数据包流动和转送的框架。\n\n而iptables则是提供命令处理的用户空间应用程序，同时提供了一些扩展模块以加载到内核对数据包进行处理。Netfilter和iptables的关系如图：\n\n{% asset_img Netfilter与iptabales关系.png Netfilter与iptabales关系 %}\n\n为了方便处理用户命令的一组有序控制策略，iptables使用table、chain、rule来表示一条策略。其中table与Netfilter中的各模块中维护的全局表进行对应，chain与挂载点（即钩子）相对应，rule处理规则。iptables策略组成如图：\n\n{% asset_img iptables策略组成.png iptables策略组成 %}\n\n### 二、 iptables命令格式\n\niptables命令语法：\n``` bash\niptables [-t 表名] 命令 [条件匹配] [目标]\n```\n下面是更加详细的命令格式：\n``` bash\niptables [ -t 表名] 命令选项 [链名] [条件匹配] [-j 目标动作或跳转] \n```\n\n#### 1.表名\n有四张表：filter(默认值)、NAT、mangle、raw。\n\n#### 2.命令选项\n|选项名\t\t\t|功能说明|\n|:-------------:|-------|\n|-A\t\t\t\t|在指定链的末尾添加（--append）一条新的规则|\n|-D\t\t\t\t|删除（--delete）指定链中的某一条规则，按规则序号或内容确定要删除的规则|\n|-I\t\t\t\t|在指定链中插入（--insert）一条新的规则，默认在链的开头插入|\n|-R\t\t\t\t|修改、替换（--replace）指定链中的一条规则，按规则序号或内容确定|\n|-L\t\t\t\t|列出（--list）指定链中的所有的规则进行查看，默认列出表中所有链的内容|\n|-F\t\t\t\t|清空（--flush）指定链中的所有规则，默认清空表中所有链的内容|\n|-N\t\t\t\t|新建（--new-chain）一条用户自己定义的规则链|\n|-X\t\t\t\t|删除指定表中用户自定义的规则链（--delete-chain）|\n|-P\t\t\t\t|设置指定链的默认策略（--policy）|\n|-n\t\t\t\t|用数字形式（--numeric）显示输出结果，若显示主机的 IP地址而不是主机名|\n|-P\t\t\t\t|设置指定链的默认策略（--policy）|\n|-v\t\t\t\t|查看规则列表时显示详细（--verbose）的信息|\n|-V\t\t\t\t|查看iptables命令工具的版本（--Version）信息|\n|-h\t\t\t\t|查看命令帮助信息（--help）|\n|--line-number\t|查看规则列表时，同时显示规则在链中的顺序号|\n\n#### 3.链名\n通过之前分析，主要有一下五条链：\n1. PREROUTING：与NF_INET_PRE_ROUTING钩子相对应，此链的处理时机也与NF_INET_PRE_ROUTING的时机相对应。\n2. INPUT：与NF_INET_LOCAL_IN钩子相对应，此链的处理时机也与NF_INET_LOCAL_IN的时机相对应。\n3. FORWARD：与NF_INET_LOCAL_OUT钩子相对应，此链的处理时机也与NF_INET_LOCAL_OUT的时机相对应。\n4. OUTPUT：与NF_INET_LOCAL_OUT钩子相对应，此链的处理时机也与NF_INET_LOCAL_OUT的时机相对应。\n5. POSTROUTING：与NF_INET_POST_ROUTING钩子相对应，此链的处理时机也与NF_INET_POST_ROUTING的时机相对应。\n\n#### 4.匹配条件\n\n##### 1）通用匹配\n|匹配参数\t|参数说明|\n|:---------:|-------|\n|-p\t\t\t|指定规则协议，如tcp, udp,icmp等，可以使用all来指定所有协议|\n|-s\t\t\t|指定数据包的源地址参数，可以使IP地址、网络地址、主机名|\n|-d\t\t\t|指定目的地址|\n|-i\t\t\t|输入接口|\n|-o\t\t\t|输出接口|\n\n##### 2）隐含匹配\n\n{% asset_img 隐含匹配.jpg 隐含匹配 %}\n\n##### 3）显式匹配\n\n{% asset_img 显式匹配.jpg 显式匹配 %}\n\n#### 5.目标动作或跳转\n|目标项           |功能说明|\n|:--------------:|-------|\n|ACCEPT\t|当信息包与具有ACCEPT目标的规则完全匹配时，会被接受（允许它前往目的地）|\n|DROP\t|当信息包与具有DROP目标的规则完全匹配时，会阻塞该信息包，并且不对它做进一步处理。该目标被指定为-j DROP|\n|REJECT\t|该目标的工作方式与DROP目标相同，但它比DROP好。和DROP不同，REJECT不会在服务器和客户机上留下死套接字。另外，REJECT将错误消息发回给信息包的发送方。该目标被指定为-j REJECT|\n|RETURN\t|在规则中设置的RETURN目标让与该规则匹配的信息包停止遍历包含该规则的链。如果链是如INPUT之类的主链，则使用该链的默认策略处理信息包。它被指定为-jump RETURN|\n|LOG\t|表示将包的有关信息记录入日志|\n|TOS\t|表示改写数据包的TOS值|\n\n### 三、  iptables应用\n\n1. 删除iptables现有规则\n``` bash\niptables –F\n```\n2. 查看iptables规则\n``` bash\niptables –L (iptables –L –v -n)\n```\n3. 增加一条规则到最后\n``` bash\niptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\n```\n4. 添加一条规则到指定位置\n``` bash\niptables -I INPUT 2 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT \n```\n5.  删除一条规则\n``` bash\niptabels -D INPUT 2 \n```\n6. 修改一条规则\n``` bash\niptables -R INPUT 3 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT \n```\n7. 设置默认策略\n``` bash\niptables -P INPUT DROP \n```\n\n### 四、实战——使用iptables的源地址转发功能\n\n上面就是一些简单的介绍，下面模拟内网通过网关访问外网的一个简单例子来看看iptables的应用。\n\n#### 1.准备：\n1. 用虚拟机开启两台机器，分别命名为VM1（Virtual Machine 1）和VM2，VM2当作局域网内的机器，VM2当作网关，真实机器（即本机）LM（Local Machine）当作外网；\n2. 现在分别为VM1配置网络，ip地址是192.186.10.1，掩码是255.255.255.0；VM2配置两网卡，网络配置分别为：网卡1：ip地址是192.168.10.2，掩码是255.255.255.0，网卡2：ip地址是10.126.72.203，掩码是255.255.255.0；LM的网络配置是：ip地址是10.126.72.23，掩码是255.255.255.0。\n3. 在LM上搭建一个web服务器，配置网址www.LM.com。\n\n注意：怎么配置两台虚拟机在同一个局域网内，以及如何配置本机和虚拟机在同一网络中并相互访问呢？\n\n这里备注一下：下面的配置均是以VirtualBox为例。\n\n1. 配置虚拟机局域网\n\n{% asset_img 虚拟机网络配置1.png 虚拟机网络配置1 %}\n\n{% asset_img 虚拟机网络配置2.png 虚拟机网络配置2 %}\n\n2. 配置本机和虚拟机在同一网络中并相互访问\n{% asset_img 虚拟机网络配置3.png 虚拟机网络配置3 %}\n\n准备工作基本完成，如果顺利的话，最后将得到如下网络：\n\n{% asset_img 模拟网络.png 模拟网络 %}\n\n#### 2.实现VM1通过VM2访问LM\n\n由于LM的Web服务(www.lm.com)是本地服务并没有申请域名，还需要手动在VM1和VM2主机的/etc/hosts中添加如下一语句，否则无法对其进行域名解析：\n\n``` bash\n10.126.72.23     www.lm.com\n```\n\n毋庸置疑，开始VM1无法访问LM的Web服务（www.lm.com）。\n\n{% asset_img 访问LM服务1.png 访问LM服务1 %}\n\n下面将实现此访问。\n\n1. 首先开启内核转发的模块\n向/etc/sysctl.conf文件添加或这修改net.ipv4.ip_forward的值为1（即net.ipv4.ip_forward = 1）：\n``` bash\nsudo vim /etc/sysctl.conf\n```\n\n2. 设置VM1的默认网关为VM2，即192.168.10.2，\n\n{% asset_img 设置默认网关.png 设置默认网关 %}\n\n3. 在VM2上安装iptables及服务（此处系统为CentOS 7），并启动\n``` bash\nsudo yum -y install iptables\nsudo yum -y install iptables-services\nsudo systemctl start iptables.service \n```\n\n4. 配置iptables策略\n``` bash\nsudo iptables -F\nsudo iptalbes -t nat -F\nsudo iptables -t nat -A POSTROUTING -s 192.168.10.1/32 -j SNAT --to 10.126.72.203 \n```\n\n这就可以实现VM1访问LM上的服务了。\n\n{% asset_img 访问LM服务2.png 访问LM服务2 %}\n\n\n### 五、小结\n\n以上简单的介绍了iptable的基本概念和基本命令，以及命令的简单使用。这只是冰山一角，iptables还能实现如下功能：\n1. 建立一个基于有状态和无状态的包过滤规则的因特网防火墙。\n2. 部署高度可用的有状态和无状态防火墙集群。\n3. 当公网ip不够用时，可以进行ip伪装，属于NAT模块。\n4. 使用NAT来实现透明代理。\n5. 辅助内核网络模块中的tc和iproute2去构造一个复杂的QoS和路由策略。\n6. 做进一步处理比如比如更改IP包头中的TOS/DSCP/ECN参数。\n\n\n### 参考文章\n[Iptables入门教程](http://drops.wooyun.org/tips/1424)\n[Netfilter---框架的设计](http://blog.chinaunix.net/uid-20786208-id-3429074.html)\n[iptables防火墙原理详解](http://seanlook.com/2014/02/23/iptables-understand/)\n[iptables深入解析](http://blog.jobbole.com/?s=iptables%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90)\n[Linux内核工程导论——网络：Netfilter概览](http://blog.csdn.net/ljy1988123/article/details/50458044?utm_source=tuicool&utm_medium=referral)\n[Netfilter/iptables框架总结](http://vinllen.com/netfilteriptableskuang-jia-zong-jie/)\n","source":"_posts/初识Netfilter-iptables.md","raw":"title: 初识Netfilter/iptables\ntags:\n  - iptables\n  - Netfilter\n  - 防火墙\n  - 网络\ncategories:\n  - Linux防火墙\ndate: 2016-03-25 20:49:54\n---\n\n\n### 一、什么是Netfilter/iptables？\n\n{% blockquote 维基百科 https://zh.wikipedia.org/wiki/Iptables%}\n\niptables是一个运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的流动与转送。在大部分的Linux系统上面，iptables是使用/usr/sbin/iptables来操作，文件则放置在手册页底下，可以通过 man iptables 指令获取。通常iptables都需要内核层级的模块来配合运作，Xtables是主要在内核层级里面iptables API运作功能的模块。因相关动作上的需要，iptables的操作需要用到超级用户的权限。\n\n目前iptables系在2.4、2.6及3.0的内核底下运作，旧版的Linux内核（2.2）使用ipchains及ipwadm（Linux 2.0）来达成类似的功能，2014年1月19日起发行的新版Linux内核（3.13后）则使用nftables取而代之。\n\n{% endblockquote %}\n<!-- more -->\n以上就是中文维基百科上给出的定义，看完后，仍然不知所云，iptables的功能具体是什么？它与NetFilter是什么关系？\n\niptables是用来管理网络数据包的流动和转送的，也就是控制数据包的流向。我们都知道网络数据包在流经一台电脑时，数据包一般只有两种流向，一是目的地址是本机的：网卡驱动接收数据包->路由程序处理->本地协议栈处理->网卡驱动发送数据包；另一种流向是目的地址不是本机：网卡驱动接收数据包->路由程序处理数据包->将数据包转送到另一网卡->网卡驱动发送数据包。为了能灵活的管理数据包，Linux内核使用Netfilter模块在这些主要流向的路径的关键位置添加了一些钩子。如下图：\n\n{% asset_img Netfilter-packet-flow.png Netfilter-packet-flow %}\n\n上图过于复杂，为了便于理解，使用下面简化版的流程：\n\n{% asset_img iptables数据包流程.png iptables数据包流程 %}\n\n从上图可知，Netfilter在几个固定的位置设置了5个钩子：\n\n1. NF_INET_PRE_ROUTING:在网卡接收到数据包后，进入路由选择之前；\n2. NF_INET_LOCAL_IN:在路由判断目的地址是本机之后，交给本地协议栈处理之前；\n3. NF_INET_FORWARD:在路由判断目的地址不是本机之后，交给另一个网卡发送之前；\n4. NF_INET_LOCAL_OUT:在本地协议栈和应用程序处理之后，交给网卡发送之前；\n5. NF_INET_POST_ROUTING:在交给网卡发送之前，这是数据流中的最后一个钩子。\n\n既然有钩子，就可以定义与之对应的处理函数，这些函数也已经在Netfilter中定义好，并且与钩子绑定了。感觉所有的活，Netfilter都已经做好了，还有iptables什么事呢？\n\n其实不然，先来看看Netfilter的四个基本模块：\n1. conntrack模块：连接追踪模块\n2. Filter模块：过滤模块\n3. Nat模块：地址转换模块\n4. Mangle模块：数据包修改模块\n其中conntrack模块是基础核心模块，而其他几个模块是在此模块的基础上，维护一张全局表，以实现各模块相应的功能。为了灵活的管理数据包，iptables就可以调用Netfilter提供的接口想这些全局表中添加相应的控制条件和处理。以此，Netfilter其实就是提供一组系统调用以实现管理网络数据包流动和转送的框架。\n\n而iptables则是提供命令处理的用户空间应用程序，同时提供了一些扩展模块以加载到内核对数据包进行处理。Netfilter和iptables的关系如图：\n\n{% asset_img Netfilter与iptabales关系.png Netfilter与iptabales关系 %}\n\n为了方便处理用户命令的一组有序控制策略，iptables使用table、chain、rule来表示一条策略。其中table与Netfilter中的各模块中维护的全局表进行对应，chain与挂载点（即钩子）相对应，rule处理规则。iptables策略组成如图：\n\n{% asset_img iptables策略组成.png iptables策略组成 %}\n\n### 二、 iptables命令格式\n\niptables命令语法：\n``` bash\niptables [-t 表名] 命令 [条件匹配] [目标]\n```\n下面是更加详细的命令格式：\n``` bash\niptables [ -t 表名] 命令选项 [链名] [条件匹配] [-j 目标动作或跳转] \n```\n\n#### 1.表名\n有四张表：filter(默认值)、NAT、mangle、raw。\n\n#### 2.命令选项\n|选项名\t\t\t|功能说明|\n|:-------------:|-------|\n|-A\t\t\t\t|在指定链的末尾添加（--append）一条新的规则|\n|-D\t\t\t\t|删除（--delete）指定链中的某一条规则，按规则序号或内容确定要删除的规则|\n|-I\t\t\t\t|在指定链中插入（--insert）一条新的规则，默认在链的开头插入|\n|-R\t\t\t\t|修改、替换（--replace）指定链中的一条规则，按规则序号或内容确定|\n|-L\t\t\t\t|列出（--list）指定链中的所有的规则进行查看，默认列出表中所有链的内容|\n|-F\t\t\t\t|清空（--flush）指定链中的所有规则，默认清空表中所有链的内容|\n|-N\t\t\t\t|新建（--new-chain）一条用户自己定义的规则链|\n|-X\t\t\t\t|删除指定表中用户自定义的规则链（--delete-chain）|\n|-P\t\t\t\t|设置指定链的默认策略（--policy）|\n|-n\t\t\t\t|用数字形式（--numeric）显示输出结果，若显示主机的 IP地址而不是主机名|\n|-P\t\t\t\t|设置指定链的默认策略（--policy）|\n|-v\t\t\t\t|查看规则列表时显示详细（--verbose）的信息|\n|-V\t\t\t\t|查看iptables命令工具的版本（--Version）信息|\n|-h\t\t\t\t|查看命令帮助信息（--help）|\n|--line-number\t|查看规则列表时，同时显示规则在链中的顺序号|\n\n#### 3.链名\n通过之前分析，主要有一下五条链：\n1. PREROUTING：与NF_INET_PRE_ROUTING钩子相对应，此链的处理时机也与NF_INET_PRE_ROUTING的时机相对应。\n2. INPUT：与NF_INET_LOCAL_IN钩子相对应，此链的处理时机也与NF_INET_LOCAL_IN的时机相对应。\n3. FORWARD：与NF_INET_LOCAL_OUT钩子相对应，此链的处理时机也与NF_INET_LOCAL_OUT的时机相对应。\n4. OUTPUT：与NF_INET_LOCAL_OUT钩子相对应，此链的处理时机也与NF_INET_LOCAL_OUT的时机相对应。\n5. POSTROUTING：与NF_INET_POST_ROUTING钩子相对应，此链的处理时机也与NF_INET_POST_ROUTING的时机相对应。\n\n#### 4.匹配条件\n\n##### 1）通用匹配\n|匹配参数\t|参数说明|\n|:---------:|-------|\n|-p\t\t\t|指定规则协议，如tcp, udp,icmp等，可以使用all来指定所有协议|\n|-s\t\t\t|指定数据包的源地址参数，可以使IP地址、网络地址、主机名|\n|-d\t\t\t|指定目的地址|\n|-i\t\t\t|输入接口|\n|-o\t\t\t|输出接口|\n\n##### 2）隐含匹配\n\n{% asset_img 隐含匹配.jpg 隐含匹配 %}\n\n##### 3）显式匹配\n\n{% asset_img 显式匹配.jpg 显式匹配 %}\n\n#### 5.目标动作或跳转\n|目标项           |功能说明|\n|:--------------:|-------|\n|ACCEPT\t|当信息包与具有ACCEPT目标的规则完全匹配时，会被接受（允许它前往目的地）|\n|DROP\t|当信息包与具有DROP目标的规则完全匹配时，会阻塞该信息包，并且不对它做进一步处理。该目标被指定为-j DROP|\n|REJECT\t|该目标的工作方式与DROP目标相同，但它比DROP好。和DROP不同，REJECT不会在服务器和客户机上留下死套接字。另外，REJECT将错误消息发回给信息包的发送方。该目标被指定为-j REJECT|\n|RETURN\t|在规则中设置的RETURN目标让与该规则匹配的信息包停止遍历包含该规则的链。如果链是如INPUT之类的主链，则使用该链的默认策略处理信息包。它被指定为-jump RETURN|\n|LOG\t|表示将包的有关信息记录入日志|\n|TOS\t|表示改写数据包的TOS值|\n\n### 三、  iptables应用\n\n1. 删除iptables现有规则\n``` bash\niptables –F\n```\n2. 查看iptables规则\n``` bash\niptables –L (iptables –L –v -n)\n```\n3. 增加一条规则到最后\n``` bash\niptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\n```\n4. 添加一条规则到指定位置\n``` bash\niptables -I INPUT 2 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT \n```\n5.  删除一条规则\n``` bash\niptabels -D INPUT 2 \n```\n6. 修改一条规则\n``` bash\niptables -R INPUT 3 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT \n```\n7. 设置默认策略\n``` bash\niptables -P INPUT DROP \n```\n\n### 四、实战——使用iptables的源地址转发功能\n\n上面就是一些简单的介绍，下面模拟内网通过网关访问外网的一个简单例子来看看iptables的应用。\n\n#### 1.准备：\n1. 用虚拟机开启两台机器，分别命名为VM1（Virtual Machine 1）和VM2，VM2当作局域网内的机器，VM2当作网关，真实机器（即本机）LM（Local Machine）当作外网；\n2. 现在分别为VM1配置网络，ip地址是192.186.10.1，掩码是255.255.255.0；VM2配置两网卡，网络配置分别为：网卡1：ip地址是192.168.10.2，掩码是255.255.255.0，网卡2：ip地址是10.126.72.203，掩码是255.255.255.0；LM的网络配置是：ip地址是10.126.72.23，掩码是255.255.255.0。\n3. 在LM上搭建一个web服务器，配置网址www.LM.com。\n\n注意：怎么配置两台虚拟机在同一个局域网内，以及如何配置本机和虚拟机在同一网络中并相互访问呢？\n\n这里备注一下：下面的配置均是以VirtualBox为例。\n\n1. 配置虚拟机局域网\n\n{% asset_img 虚拟机网络配置1.png 虚拟机网络配置1 %}\n\n{% asset_img 虚拟机网络配置2.png 虚拟机网络配置2 %}\n\n2. 配置本机和虚拟机在同一网络中并相互访问\n{% asset_img 虚拟机网络配置3.png 虚拟机网络配置3 %}\n\n准备工作基本完成，如果顺利的话，最后将得到如下网络：\n\n{% asset_img 模拟网络.png 模拟网络 %}\n\n#### 2.实现VM1通过VM2访问LM\n\n由于LM的Web服务(www.lm.com)是本地服务并没有申请域名，还需要手动在VM1和VM2主机的/etc/hosts中添加如下一语句，否则无法对其进行域名解析：\n\n``` bash\n10.126.72.23     www.lm.com\n```\n\n毋庸置疑，开始VM1无法访问LM的Web服务（www.lm.com）。\n\n{% asset_img 访问LM服务1.png 访问LM服务1 %}\n\n下面将实现此访问。\n\n1. 首先开启内核转发的模块\n向/etc/sysctl.conf文件添加或这修改net.ipv4.ip_forward的值为1（即net.ipv4.ip_forward = 1）：\n``` bash\nsudo vim /etc/sysctl.conf\n```\n\n2. 设置VM1的默认网关为VM2，即192.168.10.2，\n\n{% asset_img 设置默认网关.png 设置默认网关 %}\n\n3. 在VM2上安装iptables及服务（此处系统为CentOS 7），并启动\n``` bash\nsudo yum -y install iptables\nsudo yum -y install iptables-services\nsudo systemctl start iptables.service \n```\n\n4. 配置iptables策略\n``` bash\nsudo iptables -F\nsudo iptalbes -t nat -F\nsudo iptables -t nat -A POSTROUTING -s 192.168.10.1/32 -j SNAT --to 10.126.72.203 \n```\n\n这就可以实现VM1访问LM上的服务了。\n\n{% asset_img 访问LM服务2.png 访问LM服务2 %}\n\n\n### 五、小结\n\n以上简单的介绍了iptable的基本概念和基本命令，以及命令的简单使用。这只是冰山一角，iptables还能实现如下功能：\n1. 建立一个基于有状态和无状态的包过滤规则的因特网防火墙。\n2. 部署高度可用的有状态和无状态防火墙集群。\n3. 当公网ip不够用时，可以进行ip伪装，属于NAT模块。\n4. 使用NAT来实现透明代理。\n5. 辅助内核网络模块中的tc和iproute2去构造一个复杂的QoS和路由策略。\n6. 做进一步处理比如比如更改IP包头中的TOS/DSCP/ECN参数。\n\n\n### 参考文章\n[Iptables入门教程](http://drops.wooyun.org/tips/1424)\n[Netfilter---框架的设计](http://blog.chinaunix.net/uid-20786208-id-3429074.html)\n[iptables防火墙原理详解](http://seanlook.com/2014/02/23/iptables-understand/)\n[iptables深入解析](http://blog.jobbole.com/?s=iptables%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90)\n[Linux内核工程导论——网络：Netfilter概览](http://blog.csdn.net/ljy1988123/article/details/50458044?utm_source=tuicool&utm_medium=referral)\n[Netfilter/iptables框架总结](http://vinllen.com/netfilteriptableskuang-jia-zong-jie/)\n","slug":"初识Netfilter-iptables","published":1,"updated":"2016-03-25T12:49:54.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtco7000tf8b9ci2pdw6e"},{"title":"RSA系类（四）：完結篇","date":"2015-02-04T15:53:00.000Z","_content":"\n\n昨天说到费马小定理可以表述成：如果 m 是一个质数的话，那么对于任意一个整数 n ，随着 i（<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in n^{0}} \" type=\"image/svg+xml\" />）的增加， n 的 i 次方除以 m 的余数将会呈现出长度为 m–1 的周期性。然后我们还提出了另一个问题，如果m不是质数，那么对于任意一个整数 n ，随着 i 的增加， n 的 i 次方除以 m 的余数将会呈现出多长的周期性呢？\n\n记<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)} \" type=\"image/svg+xml\" />为对于任意一个整数 n ，随着 i（<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in n^{0}} \" type=\"image/svg+xml\" />）的增加，n 的 i 次方除以 m 的余数的周期。\n\n1.现在我们先来看一下这种情况，如果m=p×q，其中p和q互质，由中国剩余定理可以可知：任意整数对m求余的余数和这个数分别对p、q求余组成的余数数对是一一对应关系。因此，对于任意一个整数 n ，随着 i 的增加， n 的 i 次方除以 m 的余数与n 的 i 次方分别除以p、q而组成的余数数对的周期性是一致的。而n 的 i 次方除以p的周期性可以根据费马小定理得（p-1），同理，可得n 的 i 次方除以q的周期性是（q-1）。那么(p-1)×(q-1)就是n 的 i 次方除以 m 的余数的一个周期，请注意，这里说的是一个周期，并没说是最小正周期，最小正周期一概是（p-1）和（q-1）的最小公倍数才对。为了方便，我只求出周期即可，所以通常只要(p-1)×(q-1)就行了。\n\n<!--more-->\n\n通过上面的分析可得：\n\n#### 结论一：当m=p×q，其中p和q都是互质，<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)=(p-1)×(q-1)} \" type=\"image/svg+xml\" />。\n\n2.如果<embed src=\"http://latex.codecogs.com/svg.latex?{m=p^{k}} \" type=\"image/svg+xml\" />，其中p是质数，k是正整数。\n\n我们先来看一张表：\n\n| i        | 0 | 1 |...| p |p+1|...| 2p|2p+1|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}-1} \" type=\"image/svg+xml\" />|\n| :-------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:-:|:-:|\n| i mod p  | 0 | 1 |...| 0 | 1 |...| 0 | 1  |...|p-1|\n| i mod <embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" /> | 0 | 1 |...| p |p+1|...| 2p|2p+1|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}-1} \" type=\"image/svg+xml\" />|\n| i        |<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" />|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+1} \" type=\"image/svg+xml\" />|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+p} \" type=\"image/svg+xml\" />|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+p+1} \" type=\"image/svg+xml\" />|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+2p} \" type=\"image/svg+xml\" />|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+2p+1} \" type=\"image/svg+xml\" />|...|<embed src=\"http://latex.codecogs.com/svg.latex?{2p^{k}-1} \" type=\"image/svg+xml\" />|\n| i mod p  | 0 | 1 |...| 0 | 1 |...| 0 | 1  |...|p-1|\n| i mod <embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" /> | 0 | 1 |...| p |p+1|...| 2p|2p+1|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}-1} \" type=\"image/svg+xml\" />|\n\n因为任意一个整数对p求余的余数的周期是p，任意一个整数对<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" />求余的余数的周期是<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" />，刚好是对p求余的余数的周期的倍<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k-1}} \" type=\"image/svg+xml\" />。由此可得：n 的 i 次方除以<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" />的余数周期正好是n 的 i 次方除以p周期的<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k-1}} \" type=\"image/svg+xml\" />倍。n 的 i 次方除以p周期可以由费马小定理得到，是(p-1)，因此：\n\n#### 结论二：当<embed src=\"http://latex.codecogs.com/svg.latex?{m=p^{k}} \" type=\"image/svg+xml\" />，其中p是质数，k是正整数时，<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)=(p-1)\\bullet p^{k-1}} \" type=\"image/svg+xml\" />。\n\n3.如果<embed src=\"http://latex.codecogs.com/svg.latex?{m=p_1^{k_1}p_2^{k_2}\\cdots p_r^{k_r}}\" type=\"image/svg+xml\" />，其中是质数<embed src=\"http://latex.codecogs.com/svg.latex?{p_i}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{k_i}\" type=\"image/svg+xml\" />是正整数，<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in[1,r]}\" type=\"image/svg+xml\" />；\n\n由于<embed src=\"http://latex.codecogs.com/svg.latex?{p_i}\" type=\"image/svg+xml\" />都是质数，所以<embed src=\"http://latex.codecogs.com/svg.latex?{p_i^{k_i}}\" type=\"image/svg+xml\" />之间彼此都没有相同的质因数，即<embed src=\"http://latex.codecogs.com/svg.latex?{p_i^{k_i}}\" type=\"image/svg+xml\" />两两互质。根据结论一可以知道<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)=\\varphi(p_1^{k_1}p_2^{k_2}\\cdots p_r^{k_r})=\\varphi(p_1^{k_1})\\bullet\\varphi(p_2^{k_2})\\bullet\\cdots\\bullet\\varphi(p_r^{k_r})}\" type=\"image/svg+xml\" />，根据结论二得：<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(p_i^{k_i})=p_i^{k_i-1}\\bullet(p_i-1})=p_i^{k_i}\\bullet(1-1/p_i)}\" type=\"image/svg+xml\" />，\n\n由此可得：\n#### 结论三：当<embed src=\"http://latex.codecogs.com/svg.latex?{m=p_1^{k_1}p_2^{k_2}\\cdots p_r^{k_r}}\" type=\"image/svg+xml\" />，其中<embed src=\"http://latex.codecogs.com/svg.latex?{p_i}\" type=\"image/svg+xml\" />是质数，<embed src=\"http://latex.codecogs.com/svg.latex?{k_i}\" type=\"image/svg+xml\" />是正整数，<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in[1,r]}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)&=&\\prod_{i=1}^{r}p_i^{k_i-1}(p_i-1)&=&m\\prod_{i=1}^{r}(1-1/p_i)}\" type=\"image/svg+xml\" />，而所有的整数都能表示成<embed src=\"http://latex.codecogs.com/svg.latex?{m=p_1^{k_1}p_2^{k_2}\\cdots p_r^{k_r}}\" type=\"image/svg+xml\" />，即：对于任意的整数m，都有<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)&=&\\prod_{i=1}^{r}p_i^{k_i-1}(p_i-1)&=&m\\prod_{i=1}^{r}(1-1/p_i)}\" type=\"image/svg+xml\" />。\n\n这个结果正好就是[欧拉函数](https://zh.wikipedia.org/wiki/欧拉函数)。\n\n由于结论一和结论二都是结论三的特例，从而有结论：\n#### 结论四：对任意正整数n 的 i 次方除以 m 的余数将会呈现出长度<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)&=&\\prod_{i=1}^{r}p_i^{k_i-1}(p_i-1)&=&m\\prod_{i=1}^{r}(1-1/p_i)}\" type=\"image/svg+xml\" />的周期。即<embed src=\"http://latex.codecogs.com/svg.latex?{n^{\\varphi(m)+1}&\\equiv&n(\\mod m)}\" type=\"image/svg+xml\" />。\n\n如果n和m互质，也就是下面第三个原理中的(n，m)=1的含义，根据下面除法原理的第三个原理，\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{(1):a\\equiv b(\\mod cn)\\Rightarrow a\\equiv b(\\mod n)}\\\\{(2):\\left.\\begin{aligned}a\\equiv b(\\mod m)\\\\n|m\\end{aligned}\\right\\}\\Rightarrow a\\equiv b(\\mod n)}\\\\{(3):\\left.\\begin{aligned}ac \\equiv bc(\\mod m)\\\\(c,m) = 1\\end{aligned}\\right\\}\\Rightarrow a \\equiv b(\\mod m)}\\\\{(4):\\left.\\begin{aligned} a &\\equiv& b(\\mod m_1)\\\\a &\\equiv& b(\\mod m_2)\\\\ &\\vdots& \\\\a &\\equiv& b(\\mod m_n)\\\\(&n \\ge 2)\\end{aligned}\\right\\}\\Rightarrow a\\equiv b(\\mod [m_1,m_2,\\cdots,m_n])}\" type=\"image/svg+xml\" />\n\n将n消掉，得：\n\n结论五：当n和m互质时，\n<embed src=\"http://latex.codecogs.com/svg.latex?{n^{\\varphi(m)}\\equiv 1(\\mod m)}\" type=\"image/svg+xml\" />，这就是费马小定理的广义定义，也就是[欧拉定理](https://zh.wikipedia.org/wiki/欧拉定理_(数论))（也称费马-欧拉定理或欧拉函数定理）。\n\n好了，终于把这些理论说完了，下面接着把最后一道题目解完吧。\n\n题目：你在心里想好一个3位数，然后将这个数乘以91，最后把乘积的末尾三个数字发给我，让我猜猜你心里想的那个3位数是什么？\n\n参考答案：\n\n当时只有一位小伙伴参与了这个游戏，他发给我的三位数字是250，我的回答是750。这里面的玄机是什么呢？\n\n先来看个例子：(13×27×45) mod 17 = ?，我们可以求13×27×45=15795，然后用15795÷17=929…2，得到结果是2；你还可以这么计算：\n\n[(13×27 mod 17)×45] mod 17分解成下面的步骤：\n\n13×27 mod 17 = 11，\n\n11×45 mod 17 = 2，\n\n答案也是2，这说明取模运算不论是在最后一次性求，还是在求解过程中就开始进行取模，都不会影响最后的结果。这个游戏中发送方进行了一次取模，末尾三个数字，其实就是对1000取模。如果我能求出一个数y=m×n，使得下面这个式子成立：<embed src=\"http://latex.codecogs.com/svg.latex?{a\\bullet y\\equiv q (\\mod 1000)}\" type=\"image/svg+xml\" />，然后将m公开给所有人，n只有你自己知道，这样不论别人发什么给你，你都可以根据这个式子求出这个a，根据式子可得：ay=1000k + a，a和k是整数，因为要让等式与a无关，我们令k=k’a，当a=0，很容易猜出数字是0，当a不等于0，等式变形为y=1000k’+1。恰好1001=91×11，y就取值为1001，那么m=91,n=11。让我们来还原250的原数吧，250×11=2750，2750 mod 1000 = 750。验证一下对不对，750×91 = 68250，68250 mod 1000 = 250，完全正确。Ok，到这所有这个游戏也解决了，有兴趣的小伙伴可以跟别人玩一玩哦。\n\n进入本系列的最后一个主题：RSA加密算法\n\n先来梳理一下猜数游戏，通过一种算法得到这么两组数据，一组是(N,E)，对外公开，我们称它为公钥，比如游戏中(1000,91)；另一组是(N,D)，自己保存，不能让其他人知道，我们称它为私钥，比如游戏中的(1000,11)。根据某种算法用(N,E)对数据进行加密，然后通过某种算法用(N,D)对数据进行解密，最后得到原始数据，从而完成安全的通信，上面提到的私钥不能公开。这就非对称加密算法的基本思想。那有小伙伴就会问了，要这么麻烦干嘛，直接用一个密钥对数据进行加密，然后秘密的告诉要解密的小伙伴这个密钥，不就可以完成数据的安全通信吗？当然可以，生活中很多这种加密方式，加密压缩包就是一个例子。这种是对称加密算法的思路，不过这里面有一个问题，如何安全的把密钥告诉其他小伙伴呢？你可能说这个很简单，当面告诉他，或者发短信打电话告诉他。好吧，现实生活中这种方法不失为一种解决方案，但是在互联网中通信的可不是人，而是计算机或者更精确一点说应该是进程，这就成问题了。\n\n下面对非对称加密方法原理进行详细的阐述一下：\n\n在互联网中，所有的数据都是用二进制数表示，我们都可以将它们用整数表示，比如说：在计算机中字符’A’，它的二进制表示就是：01000001，用整数表示就是65，通过前面对数论知识的介绍，我们知道：任意整数 x ，随着 i（<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in n^{0}}\" type=\"image/svg+xml\" />）的增加，x 的 i 次方除以 N 的余数会呈现出以欧拉函数<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)}\" type=\"image/svg+xml\" />为长度的周期性。也就是说如果我们把我们要加密的数据x，也称为明文,对x进行e（<embed src=\"http://latex.codecogs.com/svg.latex?{0<e<\\varphi(N)}\" type=\"image/svg+xml\" />）次幂得<embed src=\"http://latex.codecogs.com/svg.latex?{x^{e}}\" type=\"image/svg+xml\" />，用<embed src=\"http://latex.codecogs.com/svg.latex?{x^{e}}\" type=\"image/svg+xml\" />对N求余，得到密文y，这就是整个加密过程。解密过程是这样的，将得到的密文y进行<embed src=\"http://latex.codecogs.com/svg.latex?{(k\\varphi(N)+1)\\div e}\" type=\"image/svg+xml\" />（k为整数，当然这个结果一定要为整数）次幂得<embed src=\"http://latex.codecogs.com/svg.latex?{y^{k\\varphi(N)+1}}\" type=\"image/svg+xml\" />，再将<embed src=\"http://latex.codecogs.com/svg.latex?{y^{k\\varphi(N)+1}}\" type=\"image/svg+xml\" />对N求余，由于对x总共进行了<embed src=\"http://latex.codecogs.com/svg.latex?{k\\varphi(N)+1}\" type=\"image/svg+xml\" />次幂（虽然中途对N求过模，但是不会影响最后求模的结果，虽然本文没有证明，有兴趣的小伙伴可以自行证明），由于x的i次方对N取余的余数的周期有<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)}\" type=\"image/svg+xml\" />，即：<embed src=\"http://latex.codecogs.com/svg.latex?{x\\equiv x^{\\varphi(N)+1}\\equiv x^{k\\varphi(N)+1}(\\mod N)}\" type=\"image/svg+xml\" />，当N>x，这可以看出x mod N = x，<embed src=\"http://latex.codecogs.com/svg.latex?{x^{k\\varphi(N)+1}\\mod N = x}\" type=\"image/svg+xml\" />，从而得出了明文x。\n\n现在问题在于这个e该怎么取值，才能使得<embed src=\"http://latex.codecogs.com/svg.latex?{(k\\varphi(N)+1)\\div e}\" type=\"image/svg+xml\" />是整数呢？在RSA加密算法中，令N=p×q，并且p与q是非常大的质数，且p不等于q。明显，p与q互质，根据欧拉函数得出：<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)=(p-1)(q-1)}\" type=\"image/svg+xml\" />。假设有一个整数d，满足<embed src=\"http://latex.codecogs.com/svg.latex?{d=(k\\varphi(N)+1)\\div e}\" type=\"image/svg+xml\" />，即：<embed src=\"http://latex.codecogs.com/svg.latex?{ed=k\\varphi(N)+1}\" type=\"image/svg+xml\" />，亦即：<embed src=\"http://latex.codecogs.com/svg.latex?{ed\\equiv 1(\\mod \\varphi(N))}\" type=\"image/svg+xml\" />，要使得这个式子d有解，根据之前的分水问题的结论可以知道，只有e和<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)}\" type=\"image/svg+xml\" />互质时，d才有解。所以，我们可以随机选择一个整数e，使得e满足<embed src=\"http://latex.codecogs.com/svg.latex?{1<e<\\varphi(N)}\" type=\"image/svg+xml\" />且e与<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)}\" type=\"image/svg+xml\" />互质。再根据扩展辗转相除发求出d，这样我们就生成出了公钥(N，e)和密钥(N，d)。\n\n举个例子吧，假如迪奥斯A和白富美B在热恋中，通信过程中各种甜言蜜语，有一天，A室友趁A不在的时候用A的QQ各种调戏B，搞的A跪了好几天主板，于是A和B商量，以后每次聊天的时候都要进行一次身份验证，确认身份后就可以放心地各种扯。那怎么验证身份呢，有人就说了，说口令：“天王盖地虎”，“宝塔镇河妖”，……高贵的白富美B嫌这太土匪了，于是A决定使用RSA的思想做了一个小程序发给B，并商定，以后A发第一条消息的时候，会附带这条消息一个签名，B只要把签名拷到程序中解出来跟消息内容一致就说明是A在跟B聊天。现在我们来看一看A是怎么做的呢，A先想两个质数p=17和q=19，N=17×19=323，<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)=16×18=288}\" type=\"image/svg+xml\" />，去e=5，5d mod 288 = 1，根据扩展辗转相除法求得d=173。公钥是（323，173），密钥是（323，5），公钥和密钥是可以交换的，为了演示把（323，173）当作公钥。比如对2进行加密，<embed src=\"http://latex.codecogs.com/svg.latex?{2^{173}\\mod 323=15}\" type=\"image/svg+xml\" />，这个时候A发给B的第一条信息是2，15。当B收到这条消息时，她只要将15输入到小程序里面，输出的结果如果是2那么就说明这是就是没心没肺的那位，如果不是，B就可以启动反调戏程序。整个故事就这般完结了，可能有小伙伴就怀疑了，这难道不能破解么，我们来看一下怎么破解哈。因为公钥（323，173），你要设法去得到密钥第一步就是要将323进行分解，目前对一个整数分解成质因数的乘积只能通过简单粗暴的方法，就是一个一个去式，当然了，这个例子只是一个例子而已，323很快就能试出来，但是当这个整数很大的时候，这种简单粗暴的方法就歇菜了。正是因为 RSA 算法用到了大数分解难题，才保证了它的安全性。\n\n2009年12月12日，编号为RSA-768（768 bits, 232 digits）数也被成功分解。这一事件威胁了现通行的1024-bit密钥的安全性，普遍认为用户应尽快升级到2048-bit或以上。\n\nRSA-768表示如下：\n\n1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413\n= 33478071698956898786044169848212690817704794983713768568912431388982883793878002287614711652531743087737814467999489\n×\n36746043666799590428244633799627952632279158164343087642676032283815739666511279233373417143396810270092798736308917\n\n\n\n参考资料：\n1. [跨越千年的RSA算法](http://www.matrix67.com/blog/archives/5100)\n2. [RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)","source":"_posts/RSA系类（四）：完結篇.md","raw":"title: RSA系类（四）：完結篇\ntags:\n  - RSA算法\n  - 数学\n  - 欧拉函数\n  - 费马小定理\ncategories:\n  - 算法\ndate: 2015-02-04 23:53:00\n---\n\n\n昨天说到费马小定理可以表述成：如果 m 是一个质数的话，那么对于任意一个整数 n ，随着 i（<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in n^{0}} \" type=\"image/svg+xml\" />）的增加， n 的 i 次方除以 m 的余数将会呈现出长度为 m–1 的周期性。然后我们还提出了另一个问题，如果m不是质数，那么对于任意一个整数 n ，随着 i 的增加， n 的 i 次方除以 m 的余数将会呈现出多长的周期性呢？\n\n记<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)} \" type=\"image/svg+xml\" />为对于任意一个整数 n ，随着 i（<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in n^{0}} \" type=\"image/svg+xml\" />）的增加，n 的 i 次方除以 m 的余数的周期。\n\n1.现在我们先来看一下这种情况，如果m=p×q，其中p和q互质，由中国剩余定理可以可知：任意整数对m求余的余数和这个数分别对p、q求余组成的余数数对是一一对应关系。因此，对于任意一个整数 n ，随着 i 的增加， n 的 i 次方除以 m 的余数与n 的 i 次方分别除以p、q而组成的余数数对的周期性是一致的。而n 的 i 次方除以p的周期性可以根据费马小定理得（p-1），同理，可得n 的 i 次方除以q的周期性是（q-1）。那么(p-1)×(q-1)就是n 的 i 次方除以 m 的余数的一个周期，请注意，这里说的是一个周期，并没说是最小正周期，最小正周期一概是（p-1）和（q-1）的最小公倍数才对。为了方便，我只求出周期即可，所以通常只要(p-1)×(q-1)就行了。\n\n<!--more-->\n\n通过上面的分析可得：\n\n#### 结论一：当m=p×q，其中p和q都是互质，<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)=(p-1)×(q-1)} \" type=\"image/svg+xml\" />。\n\n2.如果<embed src=\"http://latex.codecogs.com/svg.latex?{m=p^{k}} \" type=\"image/svg+xml\" />，其中p是质数，k是正整数。\n\n我们先来看一张表：\n\n| i        | 0 | 1 |...| p |p+1|...| 2p|2p+1|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}-1} \" type=\"image/svg+xml\" />|\n| :-------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:-:|:-:|\n| i mod p  | 0 | 1 |...| 0 | 1 |...| 0 | 1  |...|p-1|\n| i mod <embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" /> | 0 | 1 |...| p |p+1|...| 2p|2p+1|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}-1} \" type=\"image/svg+xml\" />|\n| i        |<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" />|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+1} \" type=\"image/svg+xml\" />|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+p} \" type=\"image/svg+xml\" />|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+p+1} \" type=\"image/svg+xml\" />|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+2p} \" type=\"image/svg+xml\" />|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}+2p+1} \" type=\"image/svg+xml\" />|...|<embed src=\"http://latex.codecogs.com/svg.latex?{2p^{k}-1} \" type=\"image/svg+xml\" />|\n| i mod p  | 0 | 1 |...| 0 | 1 |...| 0 | 1  |...|p-1|\n| i mod <embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" /> | 0 | 1 |...| p |p+1|...| 2p|2p+1|...|<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}-1} \" type=\"image/svg+xml\" />|\n\n因为任意一个整数对p求余的余数的周期是p，任意一个整数对<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" />求余的余数的周期是<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" />，刚好是对p求余的余数的周期的倍<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k-1}} \" type=\"image/svg+xml\" />。由此可得：n 的 i 次方除以<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k}} \" type=\"image/svg+xml\" />的余数周期正好是n 的 i 次方除以p周期的<embed src=\"http://latex.codecogs.com/svg.latex?{p^{k-1}} \" type=\"image/svg+xml\" />倍。n 的 i 次方除以p周期可以由费马小定理得到，是(p-1)，因此：\n\n#### 结论二：当<embed src=\"http://latex.codecogs.com/svg.latex?{m=p^{k}} \" type=\"image/svg+xml\" />，其中p是质数，k是正整数时，<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)=(p-1)\\bullet p^{k-1}} \" type=\"image/svg+xml\" />。\n\n3.如果<embed src=\"http://latex.codecogs.com/svg.latex?{m=p_1^{k_1}p_2^{k_2}\\cdots p_r^{k_r}}\" type=\"image/svg+xml\" />，其中是质数<embed src=\"http://latex.codecogs.com/svg.latex?{p_i}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{k_i}\" type=\"image/svg+xml\" />是正整数，<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in[1,r]}\" type=\"image/svg+xml\" />；\n\n由于<embed src=\"http://latex.codecogs.com/svg.latex?{p_i}\" type=\"image/svg+xml\" />都是质数，所以<embed src=\"http://latex.codecogs.com/svg.latex?{p_i^{k_i}}\" type=\"image/svg+xml\" />之间彼此都没有相同的质因数，即<embed src=\"http://latex.codecogs.com/svg.latex?{p_i^{k_i}}\" type=\"image/svg+xml\" />两两互质。根据结论一可以知道<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)=\\varphi(p_1^{k_1}p_2^{k_2}\\cdots p_r^{k_r})=\\varphi(p_1^{k_1})\\bullet\\varphi(p_2^{k_2})\\bullet\\cdots\\bullet\\varphi(p_r^{k_r})}\" type=\"image/svg+xml\" />，根据结论二得：<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(p_i^{k_i})=p_i^{k_i-1}\\bullet(p_i-1})=p_i^{k_i}\\bullet(1-1/p_i)}\" type=\"image/svg+xml\" />，\n\n由此可得：\n#### 结论三：当<embed src=\"http://latex.codecogs.com/svg.latex?{m=p_1^{k_1}p_2^{k_2}\\cdots p_r^{k_r}}\" type=\"image/svg+xml\" />，其中<embed src=\"http://latex.codecogs.com/svg.latex?{p_i}\" type=\"image/svg+xml\" />是质数，<embed src=\"http://latex.codecogs.com/svg.latex?{k_i}\" type=\"image/svg+xml\" />是正整数，<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in[1,r]}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)&=&\\prod_{i=1}^{r}p_i^{k_i-1}(p_i-1)&=&m\\prod_{i=1}^{r}(1-1/p_i)}\" type=\"image/svg+xml\" />，而所有的整数都能表示成<embed src=\"http://latex.codecogs.com/svg.latex?{m=p_1^{k_1}p_2^{k_2}\\cdots p_r^{k_r}}\" type=\"image/svg+xml\" />，即：对于任意的整数m，都有<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)&=&\\prod_{i=1}^{r}p_i^{k_i-1}(p_i-1)&=&m\\prod_{i=1}^{r}(1-1/p_i)}\" type=\"image/svg+xml\" />。\n\n这个结果正好就是[欧拉函数](https://zh.wikipedia.org/wiki/欧拉函数)。\n\n由于结论一和结论二都是结论三的特例，从而有结论：\n#### 结论四：对任意正整数n 的 i 次方除以 m 的余数将会呈现出长度<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(m)&=&\\prod_{i=1}^{r}p_i^{k_i-1}(p_i-1)&=&m\\prod_{i=1}^{r}(1-1/p_i)}\" type=\"image/svg+xml\" />的周期。即<embed src=\"http://latex.codecogs.com/svg.latex?{n^{\\varphi(m)+1}&\\equiv&n(\\mod m)}\" type=\"image/svg+xml\" />。\n\n如果n和m互质，也就是下面第三个原理中的(n，m)=1的含义，根据下面除法原理的第三个原理，\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{(1):a\\equiv b(\\mod cn)\\Rightarrow a\\equiv b(\\mod n)}\\\\{(2):\\left.\\begin{aligned}a\\equiv b(\\mod m)\\\\n|m\\end{aligned}\\right\\}\\Rightarrow a\\equiv b(\\mod n)}\\\\{(3):\\left.\\begin{aligned}ac \\equiv bc(\\mod m)\\\\(c,m) = 1\\end{aligned}\\right\\}\\Rightarrow a \\equiv b(\\mod m)}\\\\{(4):\\left.\\begin{aligned} a &\\equiv& b(\\mod m_1)\\\\a &\\equiv& b(\\mod m_2)\\\\ &\\vdots& \\\\a &\\equiv& b(\\mod m_n)\\\\(&n \\ge 2)\\end{aligned}\\right\\}\\Rightarrow a\\equiv b(\\mod [m_1,m_2,\\cdots,m_n])}\" type=\"image/svg+xml\" />\n\n将n消掉，得：\n\n结论五：当n和m互质时，\n<embed src=\"http://latex.codecogs.com/svg.latex?{n^{\\varphi(m)}\\equiv 1(\\mod m)}\" type=\"image/svg+xml\" />，这就是费马小定理的广义定义，也就是[欧拉定理](https://zh.wikipedia.org/wiki/欧拉定理_(数论))（也称费马-欧拉定理或欧拉函数定理）。\n\n好了，终于把这些理论说完了，下面接着把最后一道题目解完吧。\n\n题目：你在心里想好一个3位数，然后将这个数乘以91，最后把乘积的末尾三个数字发给我，让我猜猜你心里想的那个3位数是什么？\n\n参考答案：\n\n当时只有一位小伙伴参与了这个游戏，他发给我的三位数字是250，我的回答是750。这里面的玄机是什么呢？\n\n先来看个例子：(13×27×45) mod 17 = ?，我们可以求13×27×45=15795，然后用15795÷17=929…2，得到结果是2；你还可以这么计算：\n\n[(13×27 mod 17)×45] mod 17分解成下面的步骤：\n\n13×27 mod 17 = 11，\n\n11×45 mod 17 = 2，\n\n答案也是2，这说明取模运算不论是在最后一次性求，还是在求解过程中就开始进行取模，都不会影响最后的结果。这个游戏中发送方进行了一次取模，末尾三个数字，其实就是对1000取模。如果我能求出一个数y=m×n，使得下面这个式子成立：<embed src=\"http://latex.codecogs.com/svg.latex?{a\\bullet y\\equiv q (\\mod 1000)}\" type=\"image/svg+xml\" />，然后将m公开给所有人，n只有你自己知道，这样不论别人发什么给你，你都可以根据这个式子求出这个a，根据式子可得：ay=1000k + a，a和k是整数，因为要让等式与a无关，我们令k=k’a，当a=0，很容易猜出数字是0，当a不等于0，等式变形为y=1000k’+1。恰好1001=91×11，y就取值为1001，那么m=91,n=11。让我们来还原250的原数吧，250×11=2750，2750 mod 1000 = 750。验证一下对不对，750×91 = 68250，68250 mod 1000 = 250，完全正确。Ok，到这所有这个游戏也解决了，有兴趣的小伙伴可以跟别人玩一玩哦。\n\n进入本系列的最后一个主题：RSA加密算法\n\n先来梳理一下猜数游戏，通过一种算法得到这么两组数据，一组是(N,E)，对外公开，我们称它为公钥，比如游戏中(1000,91)；另一组是(N,D)，自己保存，不能让其他人知道，我们称它为私钥，比如游戏中的(1000,11)。根据某种算法用(N,E)对数据进行加密，然后通过某种算法用(N,D)对数据进行解密，最后得到原始数据，从而完成安全的通信，上面提到的私钥不能公开。这就非对称加密算法的基本思想。那有小伙伴就会问了，要这么麻烦干嘛，直接用一个密钥对数据进行加密，然后秘密的告诉要解密的小伙伴这个密钥，不就可以完成数据的安全通信吗？当然可以，生活中很多这种加密方式，加密压缩包就是一个例子。这种是对称加密算法的思路，不过这里面有一个问题，如何安全的把密钥告诉其他小伙伴呢？你可能说这个很简单，当面告诉他，或者发短信打电话告诉他。好吧，现实生活中这种方法不失为一种解决方案，但是在互联网中通信的可不是人，而是计算机或者更精确一点说应该是进程，这就成问题了。\n\n下面对非对称加密方法原理进行详细的阐述一下：\n\n在互联网中，所有的数据都是用二进制数表示，我们都可以将它们用整数表示，比如说：在计算机中字符’A’，它的二进制表示就是：01000001，用整数表示就是65，通过前面对数论知识的介绍，我们知道：任意整数 x ，随着 i（<embed src=\"http://latex.codecogs.com/svg.latex?{i\\in n^{0}}\" type=\"image/svg+xml\" />）的增加，x 的 i 次方除以 N 的余数会呈现出以欧拉函数<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)}\" type=\"image/svg+xml\" />为长度的周期性。也就是说如果我们把我们要加密的数据x，也称为明文,对x进行e（<embed src=\"http://latex.codecogs.com/svg.latex?{0<e<\\varphi(N)}\" type=\"image/svg+xml\" />）次幂得<embed src=\"http://latex.codecogs.com/svg.latex?{x^{e}}\" type=\"image/svg+xml\" />，用<embed src=\"http://latex.codecogs.com/svg.latex?{x^{e}}\" type=\"image/svg+xml\" />对N求余，得到密文y，这就是整个加密过程。解密过程是这样的，将得到的密文y进行<embed src=\"http://latex.codecogs.com/svg.latex?{(k\\varphi(N)+1)\\div e}\" type=\"image/svg+xml\" />（k为整数，当然这个结果一定要为整数）次幂得<embed src=\"http://latex.codecogs.com/svg.latex?{y^{k\\varphi(N)+1}}\" type=\"image/svg+xml\" />，再将<embed src=\"http://latex.codecogs.com/svg.latex?{y^{k\\varphi(N)+1}}\" type=\"image/svg+xml\" />对N求余，由于对x总共进行了<embed src=\"http://latex.codecogs.com/svg.latex?{k\\varphi(N)+1}\" type=\"image/svg+xml\" />次幂（虽然中途对N求过模，但是不会影响最后求模的结果，虽然本文没有证明，有兴趣的小伙伴可以自行证明），由于x的i次方对N取余的余数的周期有<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)}\" type=\"image/svg+xml\" />，即：<embed src=\"http://latex.codecogs.com/svg.latex?{x\\equiv x^{\\varphi(N)+1}\\equiv x^{k\\varphi(N)+1}(\\mod N)}\" type=\"image/svg+xml\" />，当N>x，这可以看出x mod N = x，<embed src=\"http://latex.codecogs.com/svg.latex?{x^{k\\varphi(N)+1}\\mod N = x}\" type=\"image/svg+xml\" />，从而得出了明文x。\n\n现在问题在于这个e该怎么取值，才能使得<embed src=\"http://latex.codecogs.com/svg.latex?{(k\\varphi(N)+1)\\div e}\" type=\"image/svg+xml\" />是整数呢？在RSA加密算法中，令N=p×q，并且p与q是非常大的质数，且p不等于q。明显，p与q互质，根据欧拉函数得出：<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)=(p-1)(q-1)}\" type=\"image/svg+xml\" />。假设有一个整数d，满足<embed src=\"http://latex.codecogs.com/svg.latex?{d=(k\\varphi(N)+1)\\div e}\" type=\"image/svg+xml\" />，即：<embed src=\"http://latex.codecogs.com/svg.latex?{ed=k\\varphi(N)+1}\" type=\"image/svg+xml\" />，亦即：<embed src=\"http://latex.codecogs.com/svg.latex?{ed\\equiv 1(\\mod \\varphi(N))}\" type=\"image/svg+xml\" />，要使得这个式子d有解，根据之前的分水问题的结论可以知道，只有e和<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)}\" type=\"image/svg+xml\" />互质时，d才有解。所以，我们可以随机选择一个整数e，使得e满足<embed src=\"http://latex.codecogs.com/svg.latex?{1<e<\\varphi(N)}\" type=\"image/svg+xml\" />且e与<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)}\" type=\"image/svg+xml\" />互质。再根据扩展辗转相除发求出d，这样我们就生成出了公钥(N，e)和密钥(N，d)。\n\n举个例子吧，假如迪奥斯A和白富美B在热恋中，通信过程中各种甜言蜜语，有一天，A室友趁A不在的时候用A的QQ各种调戏B，搞的A跪了好几天主板，于是A和B商量，以后每次聊天的时候都要进行一次身份验证，确认身份后就可以放心地各种扯。那怎么验证身份呢，有人就说了，说口令：“天王盖地虎”，“宝塔镇河妖”，……高贵的白富美B嫌这太土匪了，于是A决定使用RSA的思想做了一个小程序发给B，并商定，以后A发第一条消息的时候，会附带这条消息一个签名，B只要把签名拷到程序中解出来跟消息内容一致就说明是A在跟B聊天。现在我们来看一看A是怎么做的呢，A先想两个质数p=17和q=19，N=17×19=323，<embed src=\"http://latex.codecogs.com/svg.latex?{\\varphi(N)=16×18=288}\" type=\"image/svg+xml\" />，去e=5，5d mod 288 = 1，根据扩展辗转相除法求得d=173。公钥是（323，173），密钥是（323，5），公钥和密钥是可以交换的，为了演示把（323，173）当作公钥。比如对2进行加密，<embed src=\"http://latex.codecogs.com/svg.latex?{2^{173}\\mod 323=15}\" type=\"image/svg+xml\" />，这个时候A发给B的第一条信息是2，15。当B收到这条消息时，她只要将15输入到小程序里面，输出的结果如果是2那么就说明这是就是没心没肺的那位，如果不是，B就可以启动反调戏程序。整个故事就这般完结了，可能有小伙伴就怀疑了，这难道不能破解么，我们来看一下怎么破解哈。因为公钥（323，173），你要设法去得到密钥第一步就是要将323进行分解，目前对一个整数分解成质因数的乘积只能通过简单粗暴的方法，就是一个一个去式，当然了，这个例子只是一个例子而已，323很快就能试出来，但是当这个整数很大的时候，这种简单粗暴的方法就歇菜了。正是因为 RSA 算法用到了大数分解难题，才保证了它的安全性。\n\n2009年12月12日，编号为RSA-768（768 bits, 232 digits）数也被成功分解。这一事件威胁了现通行的1024-bit密钥的安全性，普遍认为用户应尽快升级到2048-bit或以上。\n\nRSA-768表示如下：\n\n1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413\n= 33478071698956898786044169848212690817704794983713768568912431388982883793878002287614711652531743087737814467999489\n×\n36746043666799590428244633799627952632279158164343087642676032283815739666511279233373417143396810270092798736308917\n\n\n\n参考资料：\n1. [跨越千年的RSA算法](http://www.matrix67.com/blog/archives/5100)\n2. [RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)","slug":"RSA系类（四）：完結篇","published":1,"updated":"2016-07-14T06:36:15.717Z","_id":"ciqlxtcpg0014f8b9cdnu0n6t","comments":1,"layout":"post","photos":[],"link":""},{"title":"RSA系类（二）：分水问题","date":"2015-02-02T14:13:00.000Z","_content":"\n\n再次声明：本文只写给对数学或者计算机感兴趣的小伙伴们！\n\n今天先对昨天日记有严重问题的地方进行修正：\n\n1）还有下面这句话是有很严重的错误的，少了一个前提，为了叙述方便我们设A÷B=C···R，\n下面这句话成立的条件是C=1，A：B=B：R，又因为R=A-B，从而得A：B=B：(A-B)，解出\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\frac{B}{A}=\\frac{\\sqrt{5}-1}{2}\\approx\\frac{0.618}{1}} \" type=\"image/svg+xml\" />\n\n顺便提一下，这个时候被除数和除数的比例关系正好满足黄金分割比例1：0.618\n\n好了，现在开始解题：\n#### 2、假如你有一个6升的容器和一个9升的容器（以及充足的水源，容器没有刻度），1到8升水哪些呢取出来，哪些不能取出来，为什么，假如你有一个a升的容器和一个b升的容器（以及充足的水源，容器没有刻度），1到max{a,b}-1升水哪些呢取出来，哪些不能取出来，为什么？（说明：max{a,b}表示a和b中较大的那个数）\n\n<!--more-->\n\n参考答案：\n\n先从一个简单的情况说起：假如你有一个 3 升的容器和一个5升的容器（以及充足的水源），如何精确的得到4升水？\n\n将3 升的容器记为A，5升的容器记为B：\n\n1） 将 A 装满，此时 A 中的水为 3 升， B 中的水为 0 升；\n\n2） 将 A 里的水全部倒入 B ，此时 A 中的水为 0 升， B 中的水为 3 升；\n\n3） 将 A 装满，此时 A 中的水为 3 升， B 中的水为 3 升；\n\n4） 将 A 里的水倒入 B 直到把 B 装满，此时 A 中的水为 1 升， B 中的水为 5 升；\n\n5） 将 B 里的水全部倒掉，此时 A 中的水为 1 升， B 中的水为 0 升；\n\n6） 将 A 里剩余的水全部倒入 B ，此时 A 中的水为 0 升， B 中的水为 1 升；\n\n7） 将 A 装满，此时 A 中的水为 3 升， B 中的水为 1 升；\n\n8） 将 A 里的水全部倒入 B ，此时 A 中的水为 0 升， B 中的水为 4 升；\n\n \n\n现在我们尝试把这个过程用数学语言来表述一下：由于容器没有刻度，而且取水的过程都是一容器一容器的去取，由此可以得出总的取水量是A容器的整数倍，Ｂ容器倒水也是一容器一容器的倒，所以倒出去的水也就是B容器的整数倍。而最后剩余的水就是n次A容器取水的总量减掉m次B容器倒水的总量。因此得出：3×n - 5×m=4，求出m,n就能得到结果。现在的问题来了，这个二元不定方程怎么求呢？有小伙伴说哪来那么多事，写个程序，直接从1开始，一个一个的往后面试就是了。这个小伙伴的方法很好，从这可以看出这个小伙伴是一个直截了当或者说简单粗暴的人，我喜欢，哈哈。不过，这里有个方法你可以试一试，如果我们能求出3×n’ + 5×m’=1,那么就能很快得出3×n’×4 - 5×(-m’)×4=4，要求解这个3×n’ + 5×m’=1这个不定式，我们得先回顾一下第一道题里面的辗转相除法：\n\n1）210 ÷165=1 ···45（余数）；\n\n2）165÷45=3···30（余数）；\n\n3）45÷30=1···15（余数）；\n\n4）30÷15=2···0（余数）；\n\n我们这样就能确定出最大公因数15，现在我们把上面的步骤换一种表示方法：\n\n1）45=210×1+165×(-1)；\n\n2）30=165×1+45×(-3)；\n\n3）15=45×1+30×(-1)；\n\n4）0=30×1+15×(-2)；\n\n现在我们忽略最后一个等式，把45和30这两个数看做是两个未知数，然后将2）式代入3）式替换掉30，再将结果等式中的45用1）式替换，也就是从下往上，依次将上面一个等式右边的式子代换掉下面等式右边式子中等于上面等式左边的那个数：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}30&=&165\\times1+45\\times(-3)\\\\15&=&45\\times1+30\\times(-1)\\end{aligned}\\right\\}\\Rightarrow15=45\\times1+[165\\times1+45\\times(-3)]\\times(-1) }\" type=\"image/svg+xml\" />\n\n化简得15=45×4+165×(-1)，再将1）式替换掉45得：\n\n15=[210×1+165×(-1)]×4+165×(-1)，化简得：210×4+165×(-5)=15，好神奇的一种方法呀，最后居然化简出了一个由原来被除数和除数做为系数，最大公约数作为结果的一个等式，我们可以按照刚才的那种方法来求解任何一个满足ax+by=a和b最大公约数的不定方程，这种求解方法叫做[扩展欧几里得算法](https://zh.wikipedia.org/wiki/扩展欧几里得算法)或者[扩展辗转相除法](https://zh.wikipedia.org/wiki/扩展欧几里得算法)。我们可以来试一试3×n’ + 5×m’=1这个不定方程，因为3和5的最大公因数就是1,从而满足要求，先对5和3进行辗转相除法：\n\n1）5÷3=1 ···2（余数）；\n\n2）3÷2=1···1（余数）；\n\n3）2÷1=2···0（余数）；\n\n转换一下：\n\n1）2=5×1+3×(-1)；\n\n2）1=3×1+2×(-1)；\n\n代入的：\n\n3×2 + 5×(-1)=1  \n\n所以n’=2，m’=-1；\n\n最后，我们求解一下3×n - 5×m=4这个不定方程：\n\n3×2 + 5×(-1)=1两边同时乘以4得：3×8 + 5×(-4)=4，从而得出：n=8，m=-4，有些聪明的小伙伴就会说：“我书读的少，你不要骗我，这个结果跟前面倒水过程的结果明显不相等”，好吧，我承认我是在忽悠你，这个结果其实很明显了：由于3的5倍刚好等于5的3倍，等式再变换一下的：3×3 + 3×5 + 5×(-4) = 3×3 + 5×(-1)，这种简单情况终于解释完了。\n\n回答一下原始问题：6升和9升的容器，根据上面的结论，应该很容易得出：6x+9y=3一定有解的，同时能准确取出3的倍数升水。所以1到8升水中3升和6升水是可以取出来的，那其余的能取出来吗，为什么呢？答案是不能，有兴趣的小伙伴可以去查看[裴蜀定理](https://zh.wikipedia.org/wiki/貝祖等式)。从上面的分析，我们能得出，a升和b升容器的答案：在区间[1,max{a,b}-1]上的a和b的最大公约数的整数倍是能够精确取出来的。\n\n参考资料：\n1. [跨越千年的RSA算法](http://www.matrix67.com/blog/archives/5100)\n2. [RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)","source":"_posts/RSA系类（二）：分水问题.md","raw":"title: RSA系类（二）：分水问题\ntags:\n  - RSA算法\n  - 数学\n  - 扩展辗转相除法\ncategories:\n  - 算法\ndate: 2015-02-02 22:13:00\n---\n\n\n再次声明：本文只写给对数学或者计算机感兴趣的小伙伴们！\n\n今天先对昨天日记有严重问题的地方进行修正：\n\n1）还有下面这句话是有很严重的错误的，少了一个前提，为了叙述方便我们设A÷B=C···R，\n下面这句话成立的条件是C=1，A：B=B：R，又因为R=A-B，从而得A：B=B：(A-B)，解出\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\frac{B}{A}=\\frac{\\sqrt{5}-1}{2}\\approx\\frac{0.618}{1}} \" type=\"image/svg+xml\" />\n\n顺便提一下，这个时候被除数和除数的比例关系正好满足黄金分割比例1：0.618\n\n好了，现在开始解题：\n#### 2、假如你有一个6升的容器和一个9升的容器（以及充足的水源，容器没有刻度），1到8升水哪些呢取出来，哪些不能取出来，为什么，假如你有一个a升的容器和一个b升的容器（以及充足的水源，容器没有刻度），1到max{a,b}-1升水哪些呢取出来，哪些不能取出来，为什么？（说明：max{a,b}表示a和b中较大的那个数）\n\n<!--more-->\n\n参考答案：\n\n先从一个简单的情况说起：假如你有一个 3 升的容器和一个5升的容器（以及充足的水源），如何精确的得到4升水？\n\n将3 升的容器记为A，5升的容器记为B：\n\n1） 将 A 装满，此时 A 中的水为 3 升， B 中的水为 0 升；\n\n2） 将 A 里的水全部倒入 B ，此时 A 中的水为 0 升， B 中的水为 3 升；\n\n3） 将 A 装满，此时 A 中的水为 3 升， B 中的水为 3 升；\n\n4） 将 A 里的水倒入 B 直到把 B 装满，此时 A 中的水为 1 升， B 中的水为 5 升；\n\n5） 将 B 里的水全部倒掉，此时 A 中的水为 1 升， B 中的水为 0 升；\n\n6） 将 A 里剩余的水全部倒入 B ，此时 A 中的水为 0 升， B 中的水为 1 升；\n\n7） 将 A 装满，此时 A 中的水为 3 升， B 中的水为 1 升；\n\n8） 将 A 里的水全部倒入 B ，此时 A 中的水为 0 升， B 中的水为 4 升；\n\n \n\n现在我们尝试把这个过程用数学语言来表述一下：由于容器没有刻度，而且取水的过程都是一容器一容器的去取，由此可以得出总的取水量是A容器的整数倍，Ｂ容器倒水也是一容器一容器的倒，所以倒出去的水也就是B容器的整数倍。而最后剩余的水就是n次A容器取水的总量减掉m次B容器倒水的总量。因此得出：3×n - 5×m=4，求出m,n就能得到结果。现在的问题来了，这个二元不定方程怎么求呢？有小伙伴说哪来那么多事，写个程序，直接从1开始，一个一个的往后面试就是了。这个小伙伴的方法很好，从这可以看出这个小伙伴是一个直截了当或者说简单粗暴的人，我喜欢，哈哈。不过，这里有个方法你可以试一试，如果我们能求出3×n’ + 5×m’=1,那么就能很快得出3×n’×4 - 5×(-m’)×4=4，要求解这个3×n’ + 5×m’=1这个不定式，我们得先回顾一下第一道题里面的辗转相除法：\n\n1）210 ÷165=1 ···45（余数）；\n\n2）165÷45=3···30（余数）；\n\n3）45÷30=1···15（余数）；\n\n4）30÷15=2···0（余数）；\n\n我们这样就能确定出最大公因数15，现在我们把上面的步骤换一种表示方法：\n\n1）45=210×1+165×(-1)；\n\n2）30=165×1+45×(-3)；\n\n3）15=45×1+30×(-1)；\n\n4）0=30×1+15×(-2)；\n\n现在我们忽略最后一个等式，把45和30这两个数看做是两个未知数，然后将2）式代入3）式替换掉30，再将结果等式中的45用1）式替换，也就是从下往上，依次将上面一个等式右边的式子代换掉下面等式右边式子中等于上面等式左边的那个数：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}30&=&165\\times1+45\\times(-3)\\\\15&=&45\\times1+30\\times(-1)\\end{aligned}\\right\\}\\Rightarrow15=45\\times1+[165\\times1+45\\times(-3)]\\times(-1) }\" type=\"image/svg+xml\" />\n\n化简得15=45×4+165×(-1)，再将1）式替换掉45得：\n\n15=[210×1+165×(-1)]×4+165×(-1)，化简得：210×4+165×(-5)=15，好神奇的一种方法呀，最后居然化简出了一个由原来被除数和除数做为系数，最大公约数作为结果的一个等式，我们可以按照刚才的那种方法来求解任何一个满足ax+by=a和b最大公约数的不定方程，这种求解方法叫做[扩展欧几里得算法](https://zh.wikipedia.org/wiki/扩展欧几里得算法)或者[扩展辗转相除法](https://zh.wikipedia.org/wiki/扩展欧几里得算法)。我们可以来试一试3×n’ + 5×m’=1这个不定方程，因为3和5的最大公因数就是1,从而满足要求，先对5和3进行辗转相除法：\n\n1）5÷3=1 ···2（余数）；\n\n2）3÷2=1···1（余数）；\n\n3）2÷1=2···0（余数）；\n\n转换一下：\n\n1）2=5×1+3×(-1)；\n\n2）1=3×1+2×(-1)；\n\n代入的：\n\n3×2 + 5×(-1)=1  \n\n所以n’=2，m’=-1；\n\n最后，我们求解一下3×n - 5×m=4这个不定方程：\n\n3×2 + 5×(-1)=1两边同时乘以4得：3×8 + 5×(-4)=4，从而得出：n=8，m=-4，有些聪明的小伙伴就会说：“我书读的少，你不要骗我，这个结果跟前面倒水过程的结果明显不相等”，好吧，我承认我是在忽悠你，这个结果其实很明显了：由于3的5倍刚好等于5的3倍，等式再变换一下的：3×3 + 3×5 + 5×(-4) = 3×3 + 5×(-1)，这种简单情况终于解释完了。\n\n回答一下原始问题：6升和9升的容器，根据上面的结论，应该很容易得出：6x+9y=3一定有解的，同时能准确取出3的倍数升水。所以1到8升水中3升和6升水是可以取出来的，那其余的能取出来吗，为什么呢？答案是不能，有兴趣的小伙伴可以去查看[裴蜀定理](https://zh.wikipedia.org/wiki/貝祖等式)。从上面的分析，我们能得出，a升和b升容器的答案：在区间[1,max{a,b}-1]上的a和b的最大公约数的整数倍是能够精确取出来的。\n\n参考资料：\n1. [跨越千年的RSA算法](http://www.matrix67.com/blog/archives/5100)\n2. [RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)","slug":"RSA系类（二）：分水问题","published":1,"updated":"2016-07-13T08:36:51.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcps001ef8b9pkd41ok9"},{"title":"RSA系类（三）：从物不知数到中国剩余定理和费马小定理","date":"2015-02-03T15:51:00.000Z","_content":"\n\n先对昨天的错误进行修正：“最后，我们求解一下3×n - 5×m=4这个不定方程： 3×2 + 5×(-1)=1两边同时乘以4得：3×8 + 5×(-4)=4，从而得出：n=8，m=-4”，这句话中的m=-4应该改成m=4。\n\n下面进入今天的主题： \n\n#### 3、今有物不知其数，三三数之剩二；五五数之剩三；七七数之剩二。问物几何?\n{% blockquote 维基百科 http://baike.baidu.com/link?url=nUHiJ81_AIP_fx3ebRpG4BJBAkPfOdEkaqfT6g3_A12-soPBRF6fzKSQQRZuvNMDEe7lhfworl2v_TBb9g5Kba 物不知数%}\n中国古代著名算题。原载《孙子算经》卷下第二十六题：“今有物不知其数，三三数之剩二；五五数之剩三；七七数之剩二。问物几何?”当时虽已有了答案23，但它的系统解法是秦九韶在《数书九章·大衍求一术》中给出的。大衍求一术（也称作“中国剩余定理”）是中国古算中最有独创性的成就之一，属现代数论中的一次同余式组问题。\n{% endblockquote %}\n<!--more-->\n\n今天讨论一下中国剩余定理，先把这个‘物不知数’这个问题解决。\n\n参考答案：\n\n先回顾一下分水问题，我们首先对一种简单的情况进行数学抽象，得出要解决分水问题，就要先解出3×n - 5×m=1这个二元不定式，再根据扩展欧几里得算法求得m、n，得出结果，最后总结出：在区间[1,max{a,b}-1]上的a和b的最大公约数的整数倍是能够精确取出来的，这其实就是裴蜀定理。\n\n现在我们把这个数学抽象变化一下，变成这个样子：<embed src=\"http://latex.codecogs.com/svg.latex?{3x\\mod5=1} \" type=\"image/svg+xml\" />，抑或者是：<embed src=\"http://latex.codecogs.com/svg.latex?{3x\\equiv1(\\mod 5)} \" type=\"image/svg+xml\" />，这两个等式都是表示3x除以5的余数为1（如有小伙伴还不明白等式是什么含义请参考[同余](https://zh.wikipedia.org/wiki/同餘)）。由于这两个式子和3×n - 5×m=1都是对分水问题的数学抽象，因此，都可以使用扩展欧几里得算法求解x，请记住这种方法，待会用的着。\n\n先给出同余的概念：当两个整数除以同一个正整数，若得相同余数，则两整数[同余](https://zh.wikipedia.org/wiki/同餘)。\n\n下面几个同余的性质接下来可能用得着：\n\n1）传递性\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\b&\\equiv&c(\\mod m)\\end{aligned}\\right\\}\\Rightarrow a\\equiv c(\\mod m)}\" type=\"image/svg+xml\" />\n2）保持基本运算\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\c&\\equiv&d(\\mod m)\\end{aligned}\\right\\}\\Rightarrow \\left\\{\\begin{aligned}a\\pm c&\\equiv&b\\pm d(\\mod m)\\\\ac&\\equiv&bd(\\mod m)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n这性质更可进一步引申成为这样：\n<embed src=\"http://latex.codecogs.com/svg.latex?{a\\equiv b(\\mod m)\\Rightarrow \\left\\{\\begin{aligned}an&\\equiv&bn(\\mod m),\\forall n\\in\\mathbb{Z}\\\\a^{n}&\\equiv&b^{n}(\\mod m),\\forall n \\in \\mathbb{N}^{0}\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n \n好了，开始解题：\n\n以下解题过程中都是针对整数而言，没有特殊说明都是指整数。\n\n设这个整数为x，\n\n根据题意可得：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{(S):\\left\\{\\begin{aligned}x&\\equiv&2 (\\mod3)\\\\x&\\equiv&3(\\mod5)\\\\x&\\equiv&2(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n\n我们来思考这么一种情况：\n\n如果一个整数X1满足，X1是5和7的倍数，除以3的余数是2，那么就能推出下面这组同余式：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x_1&\\equiv&2 (\\mod3)\\\\x_1&\\equiv&0(\\mod5)\\\\x_1&\\equiv&0(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n\n同理，整数X2满足，X2是3和7的倍数，除以5的余数是3，整数X3满足，X3是3和5的倍数，除以7的余数是2：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x_2&\\equiv&0 (\\mod3)\\\\x_2&\\equiv&3(\\mod5)\\\\x_2&\\equiv&0(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x_3&\\equiv&0 (\\mod3)\\\\x_3&\\equiv&0(\\mod5)\\\\x_3&\\equiv&2(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n根据\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\c&\\equiv&d(\\mod m)\\end{aligned}\\right\\}\\Rightarrow a\\pm c&\\equiv&b\\pm d(\\mod m)}\" type=\"image/svg+xml\" />\n得：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}x_1&\\equiv&2(\\mod 3)\\\\x_2&\\equiv&0(\\mod 3)\\end{aligned}\\right\\}\\Rightarrow x_1+ x_2&\\equiv&2+0(\\mod 3)}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}x_1+x_2&\\equiv&2(\\mod 3)\\\\x_3&\\equiv&0(\\mod 3)\\end{aligned}\\right\\}\\Rightarrow x_1+ x_2+x_3&\\equiv&2+0(\\mod 3)}\" type=\"image/svg+xml\" />\n所以：\n<embed src=\"http://latex.codecogs.com/svg.latex?{ x_1+ x_2+x_3&\\equiv&2(\\mod 3)}\" type=\"image/svg+xml\" />；\n同理可得：\n<embed src=\"http://latex.codecogs.com/svg.latex?{ x_1+ x_2+x_3&\\equiv&3(\\mod 5)}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{ x_1+ x_2+x_3&\\equiv&2(\\mod 7)}\" type=\"image/svg+xml\" />；\n\n因此，只要我们求得X1+X2+X3就是答案。现在我们来看一下X1怎么求解吧：\n\n根据\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x_1&\\equiv&2 (\\mod3)\\\\x_1&\\equiv&0(\\mod5)\\\\x_1&\\equiv&0(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />等价于<embed src=\"http://latex.codecogs.com/svg.latex?{5\\times 7\\times x_1^{'}&\\equiv&2(\\mod 3)}\" type=\"image/svg+xml\" />，因此只要求出x1'即可求出答案，这个时候就得用上扩展欧几里得算法求出x1'，哈哈，整个人都神清气爽了有木有。我们再把上面等式翻译成分水问题，有35升和3升无刻度的两个容器，现在只能用35升的容器取水，3升的容器倒水，请精确取出2升水。\n\n我们还是根据扩展欧几里得算法得出：\n\n3×12 + 35×(-1) =1，这个结果好像不对头，它是用3升的容器取水，35升容器倒水的结果，那该怎么办呢？很简单等式两边同时乘以-1，就变成了35升的容器取水，3升的容器倒水，第12次倒水后得-1，这明显不可能，少倒一次水，剩下的就正好是2升水，所以x1'=1。\n\n同理求出<embed src=\"http://latex.codecogs.com/svg.latex?{ x_2^{'}=3,x_3^{'}=2}\" type=\"image/svg+xml\" />；\n\n从而得出<embed src=\"http://latex.codecogs.com/svg.latex?{ x_1=35,x_2=63,x_3=30}\" type=\"image/svg+xml\" />，\n\n最后得出x=X1+X2+X3=128，\n\n这个地方碰巧，很容易能取出2升水，我们还是按照我们先取出1升，让后再根据倍数关系，求得2升水吧，这样的话更具有规律性。\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}35\\times 1+3\\times (-12)&=&-1\\\\35\\times 1+3\\times(-11)&=&2\\end{aligned}\\right\\}\\Rightarrow 35\\times 2+3\\times (-23)=1}\" type=\"image/svg+xml\" />，从而x1'=2×2=4，同理得x2'=3，x3'=2，此时我们称x1'、x2'、x3'为模逆元，由于它们形如：<embed src=\"http://latex.codecogs.com/svg.latex?{x_1^{'}\\times M&\\equiv&1(\\mod m)}\" type=\"image/svg+xml\" />，所以也称为数论倒数；\n\n从而得出x1=140，x2=63，x3=30，\n\n最后得出x=X1+X2+X3=233，\n\n聪明的小伙伴立刻明白答案不止一个，23也是对的，而且还有无数多个解，下面进一步说明一下：\n\n由于3,5,7这三个数是两两互质，所以它们的最小公倍数是3×5×7=105,105显然能同时整除3,5,7。根据下面这个性质：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\c&\\equiv&d(\\mod m)\\end{aligned}\\right\\}\\Rightarrowa\\pm c&\\equiv&b\\pm d(\\mod m)}\" type=\"image/svg+xml\" />\nx+k×105显然还是满足\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x+k\\times 105&\\equiv&2(\\mod 3)\\\\x+k\\times 105&\\equiv&3(\\mod 5)\\\\x+k\\times 105&\\equiv&2(\\mod 7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />,\n因此，这个问题的通解是：<embed src=\"http://latex.codecogs.com/svg.latex?{23+k\\times 105,k\\in\\mathbb{Z}}\" type=\"image/svg+xml\" />。\n\nOk，解题完毕，物不知数就是中国剩余定理的一个实例。现在来看孙子定理也就是中国剩余定理：给出 i 个两两互质的整数，记为<embed src=\"http://latex.codecogs.com/svg.latex?{\\display m_1,m_2,m_3,\\cdots,m_i}\" type=\"image/svg+xml\" />，它们的乘积为 P ；假设有一个未知数 M ，如果我们已知 M 分别除以这 m 个数所得的余数，记为<embed src=\"http://latex.codecogs.com/svg.latex?{\\display r_1,r_2,r_3,\\cdots,r_i}\" type=\"image/svg+xml\" />那么在 0 到 P–1 的范围内，我们可以唯一地确定这个 M 。现代数学语言的描述，我就不贴了，有兴趣的同学就自己看wiki吧。\n\n我们从定义里面可以看出中国剩余定理有以下两点特性：\n\n1.当的整数时<embed src=\"http://latex.codecogs.com/svg.latex?{M\\in[0,P-1]}\" type=\"image/svg+xml\" />每一组余数（记为：<embed src=\"http://latex.codecogs.com/svg.latex?{\\display r_1,r_2,r_3,\\cdots,r_i}\" type=\"image/svg+xml\" />）都有唯一的一个M与之对应，而且每一个M也只有一组余数与之对应，即M与<embed src=\"http://latex.codecogs.com/svg.latex?{\\display r_1,r_2,r_3,\\cdots,r_i}\" type=\"image/svg+xml\" />是一一对应关系，由于M的取值恰好是任意整数对P求余的余数，所以结论也可以表述为任意整数对P的余数与<embed src=\"http://latex.codecogs.com/svg.latex?{\\display r_1,r_2,r_3,\\cdots,r_i}\" type=\"image/svg+xml\" />是一一对应关系；\n\n2.在<embed src=\"http://latex.codecogs.com/svg.latex?{m\\in\\mathbb{Z}}\" type=\"image/svg+xml\" />，如果余数数组看作m的一个函数，那么函数呈现周期性，且m的最小正周期是P。\n\n \n\n下面举个例：\n\n2个互质的整数3和10，它们的乘积是30，那么在[0,29]区间内的数，分别处以3和10的余数如下表所示：\n\n| i        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| :-------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| i mod 3  | 0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 | 0 |\n| i mod 10 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| i        | 10| 11| 12| 13| 14| 15| 16| 17| 18| 19|\n| i mod 3  | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 |\n| i mod 10 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| i        | 20| 21| 22| 23| 24| 25| 26| 27| 28| 29|\n| i mod 3  | 2 | 0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 |\n| i mod 10 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\n\n由除以3的余数与除以10的余数组成的余数对没有出现重复现象，而且，整数M对30取模它的余数就是上表中i的取值，这就表明若果已知两个互质的整数3和10，可知它们的最小公倍数，记为gcd(3,10)，易得gcd(3,10)=3×10=30，此时，余数数对(x mod 3 , x mod 10)与x mod 30可以建立一个一一对应的关系。\n\n再来看看上面用蓝色标出的余数对(也就是能除以3余数为0的那些余数数对），刚好是10对，而且除以10的余数恰好沾满了0到9这十个数字（这同是解释了九九乘法表中，乘以3所在和列的那九个数的个位数正好沾满了1到9这九个数字），这是为什么呢，还记得分水问题中，哪些能准确取出来，哪些不能吗？小伙伴们，是不是同样的道理呀。\n\n \n\n今天还要完成一道题目：\n\n \n\n在银行办理业务的时候，通常我们是要排队的，然后你就要去叫号机取个号，假设号码是由AB这两个个字符组成的3位号码，在每个业务窗口的上方都会有一个LED的跑马灯，显示正在处理哪个号客户的业务。现在，假设在这个LED灯只显示3位的号码，而且灯的长度刚刚好只够显示3个字符。我们都知道跑马灯是循环滚动显示：比如说：刚开始的时候显示的ABB，过一小会儿，然后向左滚动一个字符变成了：BBA，如此滚动，滚动三次后又回到了ABB。假设某个字符串循环移位后才能得到另一个字符串，我们就认为这两个字符串属于同一组字符串。比如刚才那组就是通知字符串（或称同组号码），第一个字符串向左移一位就能第二字符串，问这样的同组字符串一共有多少组，如果号码是由3个、4个……n个字符组成时，一共有多少组呢？（这只是一个题目，实际生活中是不可能的，不然滚动时都不知道是在处理同组号码的哪一个号码）\n\n参考答案：\n\n先看由两个字母生成3位长的号码这种情况，一共可以生成<embed src=\"http://latex.codecogs.com/svg.latex?{\\display 2^{3}}\" type=\"image/svg+xml\" />个字符串，它们分别为：AAA,AAB,ABA,ABB,BAA,BAB,BBA,BBB，AAA和BBB其他字符串是无法通过循环移位得到的，排除掉，AAB可以由ABA和BAA移位得到，ABB可以由BAB和BBA移位得到，从这可以看出三位的号码，不管三位上的字符是什么，同组的字符串都只有3个，因为三位的字符只向同一方向循环移动3次又会回到原来的字符，每移动一次都是同组中的同一个字符串，因此每一组字符串中都只有3个字符串，所以答案是<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (2^{3}-2)\\div 3=2}\" type=\"image/svg+xml\" />，与刚才移动的结论相吻合，当然了这里我故意忽略了一种因素没有考虑，待会再说，接着用这种方式分析可以得出用n个字母成3位长的号码这种情况为<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{3}-n)\\div 3}\" type=\"image/svg+xml\" />；3和4的情况可以用这个通式求得。\n\n现在我们再思考一种情况，如果号码的长度是4，而且跑马灯也刚刚好能显示4个字符，又会怎么样呢？用上面的通式，是不是<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{3}-n)\\div 4}\" type=\"image/svg+xml\" />呢？答案是否定的，应为长度为4的号码，它可能会出现ABAB这种情况，而与这个号码同组的号码只有BABA，没有想上面分析的那样有4个号码，所以除以4这显然是错的，那在什么情况下上面这个通式是正确的呢？我们仔细想一想，如果号码的连续x（x>1，且x<n，n是号码的长度）个字符重复y次之后就是整个号码字符串，这种情况就不满足这个通式，否则，就满足通式。我们再来分析一下这句话“如果号码的连续x（x>1且x<m，m是号码的长度）个字符重复y次之后就是整个号码字符串”，翻译成数学语言就是xy=m，(x>1且x<m)，要不满足这个条件，也就是说m除了能倍1和m整除外，不能倍任何整数整除，也就是说当m为质数的时候才满足通式，由此可得：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{m}-n)\\div m}\" type=\"image/svg+xml\" />是由n个字符组成的m位号码的同组号码的组数，因为是组数所以一定是一个整数值，从而推出：当m为质数时：<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{m}-n)&\\equiv&0(\\mod m)}\" type=\"image/svg+xml\" />，根据同余的性质，将式子等价变换一下得：\n\n当m是质数时：<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{m}&\\equiv&n(\\mod m)}\" type=\"image/svg+xml\" />，这就是费马小定理。根据性质：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\c&\\equiv&d(\\mod m)\\end{aligned}\\right\\}\\Rightarrow a\\bullet c&\\equiv&b\\bullet d(\\mod m)}\" type=\"image/svg+xml\" />，\n由于：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}n^{m}&\\equiv&n(\\mod m)\\\\n&\\equiv&n(\\mod m)\\end{aligned}\\right\\}\\Rightarrow n^{m}\\bullet n&\\equiv&n\\bullet n(\\mod m)}\" type=\"image/svg+xml\" />\n，得：\n<embed src=\"http://latex.codecogs.com/svg.latex?{n^{m+1}&\\equiv&n^{2}(\\mod m)}\" type=\"image/svg+xml\" />\n，同理可得：\n<embed src=\"http://latex.codecogs.com/svg.latex?{n^{m+2}&\\equiv&n^{3}(\\mod m),\\cdots,{n^{2m-2}&\\equiv&n^{m-1}(\\mod m),{n^{m-1}&\\equiv&n^{m}&\\equiv&n(\\mod m)}\" type=\"image/svg+xml\" />\n也就是说，如果 m 是一个质数的话，那么对于任意一个整数 n ，随着 i (<embed src=\"http://latex.codecogs.com/svg.latex?{\\display i\\in \\mathbb{N}^0}\" type=\"image/svg+xml\" />)的增加， n 的 i 次方除以 m 的余数将会呈现出长度为 m – 1 的周期性，这就是费马小定理另一种表述。\n\n现在还有一个问题，如果m不是质数呢？\n\n参考资料：\n1. [跨越千年的RSA算法](http://www.matrix67.com/blog/archives/5100)\n2. [RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)","source":"_posts/RSA系类（三）：从物不知数到中国剩余定理和费马小定理.md","raw":"title: RSA系类（三）：从物不知数到中国剩余定理和费马小定理\ntags:\n  - RSA算法\n  - 数学\n  - 中国剩余定理\n  - 费马小定理\ncategories:\n  - 算法\ndate: 2015-02-03 23:51:00\n---\n\n\n先对昨天的错误进行修正：“最后，我们求解一下3×n - 5×m=4这个不定方程： 3×2 + 5×(-1)=1两边同时乘以4得：3×8 + 5×(-4)=4，从而得出：n=8，m=-4”，这句话中的m=-4应该改成m=4。\n\n下面进入今天的主题： \n\n#### 3、今有物不知其数，三三数之剩二；五五数之剩三；七七数之剩二。问物几何?\n{% blockquote 维基百科 http://baike.baidu.com/link?url=nUHiJ81_AIP_fx3ebRpG4BJBAkPfOdEkaqfT6g3_A12-soPBRF6fzKSQQRZuvNMDEe7lhfworl2v_TBb9g5Kba 物不知数%}\n中国古代著名算题。原载《孙子算经》卷下第二十六题：“今有物不知其数，三三数之剩二；五五数之剩三；七七数之剩二。问物几何?”当时虽已有了答案23，但它的系统解法是秦九韶在《数书九章·大衍求一术》中给出的。大衍求一术（也称作“中国剩余定理”）是中国古算中最有独创性的成就之一，属现代数论中的一次同余式组问题。\n{% endblockquote %}\n<!--more-->\n\n今天讨论一下中国剩余定理，先把这个‘物不知数’这个问题解决。\n\n参考答案：\n\n先回顾一下分水问题，我们首先对一种简单的情况进行数学抽象，得出要解决分水问题，就要先解出3×n - 5×m=1这个二元不定式，再根据扩展欧几里得算法求得m、n，得出结果，最后总结出：在区间[1,max{a,b}-1]上的a和b的最大公约数的整数倍是能够精确取出来的，这其实就是裴蜀定理。\n\n现在我们把这个数学抽象变化一下，变成这个样子：<embed src=\"http://latex.codecogs.com/svg.latex?{3x\\mod5=1} \" type=\"image/svg+xml\" />，抑或者是：<embed src=\"http://latex.codecogs.com/svg.latex?{3x\\equiv1(\\mod 5)} \" type=\"image/svg+xml\" />，这两个等式都是表示3x除以5的余数为1（如有小伙伴还不明白等式是什么含义请参考[同余](https://zh.wikipedia.org/wiki/同餘)）。由于这两个式子和3×n - 5×m=1都是对分水问题的数学抽象，因此，都可以使用扩展欧几里得算法求解x，请记住这种方法，待会用的着。\n\n先给出同余的概念：当两个整数除以同一个正整数，若得相同余数，则两整数[同余](https://zh.wikipedia.org/wiki/同餘)。\n\n下面几个同余的性质接下来可能用得着：\n\n1）传递性\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\b&\\equiv&c(\\mod m)\\end{aligned}\\right\\}\\Rightarrow a\\equiv c(\\mod m)}\" type=\"image/svg+xml\" />\n2）保持基本运算\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\c&\\equiv&d(\\mod m)\\end{aligned}\\right\\}\\Rightarrow \\left\\{\\begin{aligned}a\\pm c&\\equiv&b\\pm d(\\mod m)\\\\ac&\\equiv&bd(\\mod m)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n这性质更可进一步引申成为这样：\n<embed src=\"http://latex.codecogs.com/svg.latex?{a\\equiv b(\\mod m)\\Rightarrow \\left\\{\\begin{aligned}an&\\equiv&bn(\\mod m),\\forall n\\in\\mathbb{Z}\\\\a^{n}&\\equiv&b^{n}(\\mod m),\\forall n \\in \\mathbb{N}^{0}\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n \n好了，开始解题：\n\n以下解题过程中都是针对整数而言，没有特殊说明都是指整数。\n\n设这个整数为x，\n\n根据题意可得：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{(S):\\left\\{\\begin{aligned}x&\\equiv&2 (\\mod3)\\\\x&\\equiv&3(\\mod5)\\\\x&\\equiv&2(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n\n我们来思考这么一种情况：\n\n如果一个整数X1满足，X1是5和7的倍数，除以3的余数是2，那么就能推出下面这组同余式：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x_1&\\equiv&2 (\\mod3)\\\\x_1&\\equiv&0(\\mod5)\\\\x_1&\\equiv&0(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n\n同理，整数X2满足，X2是3和7的倍数，除以5的余数是3，整数X3满足，X3是3和5的倍数，除以7的余数是2：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x_2&\\equiv&0 (\\mod3)\\\\x_2&\\equiv&3(\\mod5)\\\\x_2&\\equiv&0(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x_3&\\equiv&0 (\\mod3)\\\\x_3&\\equiv&0(\\mod5)\\\\x_3&\\equiv&2(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />\n根据\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\c&\\equiv&d(\\mod m)\\end{aligned}\\right\\}\\Rightarrow a\\pm c&\\equiv&b\\pm d(\\mod m)}\" type=\"image/svg+xml\" />\n得：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}x_1&\\equiv&2(\\mod 3)\\\\x_2&\\equiv&0(\\mod 3)\\end{aligned}\\right\\}\\Rightarrow x_1+ x_2&\\equiv&2+0(\\mod 3)}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}x_1+x_2&\\equiv&2(\\mod 3)\\\\x_3&\\equiv&0(\\mod 3)\\end{aligned}\\right\\}\\Rightarrow x_1+ x_2+x_3&\\equiv&2+0(\\mod 3)}\" type=\"image/svg+xml\" />\n所以：\n<embed src=\"http://latex.codecogs.com/svg.latex?{ x_1+ x_2+x_3&\\equiv&2(\\mod 3)}\" type=\"image/svg+xml\" />；\n同理可得：\n<embed src=\"http://latex.codecogs.com/svg.latex?{ x_1+ x_2+x_3&\\equiv&3(\\mod 5)}\" type=\"image/svg+xml\" />，<embed src=\"http://latex.codecogs.com/svg.latex?{ x_1+ x_2+x_3&\\equiv&2(\\mod 7)}\" type=\"image/svg+xml\" />；\n\n因此，只要我们求得X1+X2+X3就是答案。现在我们来看一下X1怎么求解吧：\n\n根据\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x_1&\\equiv&2 (\\mod3)\\\\x_1&\\equiv&0(\\mod5)\\\\x_1&\\equiv&0(\\mod7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />等价于<embed src=\"http://latex.codecogs.com/svg.latex?{5\\times 7\\times x_1^{'}&\\equiv&2(\\mod 3)}\" type=\"image/svg+xml\" />，因此只要求出x1'即可求出答案，这个时候就得用上扩展欧几里得算法求出x1'，哈哈，整个人都神清气爽了有木有。我们再把上面等式翻译成分水问题，有35升和3升无刻度的两个容器，现在只能用35升的容器取水，3升的容器倒水，请精确取出2升水。\n\n我们还是根据扩展欧几里得算法得出：\n\n3×12 + 35×(-1) =1，这个结果好像不对头，它是用3升的容器取水，35升容器倒水的结果，那该怎么办呢？很简单等式两边同时乘以-1，就变成了35升的容器取水，3升的容器倒水，第12次倒水后得-1，这明显不可能，少倒一次水，剩下的就正好是2升水，所以x1'=1。\n\n同理求出<embed src=\"http://latex.codecogs.com/svg.latex?{ x_2^{'}=3,x_3^{'}=2}\" type=\"image/svg+xml\" />；\n\n从而得出<embed src=\"http://latex.codecogs.com/svg.latex?{ x_1=35,x_2=63,x_3=30}\" type=\"image/svg+xml\" />，\n\n最后得出x=X1+X2+X3=128，\n\n这个地方碰巧，很容易能取出2升水，我们还是按照我们先取出1升，让后再根据倍数关系，求得2升水吧，这样的话更具有规律性。\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}35\\times 1+3\\times (-12)&=&-1\\\\35\\times 1+3\\times(-11)&=&2\\end{aligned}\\right\\}\\Rightarrow 35\\times 2+3\\times (-23)=1}\" type=\"image/svg+xml\" />，从而x1'=2×2=4，同理得x2'=3，x3'=2，此时我们称x1'、x2'、x3'为模逆元，由于它们形如：<embed src=\"http://latex.codecogs.com/svg.latex?{x_1^{'}\\times M&\\equiv&1(\\mod m)}\" type=\"image/svg+xml\" />，所以也称为数论倒数；\n\n从而得出x1=140，x2=63，x3=30，\n\n最后得出x=X1+X2+X3=233，\n\n聪明的小伙伴立刻明白答案不止一个，23也是对的，而且还有无数多个解，下面进一步说明一下：\n\n由于3,5,7这三个数是两两互质，所以它们的最小公倍数是3×5×7=105,105显然能同时整除3,5,7。根据下面这个性质：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\c&\\equiv&d(\\mod m)\\end{aligned}\\right\\}\\Rightarrowa\\pm c&\\equiv&b\\pm d(\\mod m)}\" type=\"image/svg+xml\" />\nx+k×105显然还是满足\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left\\{\\begin{aligned}x+k\\times 105&\\equiv&2(\\mod 3)\\\\x+k\\times 105&\\equiv&3(\\mod 5)\\\\x+k\\times 105&\\equiv&2(\\mod 7)\\end{aligned}\\right.}\" type=\"image/svg+xml\" />,\n因此，这个问题的通解是：<embed src=\"http://latex.codecogs.com/svg.latex?{23+k\\times 105,k\\in\\mathbb{Z}}\" type=\"image/svg+xml\" />。\n\nOk，解题完毕，物不知数就是中国剩余定理的一个实例。现在来看孙子定理也就是中国剩余定理：给出 i 个两两互质的整数，记为<embed src=\"http://latex.codecogs.com/svg.latex?{\\display m_1,m_2,m_3,\\cdots,m_i}\" type=\"image/svg+xml\" />，它们的乘积为 P ；假设有一个未知数 M ，如果我们已知 M 分别除以这 m 个数所得的余数，记为<embed src=\"http://latex.codecogs.com/svg.latex?{\\display r_1,r_2,r_3,\\cdots,r_i}\" type=\"image/svg+xml\" />那么在 0 到 P–1 的范围内，我们可以唯一地确定这个 M 。现代数学语言的描述，我就不贴了，有兴趣的同学就自己看wiki吧。\n\n我们从定义里面可以看出中国剩余定理有以下两点特性：\n\n1.当的整数时<embed src=\"http://latex.codecogs.com/svg.latex?{M\\in[0,P-1]}\" type=\"image/svg+xml\" />每一组余数（记为：<embed src=\"http://latex.codecogs.com/svg.latex?{\\display r_1,r_2,r_3,\\cdots,r_i}\" type=\"image/svg+xml\" />）都有唯一的一个M与之对应，而且每一个M也只有一组余数与之对应，即M与<embed src=\"http://latex.codecogs.com/svg.latex?{\\display r_1,r_2,r_3,\\cdots,r_i}\" type=\"image/svg+xml\" />是一一对应关系，由于M的取值恰好是任意整数对P求余的余数，所以结论也可以表述为任意整数对P的余数与<embed src=\"http://latex.codecogs.com/svg.latex?{\\display r_1,r_2,r_3,\\cdots,r_i}\" type=\"image/svg+xml\" />是一一对应关系；\n\n2.在<embed src=\"http://latex.codecogs.com/svg.latex?{m\\in\\mathbb{Z}}\" type=\"image/svg+xml\" />，如果余数数组看作m的一个函数，那么函数呈现周期性，且m的最小正周期是P。\n\n \n\n下面举个例：\n\n2个互质的整数3和10，它们的乘积是30，那么在[0,29]区间内的数，分别处以3和10的余数如下表所示：\n\n| i        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| :-------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| i mod 3  | 0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 | 0 |\n| i mod 10 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| i        | 10| 11| 12| 13| 14| 15| 16| 17| 18| 19|\n| i mod 3  | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 |\n| i mod 10 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| i        | 20| 21| 22| 23| 24| 25| 26| 27| 28| 29|\n| i mod 3  | 2 | 0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 |\n| i mod 10 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\n\n由除以3的余数与除以10的余数组成的余数对没有出现重复现象，而且，整数M对30取模它的余数就是上表中i的取值，这就表明若果已知两个互质的整数3和10，可知它们的最小公倍数，记为gcd(3,10)，易得gcd(3,10)=3×10=30，此时，余数数对(x mod 3 , x mod 10)与x mod 30可以建立一个一一对应的关系。\n\n再来看看上面用蓝色标出的余数对(也就是能除以3余数为0的那些余数数对），刚好是10对，而且除以10的余数恰好沾满了0到9这十个数字（这同是解释了九九乘法表中，乘以3所在和列的那九个数的个位数正好沾满了1到9这九个数字），这是为什么呢，还记得分水问题中，哪些能准确取出来，哪些不能吗？小伙伴们，是不是同样的道理呀。\n\n \n\n今天还要完成一道题目：\n\n \n\n在银行办理业务的时候，通常我们是要排队的，然后你就要去叫号机取个号，假设号码是由AB这两个个字符组成的3位号码，在每个业务窗口的上方都会有一个LED的跑马灯，显示正在处理哪个号客户的业务。现在，假设在这个LED灯只显示3位的号码，而且灯的长度刚刚好只够显示3个字符。我们都知道跑马灯是循环滚动显示：比如说：刚开始的时候显示的ABB，过一小会儿，然后向左滚动一个字符变成了：BBA，如此滚动，滚动三次后又回到了ABB。假设某个字符串循环移位后才能得到另一个字符串，我们就认为这两个字符串属于同一组字符串。比如刚才那组就是通知字符串（或称同组号码），第一个字符串向左移一位就能第二字符串，问这样的同组字符串一共有多少组，如果号码是由3个、4个……n个字符组成时，一共有多少组呢？（这只是一个题目，实际生活中是不可能的，不然滚动时都不知道是在处理同组号码的哪一个号码）\n\n参考答案：\n\n先看由两个字母生成3位长的号码这种情况，一共可以生成<embed src=\"http://latex.codecogs.com/svg.latex?{\\display 2^{3}}\" type=\"image/svg+xml\" />个字符串，它们分别为：AAA,AAB,ABA,ABB,BAA,BAB,BBA,BBB，AAA和BBB其他字符串是无法通过循环移位得到的，排除掉，AAB可以由ABA和BAA移位得到，ABB可以由BAB和BBA移位得到，从这可以看出三位的号码，不管三位上的字符是什么，同组的字符串都只有3个，因为三位的字符只向同一方向循环移动3次又会回到原来的字符，每移动一次都是同组中的同一个字符串，因此每一组字符串中都只有3个字符串，所以答案是<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (2^{3}-2)\\div 3=2}\" type=\"image/svg+xml\" />，与刚才移动的结论相吻合，当然了这里我故意忽略了一种因素没有考虑，待会再说，接着用这种方式分析可以得出用n个字母成3位长的号码这种情况为<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{3}-n)\\div 3}\" type=\"image/svg+xml\" />；3和4的情况可以用这个通式求得。\n\n现在我们再思考一种情况，如果号码的长度是4，而且跑马灯也刚刚好能显示4个字符，又会怎么样呢？用上面的通式，是不是<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{3}-n)\\div 4}\" type=\"image/svg+xml\" />呢？答案是否定的，应为长度为4的号码，它可能会出现ABAB这种情况，而与这个号码同组的号码只有BABA，没有想上面分析的那样有4个号码，所以除以4这显然是错的，那在什么情况下上面这个通式是正确的呢？我们仔细想一想，如果号码的连续x（x>1，且x<n，n是号码的长度）个字符重复y次之后就是整个号码字符串，这种情况就不满足这个通式，否则，就满足通式。我们再来分析一下这句话“如果号码的连续x（x>1且x<m，m是号码的长度）个字符重复y次之后就是整个号码字符串”，翻译成数学语言就是xy=m，(x>1且x<m)，要不满足这个条件，也就是说m除了能倍1和m整除外，不能倍任何整数整除，也就是说当m为质数的时候才满足通式，由此可得：\n\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{m}-n)\\div m}\" type=\"image/svg+xml\" />是由n个字符组成的m位号码的同组号码的组数，因为是组数所以一定是一个整数值，从而推出：当m为质数时：<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{m}-n)&\\equiv&0(\\mod m)}\" type=\"image/svg+xml\" />，根据同余的性质，将式子等价变换一下得：\n\n当m是质数时：<embed src=\"http://latex.codecogs.com/svg.latex?{\\display (n^{m}&\\equiv&n(\\mod m)}\" type=\"image/svg+xml\" />，这就是费马小定理。根据性质：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}a&\\equiv&b(\\mod m)\\\\c&\\equiv&d(\\mod m)\\end{aligned}\\right\\}\\Rightarrow a\\bullet c&\\equiv&b\\bullet d(\\mod m)}\" type=\"image/svg+xml\" />，\n由于：\n<embed src=\"http://latex.codecogs.com/svg.latex?{\\left.\\begin{aligned}n^{m}&\\equiv&n(\\mod m)\\\\n&\\equiv&n(\\mod m)\\end{aligned}\\right\\}\\Rightarrow n^{m}\\bullet n&\\equiv&n\\bullet n(\\mod m)}\" type=\"image/svg+xml\" />\n，得：\n<embed src=\"http://latex.codecogs.com/svg.latex?{n^{m+1}&\\equiv&n^{2}(\\mod m)}\" type=\"image/svg+xml\" />\n，同理可得：\n<embed src=\"http://latex.codecogs.com/svg.latex?{n^{m+2}&\\equiv&n^{3}(\\mod m),\\cdots,{n^{2m-2}&\\equiv&n^{m-1}(\\mod m),{n^{m-1}&\\equiv&n^{m}&\\equiv&n(\\mod m)}\" type=\"image/svg+xml\" />\n也就是说，如果 m 是一个质数的话，那么对于任意一个整数 n ，随着 i (<embed src=\"http://latex.codecogs.com/svg.latex?{\\display i\\in \\mathbb{N}^0}\" type=\"image/svg+xml\" />)的增加， n 的 i 次方除以 m 的余数将会呈现出长度为 m – 1 的周期性，这就是费马小定理另一种表述。\n\n现在还有一个问题，如果m不是质数呢？\n\n参考资料：\n1. [跨越千年的RSA算法](http://www.matrix67.com/blog/archives/5100)\n2. [RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)","slug":"RSA系类（三）：从物不知数到中国剩余定理和费马小定理","published":1,"updated":"2016-07-14T02:47:23.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcpy001kf8b9s56035zd"},{"title":"RSA系类（一）：辗转相除法","date":"2015-02-01T14:12:00.000Z","_content":"\n\n发现最近自己也是挺颓的，没做出任何一件能让自己会心一笑的事，于是乎准备着报复那些比我过的好的小伙伴 ，三思之后最终决定用一种最歹毒的精神折磨来报复乃们----颤抖吧地球人，也让那些没事整天在QQ空间和微信朋友圈摆地摊卖东西的小伙伴们感受一下打开QQ空间那种铺天盖地的无聊数学题的折磨。现在肯定有小伙伴们在底下指着我的头像骂我吧，“我跟你什么仇什么冤”。Ok，发疯完毕进入主题。\n\n \n\n有没有小伙伴想知道我弄这些无聊的数学题做什么？\n\n``` bash\n// 温馨提示：本文只写个对数学或者计算机感兴趣的小伙伴们\nif(你想知道)\n   请安静地接着往下看;\nelse\n   请安静地离开，我不想浪费你宝贵的时间;\n```\n<!--more-->\n\n现在，我们先把那些数学题目一个一个的解答一下：\n\n#### 1、有两条长分别为210cm和165cm的无刻度的木条a和b，怎样确定一条木条c，使得a和b的长度刚刚好是整数倍个c的长度（可以无限制使用无刻度的木条）？\n\n参考答案：\n\na是c整数倍，b也是c的整数倍，于是这道题目可以简化成求a和b的公因数。我们很容易就能得出a和b的公因数是1、3、5、15，其中15是最大公因数，现在最大的问题是如何用没有刻度的木条得出这些长度呢？此时，我想起了辗转相除法求最大公因数，说到这不知道各位小伙伴有没有自己去看过关于辗转相除法的来历，记得第一次接触这个方法好像是在VB程序设计这门课上（也是我学的第一门编程语言），当时感觉很神奇，为什么小学老师没有教我们这个方法呢，于是自己去查看了一下[这个方法](https://zh.wikipedia.org/wiki/輾轉相除法)。下面是解题过程：\n1）用210 ÷165=1 ···45（余数）；\n\n2）用165÷45=3···30（余数）；\n\n3）用45÷30=1···15（余数）；\n\n4）用30÷15=2···0（余数）；\n\n此时的第四步中的除数15就是210和165的最大公约数，顺带说一下210和165的最小公倍数就是（210×165）÷15=2310。那怎么用无刻度的木条确定出15cm这个长度来呢？请看图：\n\n{% asset_img 图一.png 图一 %} \n\n\n现在我们就得到了15cm的木条c，那其它的长度有没有办法得到呢？我感觉上是没办法得到，不知道聪明的小伙伴们有没有更巧妙的方法能得出来呢？这道题目就这样解决了，不知道小学老师为什么不教我们这个方法。这里有一点是要注意的，辗转相除法有时候会失效的，那是什么时候呢？想象一下这样一种场景，当上一次的被除数与除数的比值等于除数与余数的比值时会出现什么样的一个场景。它应该会出现这样一种场景：从前有座山，山里有座面，庙里有个老和尚和小和尚，老和尚正在跟小和尚讲故事：“从前有座山，山里有座面，庙里有个老和尚和小和尚，老和尚正在跟小和尚讲故事：‘从前有座山，山里有座面，庙里有个老和尚和小和尚，老和尚正在跟小和尚讲故事：……’”。这就是那个没有终结条件的死递归。顺便提一下，这个时候被除数和除数的比例关系正好满足黄金分割比例1：0.618，而且出现了无理数，这不是公因数的范畴了，而是一种更加广的倍数数关系，或者用欧几里德的《几何原本》中的公度的概念更为准确。\n\n\n参考资料：\n1. [跨越千年的RSA算法](http://www.matrix67.com/blog/archives/5100)\n2. [RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)","source":"_posts/RSA系类（一）：辗转相除法.md","raw":"title: RSA系类（一）：辗转相除法\ntags:\n  - RSA算法\n  - 数学\n  - 辗转相除法\ncategories:\n  - 算法\ndate: 2015-02-01 22:12:00\n---\n\n\n发现最近自己也是挺颓的，没做出任何一件能让自己会心一笑的事，于是乎准备着报复那些比我过的好的小伙伴 ，三思之后最终决定用一种最歹毒的精神折磨来报复乃们----颤抖吧地球人，也让那些没事整天在QQ空间和微信朋友圈摆地摊卖东西的小伙伴们感受一下打开QQ空间那种铺天盖地的无聊数学题的折磨。现在肯定有小伙伴们在底下指着我的头像骂我吧，“我跟你什么仇什么冤”。Ok，发疯完毕进入主题。\n\n \n\n有没有小伙伴想知道我弄这些无聊的数学题做什么？\n\n``` bash\n// 温馨提示：本文只写个对数学或者计算机感兴趣的小伙伴们\nif(你想知道)\n   请安静地接着往下看;\nelse\n   请安静地离开，我不想浪费你宝贵的时间;\n```\n<!--more-->\n\n现在，我们先把那些数学题目一个一个的解答一下：\n\n#### 1、有两条长分别为210cm和165cm的无刻度的木条a和b，怎样确定一条木条c，使得a和b的长度刚刚好是整数倍个c的长度（可以无限制使用无刻度的木条）？\n\n参考答案：\n\na是c整数倍，b也是c的整数倍，于是这道题目可以简化成求a和b的公因数。我们很容易就能得出a和b的公因数是1、3、5、15，其中15是最大公因数，现在最大的问题是如何用没有刻度的木条得出这些长度呢？此时，我想起了辗转相除法求最大公因数，说到这不知道各位小伙伴有没有自己去看过关于辗转相除法的来历，记得第一次接触这个方法好像是在VB程序设计这门课上（也是我学的第一门编程语言），当时感觉很神奇，为什么小学老师没有教我们这个方法呢，于是自己去查看了一下[这个方法](https://zh.wikipedia.org/wiki/輾轉相除法)。下面是解题过程：\n1）用210 ÷165=1 ···45（余数）；\n\n2）用165÷45=3···30（余数）；\n\n3）用45÷30=1···15（余数）；\n\n4）用30÷15=2···0（余数）；\n\n此时的第四步中的除数15就是210和165的最大公约数，顺带说一下210和165的最小公倍数就是（210×165）÷15=2310。那怎么用无刻度的木条确定出15cm这个长度来呢？请看图：\n\n{% asset_img 图一.png 图一 %} \n\n\n现在我们就得到了15cm的木条c，那其它的长度有没有办法得到呢？我感觉上是没办法得到，不知道聪明的小伙伴们有没有更巧妙的方法能得出来呢？这道题目就这样解决了，不知道小学老师为什么不教我们这个方法。这里有一点是要注意的，辗转相除法有时候会失效的，那是什么时候呢？想象一下这样一种场景，当上一次的被除数与除数的比值等于除数与余数的比值时会出现什么样的一个场景。它应该会出现这样一种场景：从前有座山，山里有座面，庙里有个老和尚和小和尚，老和尚正在跟小和尚讲故事：“从前有座山，山里有座面，庙里有个老和尚和小和尚，老和尚正在跟小和尚讲故事：‘从前有座山，山里有座面，庙里有个老和尚和小和尚，老和尚正在跟小和尚讲故事：……’”。这就是那个没有终结条件的死递归。顺便提一下，这个时候被除数和除数的比例关系正好满足黄金分割比例1：0.618，而且出现了无理数，这不是公因数的范畴了，而是一种更加广的倍数数关系，或者用欧几里德的《几何原本》中的公度的概念更为准确。\n\n\n参考资料：\n1. [跨越千年的RSA算法](http://www.matrix67.com/blog/archives/5100)\n2. [RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)","slug":"RSA系类（一）：辗转相除法","published":1,"updated":"2016-07-13T07:11:28.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcq3001rf8b9kyx1eml9"},{"title":"Github个人静态博客的搭建总结","date":"2015-02-01T09:31:06.000Z","_content":"\n在搭建博客中出现了不少问题，在此分享一下个人的博客搭建过程：\n\n\n### 第一步：想不花钱就把事情给办了\n俗话说：想不花钱，就把事情给办了，你的找一个有钱有势的主。同样的，如果你想要有一个独立的博客，又不想自己掏钱和投入经历去维护，那么你的找一个有优势的主，这当然是首推[全球最大的男性同性交友平台 github](http://www.zhihu.com/question/28976652/answer/42771650)(*^__^*) ，至于怎么注册，怎么设置，直接看官网[帮助文档](https://help.github.com/)。\n<!--more-->\n### 第二步：hexo —— 简单、快速、强大的Node.js静态博客框架\nHexo的安装和配置请参考**Heaven**的[《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)，由于Heaven大神一直是在搞前端的，博文里没有提到node.js的安装，这个就是下载，下一步的事，也不详陈了。\n\n---\n\n### 总结遇到的问题\n\n注意：以下操作都是基于windows7！！！\n\n1、在git bash客户端，使用ssh方式进行clone和push时，每次关闭重开git bash客户端总是出现如下错误：\n\n``` bash\n$ git clone git@github.com:xiaorisu/github-roam.git\nCloning into 'github-roam'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n之前一直是手动输入如下两句代码来解决此问题：\n\n``` bash\neval $(ssh-agent -s)\nssh-add ~/.ssh/xxxx\n```\n\n我是一个懒人，每次都要这样手动输入这两行代码，我会很烦躁，于是有了下面的解决方案：\n在当前用户目录底下新建一个.bash_profile文件，不要问我当前用户的目录是哪个目录，一般是打开cmd之后，光标之前的路劲就是当前用户目录。当然，如果你设置过默认打开路径，那就是另一回事了，这时你可以使用如下命令得到：\n\n``` bash\necho %systemdrive%%homepath%\n```\n\n创建好了.bash_profile文件后，在文件中输入如下代码：\n\n``` bash\neval $(ps | grep 'ssh-agent' | awk '{print $1}' | xargs kill -9)\neval $(ssh-agent -s)\nssh-add ~/.ssh/XXXXX\n```\n\n保存文件，此文件会在每次打开git bash时加载并运行其中的命令。解释一下这三条命令的含义：第一句是杀死之前开的所有ssh-agent，由于每次打开都会执行两编这里面的命令，没有去查是什么原因导致的。并且每次关闭了git bash客户端，都不会关闭它打开的ssh-agent程序；第二句是开启ssh-agent服务；第三句是将专用密钥添加到ssh-agent的高速缓存中。\n\n---\n\n2、执行hexo s 命令后，在浏览器中输入localhost:4000半天没有响应，最后无法访问生成的静态页面。\n\n这个问题的原因在于4000端口被FxServer占用了，但是hexo-server没有报错，真是郁闷！！！解决这问题很简单，可以关掉FxServer服务，也可使用hexo s -p 4040即可解决。解决这个问题并不困难，我要说的是怎么找到问题的原因的。\n首先使用netstat命令查看当前电脑的网络连接状况：\n\n``` bash\nC:\\Users\\lenovo>netstat -ano | findstr \"4000\"\n  TCP    0.0.0.0:4000           0.0.0.0:0              LISTENING       21908\n  TCP    127.0.0.1:4000         0.0.0.0:0              LISTENING       17620\n  TCP    127.0.0.1:4000         127.0.0.1:4737         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4738         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4739         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4740         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4741         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4742         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4755         ESTABLISHED     17620\n  TCP    127.0.0.1:4737         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4738         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4739         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4740         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4741         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4742         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4755         127.0.0.1:4000         ESTABLISHED     556\n```\n\n发现4000端口有很多连接，发现有两个进程在监听4000端口，pid分别是21908和17620，从任务管理器中可以看到这两个pid对应的进程分别是node.exe和FxServer服务。这就是查找问题的过程。\n\n---\n\n### 最后说一下改进\n\n最后说一说多仓库部署和源代码自动备份以及自动打开Markdown编辑器。\n\n先上我的_config.yml文件：\n\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 翰海尘沙\nsubtitle: 进击的程序员\ndescription: 技术分享、阅读笔记\nauthor: 翰海尘沙\nlanguage: zh-CN\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yourgithubname.github.io\nroot: /blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: landscape\n#theme: leo\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n# 自动备份\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n\n# 评论\n# 1.友言\n#uyan:\n#  enable: true\n# 2.多说\n#duoshuo_shortname: shortname\n# 3.畅言\nchangyan:\n  enable: true\n\n# RSS订阅\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 10\n\n# 网站地图\nsitemap:\n    path: sitemap.xml\n```\n\n多仓库部署比较简单，只要在_config.yml配置成如下：\n\n```\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n```\n\n使用hexo d命令就可以自动部署到github和gitcafe上去。\n\n多仓自动库备份稍微复杂些，先在配置文件中自定自己的自动备份的配置：\n\n```\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n```\n\n然后在博客源代码的项目根目录下的scripts目录（如果没有就新建一个scripes文件夹）中新建一个任意名字的javascript文件。我新建的是一个AutoBackUp.js，添加如下代码：\n\n``` JavaScript\nrequire('shelljs/global');\n\nvar parseConfig = require('hexo-deployer-git/lib/parse_config');\nvar util = require('hexo/node_modules/hexo-util');\nvar Promise = require('hexo/node_modules/bluebird');\nvar spawn = util.spawn;\n\ntry {\n    hexo.on('deployAfter', function() {\n        run();\n    });\n} catch (e) {\n    console.log(\"备份出现异常，详细信息\" + e.toString());\n}\n\nfunction git() {\n    var len = arguments.length;\n    var args = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n        args[i] = arguments[i];\n    }\n\n    return spawn('git', args, {\n        cwd: hexo.base_dir,\n        verbose: !hexo.config.backup.silent\n    });\n}\n\nfunction push(repo) {\n    return git('add', '-A').then(function() {\n        return git('commit', '-m', \"Form auto backup script\\'s commit\").catch(function() {\n            // Do nothing. It's OK if nothing to commit.\n        });\n    }).then(function() {\n        return git('push', '-u', repo.url, 'master:' + repo.branch, '--force');\n    });\n}\n\nfunction run() {\n    if (!which('git')) {\n        echo('Sorry, this script require git');\n    } else {\n        echo(\"=======================Auto Backup Begin=======================\");\n        Promise.each(parseConfig(hexo.config.backup),function(repo){\n            return push(repo);\n        });\n        echo(\"=======================Auto Backup Complete======================\");\n    }\n}\n\n```\n\n还要安装shelljs模块，这样每次执行hexo d后就会自动备份到githu和gitcafe代码仓库。\n\n自动打开Markdown编辑器，同样在srcipt目录中添加一个OpenEditor.js文件，代码如下：\n``` JavaScript\nvar exec = require('child_process').exec;\nvar parseConfig = require('./parse_config');\n// Hexo 2.x 用户复制这段\n// hexo.on('new', function(path){\n// exec('start  \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + path);\n// });\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data) {\n    //exec('start  /max \"\" \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + data.path);\n    exec('start  /max \"\" \"D:\\\\Program Files\\\\MarkdownPad 2\\\\MarkdownPad2.exe\" ' + data.path);\n});\n\n/*=================windows code end======================*/\n\n\n///*********************************************************\n// *                 linux   代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x\n//hexo.on('new', function(path){\n//  exec('vi', [path]);\n//});\n//\n//// Hexo 3\n//hexo.on('new', function(data){\n//  exec('vi', [data.path]);\n//});\n//\n///*=================linux  code  end======================*/\n//\n///*********************************************************\n// *                 mac     代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x 用户复制这段\n//hexo.on('new', function(path){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n//});\n//// Hexo 3 用户复制这段\n//hexo.on('new', function(data){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n//});\n///*=================mac    code  end======================*/\n\n```\n\n在windows7下是亲测可以打开，至于Mac和Linux没测试过，不敢保证可以用。\n\n---\n\n参考博文：\n\n1. [younglaker的《Hexo系列博客》](http://laker.me/blog/categories/Hexo/)\n2. [夏末的《Hexo添加文章时自动打开编辑器》](http://notes.xiamo.tk/2015-06-29-Hexo添加文章时自动打开编辑器.html)\n3. [夏末的《自动备份Hexo博客源文件》](http://notes.xiamo.tk/2015-07-06-自动备份Hexo博客源文件.html)\n4. [Heaven的《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)\n5. [github高亮语言关键字](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)","source":"_posts/Github个人静态博客的搭建.md","raw":"title: Github个人静态博客的搭建总结\ndate: 2015-02-01 17:31:06\ntags:\n - 教程\n - 总结\n - Hexo\ncategories:\n - Hexo\n---\n\n在搭建博客中出现了不少问题，在此分享一下个人的博客搭建过程：\n\n\n### 第一步：想不花钱就把事情给办了\n俗话说：想不花钱，就把事情给办了，你的找一个有钱有势的主。同样的，如果你想要有一个独立的博客，又不想自己掏钱和投入经历去维护，那么你的找一个有优势的主，这当然是首推[全球最大的男性同性交友平台 github](http://www.zhihu.com/question/28976652/answer/42771650)(*^__^*) ，至于怎么注册，怎么设置，直接看官网[帮助文档](https://help.github.com/)。\n<!--more-->\n### 第二步：hexo —— 简单、快速、强大的Node.js静态博客框架\nHexo的安装和配置请参考**Heaven**的[《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)，由于Heaven大神一直是在搞前端的，博文里没有提到node.js的安装，这个就是下载，下一步的事，也不详陈了。\n\n---\n\n### 总结遇到的问题\n\n注意：以下操作都是基于windows7！！！\n\n1、在git bash客户端，使用ssh方式进行clone和push时，每次关闭重开git bash客户端总是出现如下错误：\n\n``` bash\n$ git clone git@github.com:xiaorisu/github-roam.git\nCloning into 'github-roam'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n之前一直是手动输入如下两句代码来解决此问题：\n\n``` bash\neval $(ssh-agent -s)\nssh-add ~/.ssh/xxxx\n```\n\n我是一个懒人，每次都要这样手动输入这两行代码，我会很烦躁，于是有了下面的解决方案：\n在当前用户目录底下新建一个.bash_profile文件，不要问我当前用户的目录是哪个目录，一般是打开cmd之后，光标之前的路劲就是当前用户目录。当然，如果你设置过默认打开路径，那就是另一回事了，这时你可以使用如下命令得到：\n\n``` bash\necho %systemdrive%%homepath%\n```\n\n创建好了.bash_profile文件后，在文件中输入如下代码：\n\n``` bash\neval $(ps | grep 'ssh-agent' | awk '{print $1}' | xargs kill -9)\neval $(ssh-agent -s)\nssh-add ~/.ssh/XXXXX\n```\n\n保存文件，此文件会在每次打开git bash时加载并运行其中的命令。解释一下这三条命令的含义：第一句是杀死之前开的所有ssh-agent，由于每次打开都会执行两编这里面的命令，没有去查是什么原因导致的。并且每次关闭了git bash客户端，都不会关闭它打开的ssh-agent程序；第二句是开启ssh-agent服务；第三句是将专用密钥添加到ssh-agent的高速缓存中。\n\n---\n\n2、执行hexo s 命令后，在浏览器中输入localhost:4000半天没有响应，最后无法访问生成的静态页面。\n\n这个问题的原因在于4000端口被FxServer占用了，但是hexo-server没有报错，真是郁闷！！！解决这问题很简单，可以关掉FxServer服务，也可使用hexo s -p 4040即可解决。解决这个问题并不困难，我要说的是怎么找到问题的原因的。\n首先使用netstat命令查看当前电脑的网络连接状况：\n\n``` bash\nC:\\Users\\lenovo>netstat -ano | findstr \"4000\"\n  TCP    0.0.0.0:4000           0.0.0.0:0              LISTENING       21908\n  TCP    127.0.0.1:4000         0.0.0.0:0              LISTENING       17620\n  TCP    127.0.0.1:4000         127.0.0.1:4737         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4738         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4739         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4740         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4741         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4742         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4755         ESTABLISHED     17620\n  TCP    127.0.0.1:4737         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4738         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4739         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4740         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4741         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4742         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4755         127.0.0.1:4000         ESTABLISHED     556\n```\n\n发现4000端口有很多连接，发现有两个进程在监听4000端口，pid分别是21908和17620，从任务管理器中可以看到这两个pid对应的进程分别是node.exe和FxServer服务。这就是查找问题的过程。\n\n---\n\n### 最后说一下改进\n\n最后说一说多仓库部署和源代码自动备份以及自动打开Markdown编辑器。\n\n先上我的_config.yml文件：\n\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 翰海尘沙\nsubtitle: 进击的程序员\ndescription: 技术分享、阅读笔记\nauthor: 翰海尘沙\nlanguage: zh-CN\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yourgithubname.github.io\nroot: /blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: landscape\n#theme: leo\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n# 自动备份\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n\n# 评论\n# 1.友言\n#uyan:\n#  enable: true\n# 2.多说\n#duoshuo_shortname: shortname\n# 3.畅言\nchangyan:\n  enable: true\n\n# RSS订阅\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 10\n\n# 网站地图\nsitemap:\n    path: sitemap.xml\n```\n\n多仓库部署比较简单，只要在_config.yml配置成如下：\n\n```\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n```\n\n使用hexo d命令就可以自动部署到github和gitcafe上去。\n\n多仓自动库备份稍微复杂些，先在配置文件中自定自己的自动备份的配置：\n\n```\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n```\n\n然后在博客源代码的项目根目录下的scripts目录（如果没有就新建一个scripes文件夹）中新建一个任意名字的javascript文件。我新建的是一个AutoBackUp.js，添加如下代码：\n\n``` JavaScript\nrequire('shelljs/global');\n\nvar parseConfig = require('hexo-deployer-git/lib/parse_config');\nvar util = require('hexo/node_modules/hexo-util');\nvar Promise = require('hexo/node_modules/bluebird');\nvar spawn = util.spawn;\n\ntry {\n    hexo.on('deployAfter', function() {\n        run();\n    });\n} catch (e) {\n    console.log(\"备份出现异常，详细信息\" + e.toString());\n}\n\nfunction git() {\n    var len = arguments.length;\n    var args = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n        args[i] = arguments[i];\n    }\n\n    return spawn('git', args, {\n        cwd: hexo.base_dir,\n        verbose: !hexo.config.backup.silent\n    });\n}\n\nfunction push(repo) {\n    return git('add', '-A').then(function() {\n        return git('commit', '-m', \"Form auto backup script\\'s commit\").catch(function() {\n            // Do nothing. It's OK if nothing to commit.\n        });\n    }).then(function() {\n        return git('push', '-u', repo.url, 'master:' + repo.branch, '--force');\n    });\n}\n\nfunction run() {\n    if (!which('git')) {\n        echo('Sorry, this script require git');\n    } else {\n        echo(\"=======================Auto Backup Begin=======================\");\n        Promise.each(parseConfig(hexo.config.backup),function(repo){\n            return push(repo);\n        });\n        echo(\"=======================Auto Backup Complete======================\");\n    }\n}\n\n```\n\n还要安装shelljs模块，这样每次执行hexo d后就会自动备份到githu和gitcafe代码仓库。\n\n自动打开Markdown编辑器，同样在srcipt目录中添加一个OpenEditor.js文件，代码如下：\n``` JavaScript\nvar exec = require('child_process').exec;\nvar parseConfig = require('./parse_config');\n// Hexo 2.x 用户复制这段\n// hexo.on('new', function(path){\n// exec('start  \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + path);\n// });\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data) {\n    //exec('start  /max \"\" \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + data.path);\n    exec('start  /max \"\" \"D:\\\\Program Files\\\\MarkdownPad 2\\\\MarkdownPad2.exe\" ' + data.path);\n});\n\n/*=================windows code end======================*/\n\n\n///*********************************************************\n// *                 linux   代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x\n//hexo.on('new', function(path){\n//  exec('vi', [path]);\n//});\n//\n//// Hexo 3\n//hexo.on('new', function(data){\n//  exec('vi', [data.path]);\n//});\n//\n///*=================linux  code  end======================*/\n//\n///*********************************************************\n// *                 mac     代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x 用户复制这段\n//hexo.on('new', function(path){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n//});\n//// Hexo 3 用户复制这段\n//hexo.on('new', function(data){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n//});\n///*=================mac    code  end======================*/\n\n```\n\n在windows7下是亲测可以打开，至于Mac和Linux没测试过，不敢保证可以用。\n\n---\n\n参考博文：\n\n1. [younglaker的《Hexo系列博客》](http://laker.me/blog/categories/Hexo/)\n2. [夏末的《Hexo添加文章时自动打开编辑器》](http://notes.xiamo.tk/2015-06-29-Hexo添加文章时自动打开编辑器.html)\n3. [夏末的《自动备份Hexo博客源文件》](http://notes.xiamo.tk/2015-07-06-自动备份Hexo博客源文件.html)\n4. [Heaven的《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)\n5. [github高亮语言关键字](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)","slug":"Github个人静态博客的搭建","published":1,"updated":"2016-07-14T02:31:57.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcqb001xf8b95rkenc9m"},{"title":"《中国互联网地下产业链分析白皮书》阅读笔记（一）","_content":"\n### 一、 地下产业链概述与全貌性导读\n\n在中国的传统行业都有一定的所谓黑市门槛，即属于潜规则范畴或者是不为人知的\n行业秘密，这种信息只流传在最信任的人脉圈子里。中国互联网行业也有黑市门槛，那就是互联网地下产业链，互联网地下产业链并不是消极的事物，在一定程度上讲，它更接近用户需求，更能还原互联网本貌。\n\n#### 中国互联网地下产业链产生原因：\n\n1. 用户需求多样性，主流互联网产品无法满足所有用户需求；\n2. 互联网的高速发展带来了诱人的红利；\n3. 技术成本的不断下降。\n\n#### 研究互联网地下产业链的主要目的和意义：\n\n1. 给我们带来更真实的用户需求启示；\n2. 让我们更好的评估互联网地下产业链在商业游戏中带来的影响；\n3. 互联网地下产业链表现出来的生命力和接地气，对互联网的创业和创新有非常大的学习启示作用。\n\n#### 中国互联网产业链发展现状概述及分析\n\n目前国内互联网产业表现出明显的垄断性，巨头公司垄断了互联网最基础的资源——互联网流量（可以简单理解为用户访问数量）。随着国内互联网的高速发展带来的红利，催高了流量的价格，让互联网红利集中到了少数利益集团手中。目前国内流量主要是被巨头企业垄断，长尾流量被巨头企业采购，巨头们看不上眼的流量被广告联盟占领。\n\n这使得创新有了特别明显的定向性：\n\n 1. 流量强变现能力型创新，这样才能支撑起高额的流量费；\n 2. 资本介入型创新，以此支撑起出早期的发展成本，最典型的就是拉风投。\n \n第一种情况主要是催生了地下产业链的相关变现模式，第二种是比较主流的模式，但是在一定程度上扰乱了市场，原因有二：\n\n1. 风投资本的盈利模式和发展现状所决定；\n2. 由于热点的轮换，加上资本的推波助澜，使得短时间内在细分领域汇集大量的混水摸鱼者，他们最终的产物是一个个动人的故事和一遍遍的概念炒作。而正真的创新者却被推高的流量成本，最终被浮躁的行业环境给吞没，无声无息，进入长时间的黑夜。\n\n国内互联网行业的创新者，大概可以分为三类：\n\n1. 概念投资型：国内互联网的主流，通过媒体炒作，借鉴国外成熟商业模式，拉风投，最终奔着上市和被收购；\n2. 草根灰色型：草根特色，默默赚钱；\n3. 非法黑色型：见不得光、游离在法律边缘，但不是法外之地，有着大量的用户群，高风险，商业模式非常机密。\n\n《中国互联网地下产业链分析白皮书》（下称“白皮书”）主要讨论后两种形态，并且分析后两种形态与第一种形态的关联。\n\n#### 中国互联网地下产业链发展现状及分析\n\n地下产业链的本质：\n1. 独立型：利用目前国内互联网用户对网络的认知水平不同，精心打造产品，进行的各种获利；\n2. 吸附型：吸附于某互联网细分生态系统中，汲取其养分,利用信息差，进行的获利；\n3. 破坏型：利用技术水平的优势，进行破坏、侵权及获利。\n\n中国互联网地下产业链发展到目前阶段，已经渗透到互联网行业几乎所有的细分行业中。《白皮书》基于互联网的生态结构，主要从下面三个方面来分析目前地下产业链的发展现状：\n\n1. 流量获取分发：互联网的最基本的入口；\n2. 流量变现盈利：流量变现是任何互联网创新服务的基本形态，采购流量->提供增值服务->\n变现，也是大多数互联网创新的最基础的原理；\n3. 数据信息安全：除了流量获取分发，和流量变现盈利以外，还有一部分地下产业链在围绕\n数据服务、信息服务、信息与数据安全或是攻击敲诈勒索诈骗上做文章。\n\n通过这三方面的分析，也揭露了搜索结果排名的秘密,被具有诱惑头像的陌生人邀请为好友的原因，被盗后的QQ号（即信封号）的一套处理流程，淘宝刷单，海外代购，微店，游戏，博彩，网络色情诱惑，网络培训与传销，比特币与山寨币，个人信息盗取和贩卖，打码平台等等。\n\n\n","source":"_drafts/《中国互联网地下产业链分析白皮书》阅读笔记.md","raw":"title: 《中国互联网地下产业链分析白皮书》阅读笔记（一）\ntags:\n---\n\n### 一、 地下产业链概述与全貌性导读\n\n在中国的传统行业都有一定的所谓黑市门槛，即属于潜规则范畴或者是不为人知的\n行业秘密，这种信息只流传在最信任的人脉圈子里。中国互联网行业也有黑市门槛，那就是互联网地下产业链，互联网地下产业链并不是消极的事物，在一定程度上讲，它更接近用户需求，更能还原互联网本貌。\n\n#### 中国互联网地下产业链产生原因：\n\n1. 用户需求多样性，主流互联网产品无法满足所有用户需求；\n2. 互联网的高速发展带来了诱人的红利；\n3. 技术成本的不断下降。\n\n#### 研究互联网地下产业链的主要目的和意义：\n\n1. 给我们带来更真实的用户需求启示；\n2. 让我们更好的评估互联网地下产业链在商业游戏中带来的影响；\n3. 互联网地下产业链表现出来的生命力和接地气，对互联网的创业和创新有非常大的学习启示作用。\n\n#### 中国互联网产业链发展现状概述及分析\n\n目前国内互联网产业表现出明显的垄断性，巨头公司垄断了互联网最基础的资源——互联网流量（可以简单理解为用户访问数量）。随着国内互联网的高速发展带来的红利，催高了流量的价格，让互联网红利集中到了少数利益集团手中。目前国内流量主要是被巨头企业垄断，长尾流量被巨头企业采购，巨头们看不上眼的流量被广告联盟占领。\n\n这使得创新有了特别明显的定向性：\n\n 1. 流量强变现能力型创新，这样才能支撑起高额的流量费；\n 2. 资本介入型创新，以此支撑起出早期的发展成本，最典型的就是拉风投。\n \n第一种情况主要是催生了地下产业链的相关变现模式，第二种是比较主流的模式，但是在一定程度上扰乱了市场，原因有二：\n\n1. 风投资本的盈利模式和发展现状所决定；\n2. 由于热点的轮换，加上资本的推波助澜，使得短时间内在细分领域汇集大量的混水摸鱼者，他们最终的产物是一个个动人的故事和一遍遍的概念炒作。而正真的创新者却被推高的流量成本，最终被浮躁的行业环境给吞没，无声无息，进入长时间的黑夜。\n\n国内互联网行业的创新者，大概可以分为三类：\n\n1. 概念投资型：国内互联网的主流，通过媒体炒作，借鉴国外成熟商业模式，拉风投，最终奔着上市和被收购；\n2. 草根灰色型：草根特色，默默赚钱；\n3. 非法黑色型：见不得光、游离在法律边缘，但不是法外之地，有着大量的用户群，高风险，商业模式非常机密。\n\n《中国互联网地下产业链分析白皮书》（下称“白皮书”）主要讨论后两种形态，并且分析后两种形态与第一种形态的关联。\n\n#### 中国互联网地下产业链发展现状及分析\n\n地下产业链的本质：\n1. 独立型：利用目前国内互联网用户对网络的认知水平不同，精心打造产品，进行的各种获利；\n2. 吸附型：吸附于某互联网细分生态系统中，汲取其养分,利用信息差，进行的获利；\n3. 破坏型：利用技术水平的优势，进行破坏、侵权及获利。\n\n中国互联网地下产业链发展到目前阶段，已经渗透到互联网行业几乎所有的细分行业中。《白皮书》基于互联网的生态结构，主要从下面三个方面来分析目前地下产业链的发展现状：\n\n1. 流量获取分发：互联网的最基本的入口；\n2. 流量变现盈利：流量变现是任何互联网创新服务的基本形态，采购流量->提供增值服务->\n变现，也是大多数互联网创新的最基础的原理；\n3. 数据信息安全：除了流量获取分发，和流量变现盈利以外，还有一部分地下产业链在围绕\n数据服务、信息服务、信息与数据安全或是攻击敲诈勒索诈骗上做文章。\n\n通过这三方面的分析，也揭露了搜索结果排名的秘密,被具有诱惑头像的陌生人邀请为好友的原因，被盗后的QQ号（即信封号）的一套处理流程，淘宝刷单，海外代购，微店，游戏，博彩，网络色情诱惑，网络培训与传销，比特币与山寨币，个人信息盗取和贩卖，打码平台等等。\n\n\n","slug":"《中国互联网地下产业链分析白皮书》阅读笔记","published":0,"date":"2016-07-02T13:00:12.923Z","updated":"2016-07-02T13:00:12.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcqi0026f8b9zia1gmg1"},{"title":"Web服务器安全策略","_content":"","source":"_drafts/Web服务器安全策略.md","raw":"title: Web服务器安全策略\ntags:\n---\n","slug":"Web服务器安全策略","published":0,"date":"2015-11-30T04:20:14.141Z","updated":"2015-11-30T04:20:14.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqlxtcqk0027f8b9twmy9k8z"}],"PostAsset":[{"_id":"source/_posts/计算机网络概述/图一.jpg","post":"ciqlxtclr0001f8b9ipo4d5g3","slug":"图一.jpg","modified":1},{"_id":"source/_posts/计算机网络概述/图三.png","post":"ciqlxtclr0001f8b9ipo4d5g3","slug":"图三.png","modified":1},{"_id":"source/_posts/计算机网络概述/图二.png","post":"ciqlxtclr0001f8b9ipo4d5g3","slug":"图二.png","modified":1},{"_id":"source/_posts/计算机网络概述/图五.png","post":"ciqlxtclr0001f8b9ipo4d5g3","slug":"图五.png","modified":1},{"_id":"source/_posts/计算机网络概述/图四.png","post":"ciqlxtclr0001f8b9ipo4d5g3","slug":"图四.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/fengmian.jpg","post":"ciqlxtcmp000df8b9xn1v7sh6","slug":"fengmian.jpg","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/六一儿童节.png","post":"ciqlxtcmp000df8b9xn1v7sh6","slug":"六一儿童节.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图一.png","post":"ciqlxtcmp000df8b9xn1v7sh6","slug":"图一.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图三.png","post":"ciqlxtcmp000df8b9xn1v7sh6","slug":"图三.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图二.png","post":"ciqlxtcmp000df8b9xn1v7sh6","slug":"图二.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图五.png","post":"ciqlxtcmp000df8b9xn1v7sh6","slug":"图五.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图六.png","post":"ciqlxtcmp000df8b9xn1v7sh6","slug":"图六.png","modified":1},{"_id":"source/_posts/单击微信文章进入原文的方法/图四.png","post":"ciqlxtcmp000df8b9xn1v7sh6","slug":"图四.png","modified":1},{"_id":"source/_posts/别样的进制/图一.png","post":"ciqlxtcnj000if8b9a73g2x58","slug":"图一.png","modified":1},{"_id":"source/_posts/别样的进制/图三.png","post":"ciqlxtcnj000if8b9a73g2x58","slug":"图三.png","modified":1},{"_id":"source/_posts/别样的进制/图二.png","post":"ciqlxtcnj000if8b9a73g2x58","slug":"图二.png","modified":1},{"_id":"source/_posts/别样的进制/图四.png","post":"ciqlxtcnj000if8b9a73g2x58","slug":"图四.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter-packet-flow.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"Netfilter-packet-flow.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter-packet-flow.svg","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"Netfilter-packet-flow.svg","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/Netfilter与iptabales关系.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"Netfilter与iptabales关系.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/iptables数据包流程.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"iptables数据包流程.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/iptables策略组成.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"iptables策略组成.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/显式匹配.jpg","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"显式匹配.jpg","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/模拟网络.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"模拟网络.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置1.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"虚拟机网络配置1.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置2.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"虚拟机网络配置2.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/虚拟机网络配置3.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"虚拟机网络配置3.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/设置默认网关.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"设置默认网关.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/访问LM服务1.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"访问LM服务1.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/访问LM服务2.png","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"访问LM服务2.png","modified":1},{"_id":"source/_posts/初识Netfilter-iptables/隐含匹配.jpg","post":"ciqlxtco7000tf8b9ci2pdw6e","slug":"隐含匹配.jpg","modified":1},{"_id":"source/_posts/RSA系类（一）：辗转相除法/图一.png","post":"ciqlxtcq3001rf8b9kyx1eml9","slug":"图一.png","modified":1}],"PostCategory":[{"post_id":"ciqlxtclr0001f8b9ipo4d5g3","category_id":"ciqlxtclt0002f8b9ozwlizw1","_id":"ciqlxtclw0005f8b9r2c52rnu"},{"post_id":"ciqlxtcmj0006f8b9ikzox39w","category_id":"ciqlxtcml0007f8b94loq6a3n","_id":"ciqlxtcmn000af8b9a4oaavfb"},{"post_id":"ciqlxtcmp000df8b9xn1v7sh6","category_id":"ciqlxtcmq000ef8b985zexlu5","_id":"ciqlxtcmr000hf8b9wv96dj7x"},{"post_id":"ciqlxtcnj000if8b9a73g2x58","category_id":"ciqlxtcnl000jf8b9ledb5xl0","_id":"ciqlxtcnm000mf8b9560ix33a"},{"post_id":"ciqlxtco3000pf8b9f2mb5n4m","category_id":"ciqlxtcnl000jf8b9ledb5xl0","_id":"ciqlxtco4000qf8b9txd133a6"},{"post_id":"ciqlxtco7000tf8b9ci2pdw6e","category_id":"ciqlxtco8000uf8b9btto6f2e","_id":"ciqlxtcoa000xf8b9vgy4gxp7"},{"post_id":"ciqlxtcps001ef8b9pkd41ok9","category_id":"ciqlxtcph0015f8b9j3k78iyp","_id":"ciqlxtcpu001ff8b9lm7ldjsl"},{"post_id":"ciqlxtcpy001kf8b9s56035zd","category_id":"ciqlxtcph0015f8b9j3k78iyp","_id":"ciqlxtcpz001lf8b9pi2za6pp"},{"post_id":"ciqlxtcq3001rf8b9kyx1eml9","category_id":"ciqlxtcph0015f8b9j3k78iyp","_id":"ciqlxtcq4001sf8b9y4vud963"},{"post_id":"ciqlxtcqb001xf8b95rkenc9m","category_id":"ciqlxtcqc001yf8b9pz1uhioa","_id":"ciqlxtcqe0021f8b9plc9nss6"},{"post_id":"ciqlxtcpg0014f8b9cdnu0n6t","category_id":"ciqlxtcph0015f8b9j3k78iyp","_id":"ciqlxzwsb00003sb9rhp4p7bb"}],"PostTag":[{"post_id":"ciqlxtclr0001f8b9ipo4d5g3","tag_id":"ciqlxtclt0003f8b991tdoi8i","_id":"ciqlxtclw0004f8b9jjapetbt"},{"post_id":"ciqlxtcmj0006f8b9ikzox39w","tag_id":"ciqlxtcmm0008f8b9fp3ihiu0","_id":"ciqlxtcmn000bf8b9g4a8t6xe"},{"post_id":"ciqlxtcmj0006f8b9ikzox39w","tag_id":"ciqlxtcmn0009f8b91l9gleny","_id":"ciqlxtcmo000cf8b9lzumezy4"},{"post_id":"ciqlxtcmp000df8b9xn1v7sh6","tag_id":"ciqlxtcmq000ff8b93up7n823","_id":"ciqlxtcmr000gf8b93uwabeqg"},{"post_id":"ciqlxtcnj000if8b9a73g2x58","tag_id":"ciqlxtcnl000kf8b9ez3xzcal","_id":"ciqlxtcnn000nf8b9jrv5lokz"},{"post_id":"ciqlxtcnj000if8b9a73g2x58","tag_id":"ciqlxtcnm000lf8b990hynbsg","_id":"ciqlxtcnn000of8b9j10jwocr"},{"post_id":"ciqlxtco3000pf8b9f2mb5n4m","tag_id":"ciqlxtcnl000kf8b9ez3xzcal","_id":"ciqlxtco5000rf8b9b0wlln03"},{"post_id":"ciqlxtco3000pf8b9f2mb5n4m","tag_id":"ciqlxtcnm000lf8b990hynbsg","_id":"ciqlxtco5000sf8b9gac02ty7"},{"post_id":"ciqlxtco7000tf8b9ci2pdw6e","tag_id":"ciqlxtco8000vf8b9jmrvoz14","_id":"ciqlxtcob0010f8b9f934yees"},{"post_id":"ciqlxtco7000tf8b9ci2pdw6e","tag_id":"ciqlxtcoa000wf8b9gzuva1eu","_id":"ciqlxtcoc0011f8b9pc24m07o"},{"post_id":"ciqlxtco7000tf8b9ci2pdw6e","tag_id":"ciqlxtcob000yf8b9c9rky0qr","_id":"ciqlxtcoc0012f8b9c7nbjo2r"},{"post_id":"ciqlxtco7000tf8b9ci2pdw6e","tag_id":"ciqlxtcob000zf8b9kq9pb7cm","_id":"ciqlxtcoc0013f8b9mc6s0l0m"},{"post_id":"ciqlxtcpg0014f8b9cdnu0n6t","tag_id":"ciqlxtcpi0016f8b9hut6pjpx","_id":"ciqlxtcpk001af8b9aedfdmnu"},{"post_id":"ciqlxtcpg0014f8b9cdnu0n6t","tag_id":"ciqlxtcnm000lf8b990hynbsg","_id":"ciqlxtcpk001bf8b9zcb6ijpt"},{"post_id":"ciqlxtcpg0014f8b9cdnu0n6t","tag_id":"ciqlxtcpi0017f8b989vfzpjj","_id":"ciqlxtcpr001cf8b9k6okjwrk"},{"post_id":"ciqlxtcpg0014f8b9cdnu0n6t","tag_id":"ciqlxtcpj0019f8b9lzspkpc1","_id":"ciqlxtcpr001df8b9qda6jkwr"},{"post_id":"ciqlxtcps001ef8b9pkd41ok9","tag_id":"ciqlxtcpi0016f8b9hut6pjpx","_id":"ciqlxtcpv001hf8b9j2bpd3w3"},{"post_id":"ciqlxtcps001ef8b9pkd41ok9","tag_id":"ciqlxtcnm000lf8b990hynbsg","_id":"ciqlxtcpv001if8b9ynwn0nhv"},{"post_id":"ciqlxtcps001ef8b9pkd41ok9","tag_id":"ciqlxtcpu001gf8b96bmgos2v","_id":"ciqlxtcpv001jf8b93p2p9de3"},{"post_id":"ciqlxtcpy001kf8b9s56035zd","tag_id":"ciqlxtcpi0016f8b9hut6pjpx","_id":"ciqlxtcq0001nf8b93s3kko4w"},{"post_id":"ciqlxtcpy001kf8b9s56035zd","tag_id":"ciqlxtcnm000lf8b990hynbsg","_id":"ciqlxtcq1001of8b9d8faz5tp"},{"post_id":"ciqlxtcpy001kf8b9s56035zd","tag_id":"ciqlxtcpz001mf8b9o4nztl24","_id":"ciqlxtcq1001pf8b99vb09zdi"},{"post_id":"ciqlxtcpy001kf8b9s56035zd","tag_id":"ciqlxtcpj0019f8b9lzspkpc1","_id":"ciqlxtcq1001qf8b9hdongxlb"},{"post_id":"ciqlxtcq3001rf8b9kyx1eml9","tag_id":"ciqlxtcpi0016f8b9hut6pjpx","_id":"ciqlxtcq5001uf8b9j5m20f9y"},{"post_id":"ciqlxtcq3001rf8b9kyx1eml9","tag_id":"ciqlxtcnm000lf8b990hynbsg","_id":"ciqlxtcq5001vf8b9jakjmjl3"},{"post_id":"ciqlxtcq3001rf8b9kyx1eml9","tag_id":"ciqlxtcq4001tf8b9j841lyfw","_id":"ciqlxtcq5001wf8b9wn3x42rw"},{"post_id":"ciqlxtcqb001xf8b95rkenc9m","tag_id":"ciqlxtcqd001zf8b9x6n0w0p4","_id":"ciqlxtcqf0023f8b9ujkva3ru"},{"post_id":"ciqlxtcqb001xf8b95rkenc9m","tag_id":"ciqlxtcqe0020f8b9hkor12nb","_id":"ciqlxtcqf0024f8b9zp5l1dyu"},{"post_id":"ciqlxtcqb001xf8b95rkenc9m","tag_id":"ciqlxtcqf0022f8b9lewt0zsc","_id":"ciqlxtcqg0025f8b97rmgvico"}],"Tag":[{"name":"计算机网络","_id":"ciqlxtclt0003f8b991tdoi8i"},{"name":"杂谈","_id":"ciqlxtcmm0008f8b9fp3ihiu0"},{"name":"关于博客","_id":"ciqlxtcmn0009f8b91l9gleny"},{"name":"微信开发","_id":"ciqlxtcmq000ff8b93up7n823"},{"name":"计算机基础","_id":"ciqlxtcnl000kf8b9ez3xzcal"},{"name":"数学","_id":"ciqlxtcnm000lf8b990hynbsg"},{"name":"iptables","_id":"ciqlxtco8000vf8b9jmrvoz14"},{"name":"Netfilter","_id":"ciqlxtcoa000wf8b9gzuva1eu"},{"name":"防火墙","_id":"ciqlxtcob000yf8b9c9rky0qr"},{"name":"网络","_id":"ciqlxtcob000zf8b9kq9pb7cm"},{"name":"RSA算法","_id":"ciqlxtcpi0016f8b9hut6pjpx"},{"name":"欧拉函数","_id":"ciqlxtcpi0017f8b989vfzpjj"},{"name":"费马小定理","_id":"ciqlxtcpj0019f8b9lzspkpc1"},{"name":"扩展辗转相除法","_id":"ciqlxtcpu001gf8b96bmgos2v"},{"name":"中国剩余定理","_id":"ciqlxtcpz001mf8b9o4nztl24"},{"name":"辗转相除法","_id":"ciqlxtcq4001tf8b9j841lyfw"},{"name":"教程","_id":"ciqlxtcqd001zf8b9x6n0w0p4"},{"name":"总结","_id":"ciqlxtcqe0020f8b9hkor12nb"},{"name":"Hexo","_id":"ciqlxtcqf0022f8b9lewt0zsc"}]}}