{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/landscape/source/js/jquery2.0.3.min.js","path":"js/jquery2.0.3.min.js","modified":1},{"_id":"themes/landscape/source/js/jquery.min.map","path":"js/jquery.min.map","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/landscape/source/css/images/favicon.jpg","path":"css/images/favicon.jpg","modified":1},{"_id":"themes/landscape/source/css/images/banner_bak.jpg","path":"css/images/banner_bak.jpg","modified":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1},{"_id":"themes/landscape/source/css/font.css","path":"css/font.css","modified":1}],"Cache":[{"_id":"source/_posts/Github个人静态博客的搭建.md","shasum":"19903dc9cb176d932daf3367af7c40099ff28d1f","modified":1448121533482},{"_id":"source/_posts/博客名字的由来.md","shasum":"404d98aa45921b149a35140261fd60e8edbda26b","modified":1448105662576},{"_id":"source/_posts/计算机网络概述/图三.png","shasum":"c078fb552b5f969d3156d5365177d26ceae74fd7","modified":1448542287180},{"_id":"source/_posts/计算机网络概述/图二.png","shasum":"1a56f33a1fa563de33744b2ac4814bbb8bde1e26","modified":1448542287180},{"_id":"source/_posts/计算机网络概述/图四.png","shasum":"80a6ff3d993cb7f5aba1c3a3223cc4a57f69ac0d","modified":1448542287181},{"_id":"source/_posts/计算机网络概述.md","shasum":"a170460d77327ba2e9538874fd368c4b5c658e69","modified":1448544892301},{"_id":"source/_posts/计算机网络概述/图五.png","shasum":"667b20c74023428436cdaa7b26f6d26a65cad7f1","modified":1448542287182},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1448024404301},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1448024404301},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1448024404301},{"_id":"themes/landscape/_config.yml","shasum":"53815d355e65b7dd75673ee9cc18b8e960b75281","modified":1448286750040},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"b55897edcd53dc54a4f0e288c457224523604824","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"266452fb36626bb0a0ca3e0e8b2978c43c23866b","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"81d33e9e9dd86bc0a2073a78cd4f50724acd4de1","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"2c9654a7beab5dbbb028eeb156807ae9179624b5","modified":1448122803357},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1448024404301},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1448024404301},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1448024404301},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1448024404301},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1448024404301},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1448024404301},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1448024404301},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1448024404301},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1448024404301},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1448024404301},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1448024404301},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1448024404317},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1448024404317},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1448024404317},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1448024404317},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1448024404317},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"0af69dcc1affaf8aeed33402a5f10b6af5b48418","modified":1448110160402},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1448024404317},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1448024404317},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1448024404317},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1448024404317},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1448024404317},{"_id":"themes/landscape/source/css/font.css","shasum":"d2c3b48df4256b730b9dcb4b932550544cd83243","modified":1448024404317},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1448024404317},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1448024404317},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1448024404333},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1448024404379},{"_id":"themes/landscape/source/css/images/favicon.jpg","shasum":"1ed9999d5f43b9d5873ce9fe72263eb271fae9d3","modified":1448122613179},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1448024404379},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1448024404379},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1448024404894},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1448024404379},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1448024404894},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1448024404894},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1448024404894},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1448024404894},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1448024404894},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1448024404910},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1448024404910},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1448024404910},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1448024404910},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1448024404910},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1448024404910},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1448024404925},{"_id":"source/_posts/计算机网络概述/图一.jpg","shasum":"6fe0234cfaaea8b8665cb48b5cf36e61e60410cb","modified":1448544991755},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1448024404333},{"_id":"themes/landscape/source/js/jquery.min.map","shasum":"83c9ec8ebb61ee9916f624a1e75ba47b0f1b0ec4","modified":1448156768095},{"_id":"themes/landscape/source/js/jquery2.0.3.min.js","shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1448024404925},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"813f6072ce732ad698e9979bfb3a3dcd1e4b0d0a","modified":1448089823281},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1448024404333},{"_id":"themes/landscape/source/css/images/banner_bak.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1448024404379},{"_id":"public/js/script.js","modified":1448545849392,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/js/jquery2.0.3.min.js","modified":1448545849400,"shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d"},{"_id":"public/js/jquery.min.map","modified":1448545849409,"shasum":"83c9ec8ebb61ee9916f624a1e75ba47b0f1b0ec4"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1448545849415,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1448545849420,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1448545849425,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1448545849428,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1448545849432,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1448545849436,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1448545849446,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1448545849458,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1448545849461,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1448545849467,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1448545849474,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1448545849477,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1448545849482,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1448545849486,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1448545849491,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1448545850278,"shasum":"67182948fec42b5b89a68a17bea4ada6fcef79a0"},{"_id":"public/css/images/favicon.jpg","modified":1448545850551,"shasum":"1ed9999d5f43b9d5873ce9fe72263eb271fae9d3"},{"_id":"public/css/images/banner_bak.jpg","modified":1448545850560,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/images/banner.jpg","modified":1448545850568,"shasum":"813f6072ce732ad698e9979bfb3a3dcd1e4b0d0a"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1448545850573,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1448545850580,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1448545850585,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1448545850592,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1448545850597,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/css/font.css","modified":1448545850601,"shasum":"d2c3b48df4256b730b9dcb4b932550544cd83243"},{"_id":"public/2015/11/26/计算机网络概述/图一.jpg","modified":1448545850607,"shasum":"6fe0234cfaaea8b8665cb48b5cf36e61e60410cb"},{"_id":"public/2015/11/26/计算机网络概述/图三.png","modified":1448545850615,"shasum":"c078fb552b5f969d3156d5365177d26ceae74fd7"},{"_id":"public/2015/11/26/计算机网络概述/图二.png","modified":1448545850620,"shasum":"1a56f33a1fa563de33744b2ac4814bbb8bde1e26"},{"_id":"public/2015/11/26/计算机网络概述/图五.png","modified":1448545850629,"shasum":"667b20c74023428436cdaa7b26f6d26a65cad7f1"},{"_id":"public/2015/11/26/计算机网络概述/图四.png","modified":1448545850638,"shasum":"80a6ff3d993cb7f5aba1c3a3223cc4a57f69ac0d"},{"_id":"public/2015/11/26/计算机网络概述/index.html","modified":1448545850723,"shasum":"7fcdadb9ebb049d660a1a19e23c65be188c83712"},{"_id":"public/2015/11/21/Github个人静态博客的搭建/index.html","modified":1448545850780,"shasum":"cdb088dff1553231098d53475d82d237286735f9"},{"_id":"public/2015/11/21/博客名字的由来/index.html","modified":1448545850799,"shasum":"021677e5db8892c73f59a487dd0b5c2235d3b890"},{"_id":"public/archives/index.html","modified":1448545850822,"shasum":"fc6f71701c8bc948edc6762b08a1e2e80c2ac6e5"},{"_id":"public/archives/2015/index.html","modified":1448545850842,"shasum":"0bbc5c4e2bba89a70dd813fa7549caecf67a3f5b"},{"_id":"public/archives/2015/11/index.html","modified":1448545850864,"shasum":"6eca79523e994f5e1af6778daa4f700c433c8b66"},{"_id":"public/baidusitemap.xml","modified":1448545850869,"shasum":"b40dac06ef8273b167de4059cfbb80d668372d7d"},{"_id":"public/categories/Hexo/index.html","modified":1448545850880,"shasum":"bf1c6769c11c5f452b65c9055245b4f05200d68b"},{"_id":"public/categories/计算机网络/index.html","modified":1448545850893,"shasum":"a7c7f7d25a5675c51d785a0638fc7e156e1f263c"},{"_id":"public/categories/杂谈/index.html","modified":1448545850904,"shasum":"c231d0fea5bf6a66306d75e32f33552ae7ed5b7f"},{"_id":"public/atom.xml","modified":1448545850911,"shasum":"362817ac1da1a8f6281a5b09c6d2c886f5160a95"},{"_id":"public/index.html","modified":1448545850932,"shasum":"b4fe89703a4aca19ad07ecfdd2901d0ac3f69e79"},{"_id":"public/sitemap.xml","modified":1448545850936,"shasum":"85aebf62cdb7ccf72ef42e7e9e3e5618b7b00ef5"},{"_id":"public/tags/教程/index.html","modified":1448545850946,"shasum":"bc415610e6083dda62b1027babcb773cf3e1e13a"},{"_id":"public/tags/总结/index.html","modified":1448545850958,"shasum":"bf18640b318a8720f5762ab912406f57046c071e"},{"_id":"public/tags/Hexo/index.html","modified":1448545850969,"shasum":"7fac6895cc1e4c04306c35a5d779485815b7b65c"},{"_id":"public/tags/计算机网络/index.html","modified":1448545850981,"shasum":"be3690793ce25796ee366f9fe8d576d9ecbc80e4"},{"_id":"public/tags/杂谈/index.html","modified":1448545850992,"shasum":"653eefe79c73b9f7458e8e2b58415b3ace777ad2"},{"_id":"public/tags/关于博客/index.html","modified":1448545851000,"shasum":"09ca58bbf9b31657c47322fce76e0a5f8a12a240"}],"Category":[{"name":"Hexo","_id":"cihgaspv10001owop68qgl77z"},{"name":"计算机网络","_id":"cihgaspvd000aowopww70m296"},{"name":"杂谈","_id":"cihgaspwg000fowop7qr549af"}],"Data":[],"Page":[],"Post":[{"title":"Github个人静态博客的搭建总结","date":"2015-11-21T09:31:06.000Z","_content":"\n在搭建博客中出现了不少问题，在此分享一下个人的博客搭建过程：\n\n\n### 第一步：想不花钱就把事情给办了\n俗话说：想不花钱，就把事情给办了，你的找一个有钱有势的主。同样的，如果你想要有一个独立的博客，又不想自己掏钱和投入经历去维护，那么你的找一个有优势的主，这当然是首推[全球最大的男性同性交友平台 github](http://www.zhihu.com/question/28976652/answer/42771650)(*^__^*) ，至于怎么注册，怎么设置，直接看官网[帮助文档](https://help.github.com/)。\n<!--more-->\n### 第二步：hexo —— 简单、快速、强大的Node.js静态博客框架\nHexo的安装和配置请参考**Heaven**的[《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)，由于Heaven大神一直是在搞前端的，博文里没有提到node.js的安装，这个就是下载，下一步的事，也不详陈了。\n\n---\n\n### 总结遇到的问题\n\n注意：以下操作都是基于windows7！！！\n\n1、在git bash客户端，使用ssh方式进行clone和push时，每次关闭重开git bash客户端总是出现如下错误：\n\n``` bash\n$ git clone git@github.com:xiaorisu/github-roam.git\nCloning into 'github-roam'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n之前一直是手动输入如下两句代码来解决此问题：\n\n``` bash\neval $(ssh-agent -s)\nssh-add ~/.ssh/xxxx\n```\n\n我是一个懒人，每次都要这样手动输入这两行代码，我会很烦躁，于是有了下面的解决方案：\n在当前用户目录底下新建一个.bash_profile文件，不要问我当前用户的目录是哪个目录，一般是打开cmd之后，光标之前的路劲就是当前用户目录。当然，如果你设置过默认打开路径，那就是另一回事了，这时你可以使用如下命令得到：\n\n``` bash\necho %systemdrive%%homepath%\n```\n\n创建好了.bash_profile文件后，在文件中输入如下代码：\n\n``` bash\neval $(ps | grep 'ssh-agent' | awk '{print $1}' | xargs kill -9)\neval $(ssh-agent -s)\nssh-add ~/.ssh/XXXXX\n```\n\n保存文件，此文件会在每次打开git bash时加载并运行其中的命令。解释一下这三条命令的含义：第一句是杀死之前开的所有ssh-agent，由于每次打开都会执行两编这里面的命令，没有去查是什么原因导致的。并且每次关闭了git bash客户端，都不会关闭它打开的ssh-agent程序；第二句是开启ssh-agent服务；第三句是将专用密钥添加到ssh-agent的高速缓存中。\n\n---\n\n2、执行hexo s 命令后，在浏览器中输入localhost:4000半天没有响应，最后无法访问生成的静态页面。\n\n这个问题的原因在于4000端口被FxServer占用了，但是hexo-server没有报错，真是郁闷！！！解决这问题很简单，可以关掉FxServer服务，也可使用hexo s -p 4040即可解决。解决这个问题并不困难，我要说的是怎么找到问题的原因的。\n首先使用netstat命令查看当前电脑的网络连接状况：\n\n``` bash\nC:\\Users\\lenovo>netstat -ano | findstr \"4000\"\n  TCP    0.0.0.0:4000           0.0.0.0:0              LISTENING       21908\n  TCP    127.0.0.1:4000         0.0.0.0:0              LISTENING       17620\n  TCP    127.0.0.1:4000         127.0.0.1:4737         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4738         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4739         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4740         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4741         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4742         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4755         ESTABLISHED     17620\n  TCP    127.0.0.1:4737         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4738         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4739         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4740         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4741         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4742         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4755         127.0.0.1:4000         ESTABLISHED     556\n```\n\n发现4000端口有很多连接，发现有两个进程在监听4000端口，pid分别是21908和17620，从任务管理器中可以看到这两个pid对应的进程分别是node.exe和FxServer服务。这就是查找问题的过程。\n\n---\n\n### 最后说一下改进\n\n最后说一说多仓库部署和源代码自动备份以及自动打开Markdown编辑器。\n\n先上我的_config.yml文件：\n\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 翰海尘沙\nsubtitle: 进击的程序员\ndescription: 技术分享、阅读笔记\nauthor: 翰海尘沙\nlanguage: zh-CN\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yourgithubname.github.io\nroot: /blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: landscape\n#theme: leo\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n# 自动备份\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n\n# 评论\n# 1.友言\n#uyan:\n#  enable: true\n# 2.多说\n#duoshuo_shortname: shortname\n# 3.畅言\nchangyan:\n  enable: true\n\n# RSS订阅\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 10\n\n# 网站地图\nsitemap:\n    path: sitemap.xml\n```\n\n多仓库部署比较简单，只要在_config.yml配置成如下：\n\n```\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n```\n\n使用hexo d命令就可以自动部署到github和gitcafe上去。\n\n多仓自动库备份稍微复杂些，先在配置文件中自定自己的自动备份的配置：\n\n```\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n```\n\n然后在博客源代码的项目根目录下的scripts目录（如果没有就新建一个scripes文件夹）中新建一个任意名字的javascript文件。我新建的是一个AutoBackUp.js，添加如下代码：\n\n``` JavaScript\nrequire('shelljs/global');\n\nvar parseConfig = require('hexo-deployer-git/lib/parse_config');\nvar util = require('hexo/node_modules/hexo-util');\nvar Promise = require('hexo/node_modules/bluebird');\nvar spawn = util.spawn;\n\ntry {\n    hexo.on('deployAfter', function() {\n        run();\n    });\n} catch (e) {\n    console.log(\"备份出现异常，详细信息\" + e.toString());\n}\n\nfunction git() {\n    var len = arguments.length;\n    var args = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n        args[i] = arguments[i];\n    }\n\n    return spawn('git', args, {\n        cwd: hexo.base_dir,\n        verbose: !hexo.config.backup.silent\n    });\n}\n\nfunction push(repo) {\n    return git('add', '-A').then(function() {\n        return git('commit', '-m', \"Form auto backup script\\'s commit\").catch(function() {\n            // Do nothing. It's OK if nothing to commit.\n        });\n    }).then(function() {\n        return git('push', '-u', repo.url, 'master:' + repo.branch, '--force');\n    });\n}\n\nfunction run() {\n    if (!which('git')) {\n        echo('Sorry, this script require git');\n    } else {\n        echo(\"=======================Auto Backup Begin=======================\");\n        Promise.each(parseConfig(hexo.config.backup),function(repo){\n            return push(repo);\n        });\n        echo(\"=======================Auto Backup Complete======================\");\n    }\n}\n\n```\n\n还要安装shelljs模块，这样每次执行hexo d后就会自动备份到githu和gitcafe代码仓库。\n\n自动打开Markdown编辑器，同样在srcipt目录中添加一个OpenEditor.js文件，代码如下：\n``` JavaScript\nvar exec = require('child_process').exec;\nvar parseConfig = require('./parse_config');\n// Hexo 2.x 用户复制这段\n// hexo.on('new', function(path){\n// exec('start  \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + path);\n// });\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data) {\n    //exec('start  /max \"\" \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + data.path);\n    exec('start  /max \"\" \"D:\\\\Program Files\\\\MarkdownPad 2\\\\MarkdownPad2.exe\" ' + data.path);\n});\n\n/*=================windows code end======================*/\n\n\n///*********************************************************\n// *                 linux   代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x\n//hexo.on('new', function(path){\n//  exec('vi', [path]);\n//});\n//\n//// Hexo 3\n//hexo.on('new', function(data){\n//  exec('vi', [data.path]);\n//});\n//\n///*=================linux  code  end======================*/\n//\n///*********************************************************\n// *                 mac     代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x 用户复制这段\n//hexo.on('new', function(path){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n//});\n//// Hexo 3 用户复制这段\n//hexo.on('new', function(data){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n//});\n///*=================mac    code  end======================*/\n\n```\n\n在windows7下是亲测可以打开，至于Mac和Linux没测试过，不敢保证可以用。\n\n---\n\n参考博文：\n\n1. [younglaker的《Hexo系列博客》](http://laker.me/blog/categories/Hexo/)\n2. [夏末的《Hexo添加文章时自动打开编辑器》](http://notes.xiamo.tk/2015-06-29-Hexo添加文章时自动打开编辑器.html)\n3. [夏末的《自动备份Hexo博客源文件》](http://notes.xiamo.tk/2015-07-06-自动备份Hexo博客源文件.html)\n4. [Heaven的《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)\n5. [github高亮语言关键字](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)","source":"_posts/Github个人静态博客的搭建.md","raw":"title: Github个人静态博客的搭建总结\ndate: 2015-11-21 17:31:06\ntags:\n - 教程\n - 总结\n - Hexo\ncategories:\n - Hexo\n---\n\n在搭建博客中出现了不少问题，在此分享一下个人的博客搭建过程：\n\n\n### 第一步：想不花钱就把事情给办了\n俗话说：想不花钱，就把事情给办了，你的找一个有钱有势的主。同样的，如果你想要有一个独立的博客，又不想自己掏钱和投入经历去维护，那么你的找一个有优势的主，这当然是首推[全球最大的男性同性交友平台 github](http://www.zhihu.com/question/28976652/answer/42771650)(*^__^*) ，至于怎么注册，怎么设置，直接看官网[帮助文档](https://help.github.com/)。\n<!--more-->\n### 第二步：hexo —— 简单、快速、强大的Node.js静态博客框架\nHexo的安装和配置请参考**Heaven**的[《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)，由于Heaven大神一直是在搞前端的，博文里没有提到node.js的安装，这个就是下载，下一步的事，也不详陈了。\n\n---\n\n### 总结遇到的问题\n\n注意：以下操作都是基于windows7！！！\n\n1、在git bash客户端，使用ssh方式进行clone和push时，每次关闭重开git bash客户端总是出现如下错误：\n\n``` bash\n$ git clone git@github.com:xiaorisu/github-roam.git\nCloning into 'github-roam'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n之前一直是手动输入如下两句代码来解决此问题：\n\n``` bash\neval $(ssh-agent -s)\nssh-add ~/.ssh/xxxx\n```\n\n我是一个懒人，每次都要这样手动输入这两行代码，我会很烦躁，于是有了下面的解决方案：\n在当前用户目录底下新建一个.bash_profile文件，不要问我当前用户的目录是哪个目录，一般是打开cmd之后，光标之前的路劲就是当前用户目录。当然，如果你设置过默认打开路径，那就是另一回事了，这时你可以使用如下命令得到：\n\n``` bash\necho %systemdrive%%homepath%\n```\n\n创建好了.bash_profile文件后，在文件中输入如下代码：\n\n``` bash\neval $(ps | grep 'ssh-agent' | awk '{print $1}' | xargs kill -9)\neval $(ssh-agent -s)\nssh-add ~/.ssh/XXXXX\n```\n\n保存文件，此文件会在每次打开git bash时加载并运行其中的命令。解释一下这三条命令的含义：第一句是杀死之前开的所有ssh-agent，由于每次打开都会执行两编这里面的命令，没有去查是什么原因导致的。并且每次关闭了git bash客户端，都不会关闭它打开的ssh-agent程序；第二句是开启ssh-agent服务；第三句是将专用密钥添加到ssh-agent的高速缓存中。\n\n---\n\n2、执行hexo s 命令后，在浏览器中输入localhost:4000半天没有响应，最后无法访问生成的静态页面。\n\n这个问题的原因在于4000端口被FxServer占用了，但是hexo-server没有报错，真是郁闷！！！解决这问题很简单，可以关掉FxServer服务，也可使用hexo s -p 4040即可解决。解决这个问题并不困难，我要说的是怎么找到问题的原因的。\n首先使用netstat命令查看当前电脑的网络连接状况：\n\n``` bash\nC:\\Users\\lenovo>netstat -ano | findstr \"4000\"\n  TCP    0.0.0.0:4000           0.0.0.0:0              LISTENING       21908\n  TCP    127.0.0.1:4000         0.0.0.0:0              LISTENING       17620\n  TCP    127.0.0.1:4000         127.0.0.1:4737         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4738         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4739         ESTABLISHED     17620\n  TCP    127.0.0.1:4000         127.0.0.1:4740         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4741         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4742         CLOSE_WAIT      17620\n  TCP    127.0.0.1:4000         127.0.0.1:4755         ESTABLISHED     17620\n  TCP    127.0.0.1:4737         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4738         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4739         127.0.0.1:4000         ESTABLISHED     556\n  TCP    127.0.0.1:4740         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4741         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4742         127.0.0.1:4000         FIN_WAIT_2      556\n  TCP    127.0.0.1:4755         127.0.0.1:4000         ESTABLISHED     556\n```\n\n发现4000端口有很多连接，发现有两个进程在监听4000端口，pid分别是21908和17620，从任务管理器中可以看到这两个pid对应的进程分别是node.exe和FxServer服务。这就是查找问题的过程。\n\n---\n\n### 最后说一下改进\n\n最后说一说多仓库部署和源代码自动备份以及自动打开Markdown编辑器。\n\n先上我的_config.yml文件：\n\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 翰海尘沙\nsubtitle: 进击的程序员\ndescription: 技术分享、阅读笔记\nauthor: 翰海尘沙\nlanguage: zh-CN\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yourgithubname.github.io\nroot: /blog/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: landscape\n#theme: leo\n\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n# 自动备份\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n\n# 评论\n# 1.友言\n#uyan:\n#  enable: true\n# 2.多说\n#duoshuo_shortname: shortname\n# 3.畅言\nchangyan:\n  enable: true\n\n# RSS订阅\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 10\n\n# 网站地图\nsitemap:\n    path: sitemap.xml\n```\n\n多仓库部署比较简单，只要在_config.yml配置成如下：\n\n```\ndeploy:\n  type: git\n  repository:\n    github: git@github.com:your_repository,gh-pages\n    gitcafe: git@gitcafe.com:your_repository,gitcafe-pages\n```\n\n使用hexo d命令就可以自动部署到github和gitcafe上去。\n\n多仓自动库备份稍微复杂些，先在配置文件中自定自己的自动备份的配置：\n\n```\nbackup:\n  type: git\n  repo: \n    github: git@github.com:your_repository,master\n    gitcafe: git@gitcafe.com:your_repository,master\n```\n\n然后在博客源代码的项目根目录下的scripts目录（如果没有就新建一个scripes文件夹）中新建一个任意名字的javascript文件。我新建的是一个AutoBackUp.js，添加如下代码：\n\n``` JavaScript\nrequire('shelljs/global');\n\nvar parseConfig = require('hexo-deployer-git/lib/parse_config');\nvar util = require('hexo/node_modules/hexo-util');\nvar Promise = require('hexo/node_modules/bluebird');\nvar spawn = util.spawn;\n\ntry {\n    hexo.on('deployAfter', function() {\n        run();\n    });\n} catch (e) {\n    console.log(\"备份出现异常，详细信息\" + e.toString());\n}\n\nfunction git() {\n    var len = arguments.length;\n    var args = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n        args[i] = arguments[i];\n    }\n\n    return spawn('git', args, {\n        cwd: hexo.base_dir,\n        verbose: !hexo.config.backup.silent\n    });\n}\n\nfunction push(repo) {\n    return git('add', '-A').then(function() {\n        return git('commit', '-m', \"Form auto backup script\\'s commit\").catch(function() {\n            // Do nothing. It's OK if nothing to commit.\n        });\n    }).then(function() {\n        return git('push', '-u', repo.url, 'master:' + repo.branch, '--force');\n    });\n}\n\nfunction run() {\n    if (!which('git')) {\n        echo('Sorry, this script require git');\n    } else {\n        echo(\"=======================Auto Backup Begin=======================\");\n        Promise.each(parseConfig(hexo.config.backup),function(repo){\n            return push(repo);\n        });\n        echo(\"=======================Auto Backup Complete======================\");\n    }\n}\n\n```\n\n还要安装shelljs模块，这样每次执行hexo d后就会自动备份到githu和gitcafe代码仓库。\n\n自动打开Markdown编辑器，同样在srcipt目录中添加一个OpenEditor.js文件，代码如下：\n``` JavaScript\nvar exec = require('child_process').exec;\nvar parseConfig = require('./parse_config');\n// Hexo 2.x 用户复制这段\n// hexo.on('new', function(path){\n// exec('start  \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + path);\n// });\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data) {\n    //exec('start  /max \"\" \"D:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\" ' + data.path);\n    exec('start  /max \"\" \"D:\\\\Program Files\\\\MarkdownPad 2\\\\MarkdownPad2.exe\" ' + data.path);\n});\n\n/*=================windows code end======================*/\n\n\n///*********************************************************\n// *                 linux   代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x\n//hexo.on('new', function(path){\n//  exec('vi', [path]);\n//});\n//\n//// Hexo 3\n//hexo.on('new', function(data){\n//  exec('vi', [data.path]);\n//});\n//\n///*=================linux  code  end======================*/\n//\n///*********************************************************\n// *                 mac     代码                          *\n// *********************************************************/\n//\n//var exec = require('child_process').exec;\n//\n//// Hexo 2.x 用户复制这段\n//hexo.on('new', function(path){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n//});\n//// Hexo 3 用户复制这段\n//hexo.on('new', function(data){\n//    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n//});\n///*=================mac    code  end======================*/\n\n```\n\n在windows7下是亲测可以打开，至于Mac和Linux没测试过，不敢保证可以用。\n\n---\n\n参考博文：\n\n1. [younglaker的《Hexo系列博客》](http://laker.me/blog/categories/Hexo/)\n2. [夏末的《Hexo添加文章时自动打开编辑器》](http://notes.xiamo.tk/2015-06-29-Hexo添加文章时自动打开编辑器.html)\n3. [夏末的《自动备份Hexo博客源文件》](http://notes.xiamo.tk/2015-07-06-自动备份Hexo博客源文件.html)\n4. [Heaven的《使用Hexo搭建GitHub个人博客》](http://heavenru.com/2015/09/02/使用Hexo搭建GitHub个人博客/)\n5. [github高亮语言关键字](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)","slug":"Github个人静态博客的搭建","published":1,"updated":"2015-11-21T15:58:53.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihgaspus0000owop30v7mdse"},{"title":"计算机网络概述","date":"2015-11-26T12:51:27.000Z","_content":"\n\n### 基本原理\n\n在《也说“当你输入一个网址，实际会发生什么?”》中介绍到，一台电脑要跟另一台电脑进行通信（所谓通信就是进行数据交换，比如：从其他电脑上下载一个文件到自己电脑等等，如果没有网络，我们一般的做法是使用U盘、光盘等存储设备将文件从某电脑上拷贝到U盘或者刻录到光盘，然后再把U盘或者光盘的文件拷贝到自己电脑上），说道一个重要的步骤就是找到想进行通信的计算机的IP地址（使用DNS协议实现），只是这样就能通信了吗？我只能说小伙子你真是“too young too simple”。这只是万里长征的一小步，为了后面知识点介绍的方便和对网络通信有大局观，现在先简单的概括性的对网络进行介绍。  \n\n上篇日记中说到，在浏览器地址栏中输入www.baidu.com时，我们的计算机会把这个域名转换成IP地址，这个宏观过程就是之前讲过的DNS协议查询的那样，但是现在的问题是，本机也就是192.168.1.100去询问DNS服务器223.5.5.5 www.baidu.com的IP是多少时，本机和DNS服务器并不是用一根线直接相连的，而是通过网关和路由器间接相连，要把这个询问消息发送个DNS服务器，就必须要这些网关和路由器进行转发，使用ipconfig /all命令可以查看网关，如图：\n\n<!--more-->\n\n{% asset_img 图一.jpg 图一 %}  \n\n也就是说我先把信息发给网关或者路由器，如果只能使用IP来表示目标的话，那就只能先将目标设置为网关IP：192.168.1.100，但是当网关收到了这条消息后，网关不知道该怎么办，它该把这条消息发给谁呢？这显然是行不通的，当然这里可以使用广播，向与网关相连的所有的网关或这路由器都发送这条消息，其它机器使用同样的方法一直把消息传递给DNS服务器，然后DNS服务器使用同样的方法把响应回传。这种实现有一个很恐怖的地方，就拿网关A以及和网关A相连的另一个路由B来说，当网关把消息广播出去后，路由B会收到一条消息，然后路由B又将消息广播，此时网关A又会收到这条消息，然后A和B就传这条消息传到白头到老，地老天荒。如图：\n\n{% asset_img 图二.png 图二 %}  \n\n有人说这个比较容易解决，A传给B后，B传给除A外的其他机器，这样就不会出现这种传过来传回去的无限循环。传给出了除信息来源的其他机器，也就是说每传到一个机器后，要把信息里的源IP地址改变成机器自己的IP地址，这会出现当DNS服务器收到信息后不知道把信息回给谁？接着广播吗？就算这样行的通，这样真的能解决无限循环的问题吗？现在假设A将信息传给B，B传给除A外的其他机器，比如C，C收到信息，C将信息传给除B外的其他机器，比如A，又是一个天长地久，之前是两人的缠缠绵绵到天涯，现在是三人的纠葛漩涡。除此之外，这种方法带来的将是整个网络的瘫痪，进入流言满天飞，而且是永无停歇的境况。如图：\n\n{% asset_img 图三.png 图三 %}  \n\n这么看来这种方法是行不通的，那用什么办法可以解决呢？\n既然是因为目标IP和源IP在传递的过程中一直在变化，那可以再添加一个地址，套一层壳，每次只换壳，目标IP永远不变，有句歌词怎么唱来着：“洋装虽然穿在身 我心依然是中国心”。正所谓初心不改，奋勇向前，总有一天会达成目标的。看一看具体的流程，本机将DNS消息和目标IP和自己IP以及网关的一个地址（目标地址）和自己的一个地址（源地址）,根据网关的这个地址，把信息发个网关，网关收到消息，根据目标IP选择一个目标路由器或主机，将消息中的目标地址改成路由或者主机的地址，将源地址改为网关自己的地址，根据目标地址，将消息发给路由或主机，以此类推一直到目标IP主机收到这个消息。消息回复，使用同样的方法。这样就完成了两台电脑之间的通信。\n\n用什么地址可以唯一标识一台计算机呢？答案是MAC地址，每台计算机在生产的时候都会为其分配一个唯一的一个MAC地址。计算机之间的通信原理大致就是这样，具体细节，会在后面的文章中介绍。接下来，我们来大致理一理这个过程的稍微具体点的实现。\n\n我们分别看看各个计算机的职责：\n\n1. 发起通信的主机，主要职责：\n   * 准备好要发送的用户信息；\n   * 找到目标主机IP地址和本机的IP地址；\n   * 将目标主机的的IP地址添加为信息的目标IP，将自己的IP地址添加为源IP，将其作为一整体，当作一条新的信息；\n   * 找到网关的MAC地址和本机的MAC地址；\n   * 在新的信息上添加网关MAC地址作为目标MAC地址，添加本机MAC地址作为源MAC地址；\n   * 根据目标MAC地址，将消息发送出去。\n2. 网关或者路由，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是，则取出目标IP地址，看看离这个IP最近且与自己直接相连的路由或者主机，找出它的MAC地址，并且和它相连的网络接口，将目标MAC地址修改为最近的路由或者主机的MAC地址，将源MAC地址修改为网关或者路由自己的MAC地址，将消息从找到的网络接口发送出去。\n   * 如果不是，将消息丢弃。\n3. 接收端的主机，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是本机MAC地址，取出目标IP，检查是不是本机IP；\n   * 如果不是本机MAC地址，丢弃此信息，不作后面的解析；\n   * 如果是本机IP地址，则取出信息，进行相应处理；\n   * 如果不是本机IP地址，则丢弃此消息；\n\n从上面的职责，我们可以看出它们的主要职责有，用户信息处理，IP地址处理和MAC地址处理。源主机和目标主机这三个职责都有，只不过是过程向逆，三者都有的职责是IP地址处理和MAC地址处理。所以我们可以将这三个职责抽象出三个独立的处理模块，分别处理各自职责内的事情。将这三个模块组合起来就可以处理整个通信过程。而且从上面的过程可以明显的看出，这些处理过程有着层级关系，为了降低复杂性，我们对网络进行分层，将用户数据处理模块对应为应用层，IP地址处理模块对应为IP层，MAC地址处理模块对应为数据链路层。这就是计算机网络中的分层思想。\n\n小伙伴们看到这，是不是要着急了。计算机网络的书本上明明白白说了OSI参考模型是七层，TCP/IP参考模型是四层，这里只有三层，明显是博主学艺不精。至于OSI参考模型这里就不说了，这个只是参考模型，在实现中并没有采用。TCP/IP参考模型的四层，再加上一层物理层（就是各类物理硬件），我们说的就是这个模型，下面将另外两层补上。\n\n前面只是说到两台主机间的通信，我们忽略了物理设备这层（即各类硬件），把这层加上就足够两台主机通信了（当然这里可靠性之类的细节），也就是说，如果每台计算机只有一个使用网络的程序，那么理论上有这四层就能进行网络通信了，但是我们都知道，每台电脑上都有很多程序在使用网络，这就带了一个问题，计算机收到了来之网络上的信息，这条信息是要交给哪个应用程序的呢？我们可已使用上面的原理再加一层处理，网络分层也加一层，这一层处理的职责是在信息中添加一个ID标记（也就是端口）来标记这条消息是给哪个应用程序的，在接收端，根据这个ID（即端口）将信息交给对应的应用程序。加上这两层，就可以真真正正的实现通信了。\n\n---\n\n### 分层\n\n下面来看看分层：网络协议通常分不同层次进行开发，每一层分别\n负责不同的通信功能。这里不介绍物理层，这一层并非协议分层。\n\n1. 链路层：通常包括操作系统中的设备驱动程序及接口卡。\n2. 网络层：处理分组在网络中的活动，包括协议有：IP、ICMP和IGMP。\n3. 运输层：或者叫做传输层，主要是为两台主机的应用程序提供端到端的通信，包括协议有：TCP和UDP。\n4. 应用层：负责处理特定应用程序的细节，包括协议有：Telnet、FTP、HTTP和e-mail等。\n\n\n用一张图来表示一下TCP/IP协议族中不同层次的协议，协议详情，以后在详陈：\n\n{% asset_img 图四.png 图四 %}\n\n---\n\n### 封装\n\n借助图四中的协议之间的箭头，我们来看看数据的组装（即箭头方向是从上向下的过程）和解析（即箭头方向是从下向上的过程）过程，这里的组装就是现在要将的封装，下一小节要说的分用就是解析过程。\n\n封装过程如下：\n\n1. 用户输入数据给应用程序，比如使用FTP的PWD命令显示当前目录，此时的数据就是：PWD。\n2. FTP应用程序将此命令按FTP协议的规定将用户数据封装成FTP数据：PWD\\r\\r。\n3. FTP将FTP数据交给TCP层，TCP层按照TCP协议加上TCP头，形成新的数据：TCP头+FTP数据。\n4. TCP层将数据传给IP层，IP层按照IP协议加上IP头，形成新的数据：IP头+TCP头+FTP数据。\n5. IP层将数据交给链路层，链路层按照链路层上的协议（一般是以太网协议）加上链路层协议头和链路层尾部，形成新的数据：以太网协议头+IP头+TCP头+FTP数据+以太网尾部。\n\n如下图所示：\n\n{% asset_img 图五.png 图五 %}\n\n---\n\n### 分用\n\n分用正好是封装的逆过程，此过程就不赘述了，这里说一个题外话，由以太网尾部联想到身份证最后一位的含义，它们的作用是一样的，都是一个校验作用。现在就让我们来看看身份证末尾出现X是怎么一回事：\n\n公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。\n\n前面的17位是可以根据地区、出生年月和顺序码确定下来，最有一位的计算方法如下：\n\n1. 将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这17位数字和系数相乘的结果相加。\n3. 用加出来和除以11，看余数是多少？\n4. 余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字。其分别对应的最后一位身份证的号码为1－0－X －9－8－7－6－5－4－3－2。\n\n从上面可以看出由于是对11取余数，所以有11个余数，而一位数只有10个，所以就出现了X。现在你可以用自己的身份证验证一下是不是这样的,如果你计算出来的结果与你身份证最后一位不一样，你的身份证就有问题了。还有一点：倒数第二数字，如果是奇数，则说明这个身份证号码是男性的，偶数则是女性的。\n\n---\n\n参考资料：\n\n1. 《TCP/IP详解：卷一》\n2. [居民身份证号码](http://baike.baidu.com/view/188003.htm)","source":"_posts/计算机网络概述.md","raw":"title: 计算机网络概述\ntags:\n  - 计算机网络\ncategories:\n  - 计算机网络\ndate: 2015-11-26 20:51:27\n---\n\n\n### 基本原理\n\n在《也说“当你输入一个网址，实际会发生什么?”》中介绍到，一台电脑要跟另一台电脑进行通信（所谓通信就是进行数据交换，比如：从其他电脑上下载一个文件到自己电脑等等，如果没有网络，我们一般的做法是使用U盘、光盘等存储设备将文件从某电脑上拷贝到U盘或者刻录到光盘，然后再把U盘或者光盘的文件拷贝到自己电脑上），说道一个重要的步骤就是找到想进行通信的计算机的IP地址（使用DNS协议实现），只是这样就能通信了吗？我只能说小伙子你真是“too young too simple”。这只是万里长征的一小步，为了后面知识点介绍的方便和对网络通信有大局观，现在先简单的概括性的对网络进行介绍。  \n\n上篇日记中说到，在浏览器地址栏中输入www.baidu.com时，我们的计算机会把这个域名转换成IP地址，这个宏观过程就是之前讲过的DNS协议查询的那样，但是现在的问题是，本机也就是192.168.1.100去询问DNS服务器223.5.5.5 www.baidu.com的IP是多少时，本机和DNS服务器并不是用一根线直接相连的，而是通过网关和路由器间接相连，要把这个询问消息发送个DNS服务器，就必须要这些网关和路由器进行转发，使用ipconfig /all命令可以查看网关，如图：\n\n<!--more-->\n\n{% asset_img 图一.jpg 图一 %}  \n\n也就是说我先把信息发给网关或者路由器，如果只能使用IP来表示目标的话，那就只能先将目标设置为网关IP：192.168.1.100，但是当网关收到了这条消息后，网关不知道该怎么办，它该把这条消息发给谁呢？这显然是行不通的，当然这里可以使用广播，向与网关相连的所有的网关或这路由器都发送这条消息，其它机器使用同样的方法一直把消息传递给DNS服务器，然后DNS服务器使用同样的方法把响应回传。这种实现有一个很恐怖的地方，就拿网关A以及和网关A相连的另一个路由B来说，当网关把消息广播出去后，路由B会收到一条消息，然后路由B又将消息广播，此时网关A又会收到这条消息，然后A和B就传这条消息传到白头到老，地老天荒。如图：\n\n{% asset_img 图二.png 图二 %}  \n\n有人说这个比较容易解决，A传给B后，B传给除A外的其他机器，这样就不会出现这种传过来传回去的无限循环。传给出了除信息来源的其他机器，也就是说每传到一个机器后，要把信息里的源IP地址改变成机器自己的IP地址，这会出现当DNS服务器收到信息后不知道把信息回给谁？接着广播吗？就算这样行的通，这样真的能解决无限循环的问题吗？现在假设A将信息传给B，B传给除A外的其他机器，比如C，C收到信息，C将信息传给除B外的其他机器，比如A，又是一个天长地久，之前是两人的缠缠绵绵到天涯，现在是三人的纠葛漩涡。除此之外，这种方法带来的将是整个网络的瘫痪，进入流言满天飞，而且是永无停歇的境况。如图：\n\n{% asset_img 图三.png 图三 %}  \n\n这么看来这种方法是行不通的，那用什么办法可以解决呢？\n既然是因为目标IP和源IP在传递的过程中一直在变化，那可以再添加一个地址，套一层壳，每次只换壳，目标IP永远不变，有句歌词怎么唱来着：“洋装虽然穿在身 我心依然是中国心”。正所谓初心不改，奋勇向前，总有一天会达成目标的。看一看具体的流程，本机将DNS消息和目标IP和自己IP以及网关的一个地址（目标地址）和自己的一个地址（源地址）,根据网关的这个地址，把信息发个网关，网关收到消息，根据目标IP选择一个目标路由器或主机，将消息中的目标地址改成路由或者主机的地址，将源地址改为网关自己的地址，根据目标地址，将消息发给路由或主机，以此类推一直到目标IP主机收到这个消息。消息回复，使用同样的方法。这样就完成了两台电脑之间的通信。\n\n用什么地址可以唯一标识一台计算机呢？答案是MAC地址，每台计算机在生产的时候都会为其分配一个唯一的一个MAC地址。计算机之间的通信原理大致就是这样，具体细节，会在后面的文章中介绍。接下来，我们来大致理一理这个过程的稍微具体点的实现。\n\n我们分别看看各个计算机的职责：\n\n1. 发起通信的主机，主要职责：\n   * 准备好要发送的用户信息；\n   * 找到目标主机IP地址和本机的IP地址；\n   * 将目标主机的的IP地址添加为信息的目标IP，将自己的IP地址添加为源IP，将其作为一整体，当作一条新的信息；\n   * 找到网关的MAC地址和本机的MAC地址；\n   * 在新的信息上添加网关MAC地址作为目标MAC地址，添加本机MAC地址作为源MAC地址；\n   * 根据目标MAC地址，将消息发送出去。\n2. 网关或者路由，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是，则取出目标IP地址，看看离这个IP最近且与自己直接相连的路由或者主机，找出它的MAC地址，并且和它相连的网络接口，将目标MAC地址修改为最近的路由或者主机的MAC地址，将源MAC地址修改为网关或者路由自己的MAC地址，将消息从找到的网络接口发送出去。\n   * 如果不是，将消息丢弃。\n3. 接收端的主机，主要职责：\n   * 将收到的信息进行解析，取出目标MAC地址，对比看看是不是自己的MAC地址；\n   * 如果是本机MAC地址，取出目标IP，检查是不是本机IP；\n   * 如果不是本机MAC地址，丢弃此信息，不作后面的解析；\n   * 如果是本机IP地址，则取出信息，进行相应处理；\n   * 如果不是本机IP地址，则丢弃此消息；\n\n从上面的职责，我们可以看出它们的主要职责有，用户信息处理，IP地址处理和MAC地址处理。源主机和目标主机这三个职责都有，只不过是过程向逆，三者都有的职责是IP地址处理和MAC地址处理。所以我们可以将这三个职责抽象出三个独立的处理模块，分别处理各自职责内的事情。将这三个模块组合起来就可以处理整个通信过程。而且从上面的过程可以明显的看出，这些处理过程有着层级关系，为了降低复杂性，我们对网络进行分层，将用户数据处理模块对应为应用层，IP地址处理模块对应为IP层，MAC地址处理模块对应为数据链路层。这就是计算机网络中的分层思想。\n\n小伙伴们看到这，是不是要着急了。计算机网络的书本上明明白白说了OSI参考模型是七层，TCP/IP参考模型是四层，这里只有三层，明显是博主学艺不精。至于OSI参考模型这里就不说了，这个只是参考模型，在实现中并没有采用。TCP/IP参考模型的四层，再加上一层物理层（就是各类物理硬件），我们说的就是这个模型，下面将另外两层补上。\n\n前面只是说到两台主机间的通信，我们忽略了物理设备这层（即各类硬件），把这层加上就足够两台主机通信了（当然这里可靠性之类的细节），也就是说，如果每台计算机只有一个使用网络的程序，那么理论上有这四层就能进行网络通信了，但是我们都知道，每台电脑上都有很多程序在使用网络，这就带了一个问题，计算机收到了来之网络上的信息，这条信息是要交给哪个应用程序的呢？我们可已使用上面的原理再加一层处理，网络分层也加一层，这一层处理的职责是在信息中添加一个ID标记（也就是端口）来标记这条消息是给哪个应用程序的，在接收端，根据这个ID（即端口）将信息交给对应的应用程序。加上这两层，就可以真真正正的实现通信了。\n\n---\n\n### 分层\n\n下面来看看分层：网络协议通常分不同层次进行开发，每一层分别\n负责不同的通信功能。这里不介绍物理层，这一层并非协议分层。\n\n1. 链路层：通常包括操作系统中的设备驱动程序及接口卡。\n2. 网络层：处理分组在网络中的活动，包括协议有：IP、ICMP和IGMP。\n3. 运输层：或者叫做传输层，主要是为两台主机的应用程序提供端到端的通信，包括协议有：TCP和UDP。\n4. 应用层：负责处理特定应用程序的细节，包括协议有：Telnet、FTP、HTTP和e-mail等。\n\n\n用一张图来表示一下TCP/IP协议族中不同层次的协议，协议详情，以后在详陈：\n\n{% asset_img 图四.png 图四 %}\n\n---\n\n### 封装\n\n借助图四中的协议之间的箭头，我们来看看数据的组装（即箭头方向是从上向下的过程）和解析（即箭头方向是从下向上的过程）过程，这里的组装就是现在要将的封装，下一小节要说的分用就是解析过程。\n\n封装过程如下：\n\n1. 用户输入数据给应用程序，比如使用FTP的PWD命令显示当前目录，此时的数据就是：PWD。\n2. FTP应用程序将此命令按FTP协议的规定将用户数据封装成FTP数据：PWD\\r\\r。\n3. FTP将FTP数据交给TCP层，TCP层按照TCP协议加上TCP头，形成新的数据：TCP头+FTP数据。\n4. TCP层将数据传给IP层，IP层按照IP协议加上IP头，形成新的数据：IP头+TCP头+FTP数据。\n5. IP层将数据交给链路层，链路层按照链路层上的协议（一般是以太网协议）加上链路层协议头和链路层尾部，形成新的数据：以太网协议头+IP头+TCP头+FTP数据+以太网尾部。\n\n如下图所示：\n\n{% asset_img 图五.png 图五 %}\n\n---\n\n### 分用\n\n分用正好是封装的逆过程，此过程就不赘述了，这里说一个题外话，由以太网尾部联想到身份证最后一位的含义，它们的作用是一样的，都是一个校验作用。现在就让我们来看看身份证末尾出现X是怎么一回事：\n\n公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。\n\n前面的17位是可以根据地区、出生年月和顺序码确定下来，最有一位的计算方法如下：\n\n1. 将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。\n2. 将这17位数字和系数相乘的结果相加。\n3. 用加出来和除以11，看余数是多少？\n4. 余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字。其分别对应的最后一位身份证的号码为1－0－X －9－8－7－6－5－4－3－2。\n\n从上面可以看出由于是对11取余数，所以有11个余数，而一位数只有10个，所以就出现了X。现在你可以用自己的身份证验证一下是不是这样的,如果你计算出来的结果与你身份证最后一位不一样，你的身份证就有问题了。还有一点：倒数第二数字，如果是奇数，则说明这个身份证号码是男性的，偶数则是女性的。\n\n---\n\n参考资料：\n\n1. 《TCP/IP详解：卷一》\n2. [居民身份证号码](http://baike.baidu.com/view/188003.htm)","slug":"计算机网络概述","published":1,"updated":"2015-11-26T13:34:52.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihgaspvb0009owop1vvqfid4"},{"title":"博客名字的来由","date":"2015-11-21T05:41:50.000Z","_content":"\n\n近来脑袋发热，想经营一下博客，看看自己能写出点啥鬼东西。同时，我也想知道自己对一件事情能坚持多久。在此写下开博声明，一来用来告诫自己：“自己吹过的牛，就算糗死，也要吹下去”；二来激励身边更多的小伙伴加入进来。\n\n<!--more-->\n\n---\n\n正事已经说完，现在来聊一聊名字的问题，这么怪异的名字来源与简书中**凤红邪**的一篇短诗：[《史上最中二爆表的四首诗！·郁》](http://www.jianshu.com/p/cc326f492bff)。全诗如下：\n>谁人手中诛心剑，\n>\n>借我斩此纷绪乱。\n>\n>凝悲噎泪为佳人，\n>\n>颦笑盈盈牵肠断。\n>\n>苟活碌碌计得失，\n>\n>诟我赞我如何辨。\n>\n>但恨吾生之已入凡人道，\n>\n>美色声名萦怀抱。\n>\n>困此牢笼不得脱，\n>\n>安共猪狗无为老。\n>\n>撕胸剖腹问此心，\n>\n>生我何用难欢笑。\n>\n>君不见世人多为尘关锁，\n>\n>随欲绝忧能几个。\n>\n>吾独叛世逆众人，\n>\n>礼法陈规皆斩破。\n>\n>命数非天当由我，\n>\n>但求逍遥宁执错。\n>\n>狂歌痛饮日西斜，\n>\n>携酒一壶走天涯。\n>\n>散发赤脚从人谩，\n>\n>醉来眠处即为家。\n>\n>待得沧桑都历尽，\n>\n>心若止水看浮华。\n>\n>却问谁人能自在，\n>\n>皆是<font color=#0099ff size=5 face=\"黑体\">翰海一尘沙。</font>\n\n---\n博客名字就是取自最后一句“却问谁人能自在，皆是翰海一尘沙”。各位看官，以后请不要问我为什么要取这个名字，不为什么，就是恰巧看到了这首诗而已，没有特别的意义。如果非得说有什么意义的话，那就是写这篇博客来练一练Markdown语法。","source":"_posts/博客名字的由来.md","raw":"title: 博客名字的来由\ndate: 2015-11-21 13:41:50\ntags:\n- 杂谈\n- 关于博客\ncategories:\n- 杂谈\n---\n\n\n近来脑袋发热，想经营一下博客，看看自己能写出点啥鬼东西。同时，我也想知道自己对一件事情能坚持多久。在此写下开博声明，一来用来告诫自己：“自己吹过的牛，就算糗死，也要吹下去”；二来激励身边更多的小伙伴加入进来。\n\n<!--more-->\n\n---\n\n正事已经说完，现在来聊一聊名字的问题，这么怪异的名字来源与简书中**凤红邪**的一篇短诗：[《史上最中二爆表的四首诗！·郁》](http://www.jianshu.com/p/cc326f492bff)。全诗如下：\n>谁人手中诛心剑，\n>\n>借我斩此纷绪乱。\n>\n>凝悲噎泪为佳人，\n>\n>颦笑盈盈牵肠断。\n>\n>苟活碌碌计得失，\n>\n>诟我赞我如何辨。\n>\n>但恨吾生之已入凡人道，\n>\n>美色声名萦怀抱。\n>\n>困此牢笼不得脱，\n>\n>安共猪狗无为老。\n>\n>撕胸剖腹问此心，\n>\n>生我何用难欢笑。\n>\n>君不见世人多为尘关锁，\n>\n>随欲绝忧能几个。\n>\n>吾独叛世逆众人，\n>\n>礼法陈规皆斩破。\n>\n>命数非天当由我，\n>\n>但求逍遥宁执错。\n>\n>狂歌痛饮日西斜，\n>\n>携酒一壶走天涯。\n>\n>散发赤脚从人谩，\n>\n>醉来眠处即为家。\n>\n>待得沧桑都历尽，\n>\n>心若止水看浮华。\n>\n>却问谁人能自在，\n>\n>皆是<font color=#0099ff size=5 face=\"黑体\">翰海一尘沙。</font>\n\n---\n博客名字就是取自最后一句“却问谁人能自在，皆是翰海一尘沙”。各位看官，以后请不要问我为什么要取这个名字，不为什么，就是恰巧看到了这首诗而已，没有特别的意义。如果非得说有什么意义的话，那就是写这篇博客来练一练Markdown语法。","slug":"博客名字的由来","published":1,"updated":"2015-11-21T11:34:22.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihgaspwf000eowop0pw7axul"}],"PostAsset":[{"_id":"source/_posts/计算机网络概述/图一.jpg","post":"cihgaspvb0009owop1vvqfid4","slug":"图一.jpg","modified":1},{"_id":"source/_posts/计算机网络概述/图三.png","post":"cihgaspvb0009owop1vvqfid4","slug":"图三.png","modified":1},{"_id":"source/_posts/计算机网络概述/图二.png","post":"cihgaspvb0009owop1vvqfid4","slug":"图二.png","modified":1},{"_id":"source/_posts/计算机网络概述/图五.png","post":"cihgaspvb0009owop1vvqfid4","slug":"图五.png","modified":1},{"_id":"source/_posts/计算机网络概述/图四.png","post":"cihgaspvb0009owop1vvqfid4","slug":"图四.png","modified":1}],"PostCategory":[{"post_id":"cihgaspus0000owop30v7mdse","category_id":"cihgaspv10001owop68qgl77z","_id":"cihgaspv60004owop0jz4wz42"},{"post_id":"cihgaspvb0009owop1vvqfid4","category_id":"cihgaspvd000aowopww70m296","_id":"cihgaspvf000dowopx3gqn68n"},{"post_id":"cihgaspwf000eowop0pw7axul","category_id":"cihgaspwg000fowop7qr549af","_id":"cihgaspwi000iowop7gtfwir7"}],"PostTag":[{"post_id":"cihgaspus0000owop30v7mdse","tag_id":"cihgaspv10002owopvfu85dfe","_id":"cihgaspv70006owoph0piza52"},{"post_id":"cihgaspus0000owop30v7mdse","tag_id":"cihgaspv50003owop5dt96e3g","_id":"cihgaspv70007owopa0rk7kff"},{"post_id":"cihgaspus0000owop30v7mdse","tag_id":"cihgaspv60005owopxv0y84ar","_id":"cihgaspv70008owop2o3lugtz"},{"post_id":"cihgaspvb0009owop1vvqfid4","tag_id":"cihgaspve000bowopqf738vlu","_id":"cihgaspve000cowopcmzfnsiw"},{"post_id":"cihgaspwf000eowop0pw7axul","tag_id":"cihgaspwh000gowophe0l3q8q","_id":"cihgaspwi000jowoph0ejrj0j"},{"post_id":"cihgaspwf000eowop0pw7axul","tag_id":"cihgaspwh000howopmbm9wz6f","_id":"cihgaspwi000kowop0laxidbe"}],"Tag":[{"name":"教程","_id":"cihgaspv10002owopvfu85dfe"},{"name":"总结","_id":"cihgaspv50003owop5dt96e3g"},{"name":"Hexo","_id":"cihgaspv60005owopxv0y84ar"},{"name":"计算机网络","_id":"cihgaspve000bowopqf738vlu"},{"name":"杂谈","_id":"cihgaspwh000gowophe0l3q8q"},{"name":"关于博客","_id":"cihgaspwh000howopmbm9wz6f"}]}}